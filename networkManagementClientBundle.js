var networkManagementClient =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloudError", function() { return CloudError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseResource", function() { return BaseResource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubResource", function() { return SubResource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BackendAddressPool", function() { return BackendAddressPool; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InboundNatRule", function() { return InboundNatRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Resource", function() { return Resource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationSecurityGroup", function() { return ApplicationSecurityGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityRule", function() { return SecurityRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkInterfaceDnsSettings", function() { return NetworkInterfaceDnsSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkInterface", function() { return NetworkInterface; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkSecurityGroup", function() { return NetworkSecurityGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Route", function() { return Route; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteTable", function() { return RouteTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceEndpointPropertiesFormat", function() { return ServiceEndpointPropertiesFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PublicIPAddressSku", function() { return PublicIPAddressSku; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PublicIPAddressDnsSettings", function() { return PublicIPAddressDnsSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PublicIPAddress", function() { return PublicIPAddress; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IPConfiguration", function() { return IPConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceNavigationLink", function() { return ResourceNavigationLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Subnet", function() { return Subnet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkInterfaceIPConfiguration", function() { return NetworkInterfaceIPConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayBackendAddress", function() { return ApplicationGatewayBackendAddress; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayBackendAddressPool", function() { return ApplicationGatewayBackendAddressPool; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayConnectionDraining", function() { return ApplicationGatewayConnectionDraining; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayBackendHttpSettings", function() { return ApplicationGatewayBackendHttpSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayBackendHealthServer", function() { return ApplicationGatewayBackendHealthServer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayBackendHealthHttpSettings", function() { return ApplicationGatewayBackendHealthHttpSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayBackendHealthPool", function() { return ApplicationGatewayBackendHealthPool; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayBackendHealth", function() { return ApplicationGatewayBackendHealth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewaySku", function() { return ApplicationGatewaySku; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewaySslPolicy", function() { return ApplicationGatewaySslPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayIPConfiguration", function() { return ApplicationGatewayIPConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayAuthenticationCertificate", function() { return ApplicationGatewayAuthenticationCertificate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewaySslCertificate", function() { return ApplicationGatewaySslCertificate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayFrontendIPConfiguration", function() { return ApplicationGatewayFrontendIPConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayFrontendPort", function() { return ApplicationGatewayFrontendPort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayHttpListener", function() { return ApplicationGatewayHttpListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayPathRule", function() { return ApplicationGatewayPathRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayProbeHealthResponseMatch", function() { return ApplicationGatewayProbeHealthResponseMatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayProbe", function() { return ApplicationGatewayProbe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayRequestRoutingRule", function() { return ApplicationGatewayRequestRoutingRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayRedirectConfiguration", function() { return ApplicationGatewayRedirectConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayUrlPathMap", function() { return ApplicationGatewayUrlPathMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayFirewallDisabledRuleGroup", function() { return ApplicationGatewayFirewallDisabledRuleGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayWebApplicationFirewallConfiguration", function() { return ApplicationGatewayWebApplicationFirewallConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGateway", function() { return ApplicationGateway; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayFirewallRule", function() { return ApplicationGatewayFirewallRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayFirewallRuleGroup", function() { return ApplicationGatewayFirewallRuleGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayFirewallRuleSet", function() { return ApplicationGatewayFirewallRuleSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayAvailableWafRuleSetsResult", function() { return ApplicationGatewayAvailableWafRuleSetsResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayAvailableSslOptions", function() { return ApplicationGatewayAvailableSslOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewaySslPredefinedPolicy", function() { return ApplicationGatewaySslPredefinedPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DnsNameAvailabilityResult", function() { return DnsNameAvailabilityResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EndpointServiceResult", function() { return EndpointServiceResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitAuthorization", function() { return ExpressRouteCircuitAuthorization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitPeeringConfig", function() { return ExpressRouteCircuitPeeringConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteFilterRule", function() { return RouteFilterRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitStats", function() { return ExpressRouteCircuitStats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitPeering", function() { return ExpressRouteCircuitPeering; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteFilter", function() { return RouteFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ipv6ExpressRouteCircuitPeeringConfig", function() { return Ipv6ExpressRouteCircuitPeeringConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitSku", function() { return ExpressRouteCircuitSku; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitServiceProviderProperties", function() { return ExpressRouteCircuitServiceProviderProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuit", function() { return ExpressRouteCircuit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitArpTable", function() { return ExpressRouteCircuitArpTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitsArpTableListResult", function() { return ExpressRouteCircuitsArpTableListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitRoutesTable", function() { return ExpressRouteCircuitRoutesTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitsRoutesTableListResult", function() { return ExpressRouteCircuitsRoutesTableListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitRoutesTableSummary", function() { return ExpressRouteCircuitRoutesTableSummary; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitsRoutesTableSummaryListResult", function() { return ExpressRouteCircuitsRoutesTableSummaryListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteServiceProviderBandwidthsOffered", function() { return ExpressRouteServiceProviderBandwidthsOffered; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteServiceProvider", function() { return ExpressRouteServiceProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadBalancerSku", function() { return LoadBalancerSku; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontendIPConfiguration", function() { return FrontendIPConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadBalancingRule", function() { return LoadBalancingRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Probe", function() { return Probe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InboundNatPool", function() { return InboundNatPool; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutboundNatRule", function() { return OutboundNatRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadBalancer", function() { return LoadBalancer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorDetails", function() { return ErrorDetails; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorModel", function() { return ErrorModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AzureAsyncOperationResult", function() { return AzureAsyncOperationResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EffectiveNetworkSecurityGroupAssociation", function() { return EffectiveNetworkSecurityGroupAssociation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EffectiveNetworkSecurityRule", function() { return EffectiveNetworkSecurityRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EffectiveNetworkSecurityGroup", function() { return EffectiveNetworkSecurityGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EffectiveNetworkSecurityGroupListResult", function() { return EffectiveNetworkSecurityGroupListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EffectiveRoute", function() { return EffectiveRoute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EffectiveRouteListResult", function() { return EffectiveRouteListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkWatcher", function() { return NetworkWatcher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopologyParameters", function() { return TopologyParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopologyAssociation", function() { return TopologyAssociation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopologyResource", function() { return TopologyResource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Topology", function() { return Topology; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VerificationIPFlowParameters", function() { return VerificationIPFlowParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VerificationIPFlowResult", function() { return VerificationIPFlowResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NextHopParameters", function() { return NextHopParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NextHopResult", function() { return NextHopResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityGroupViewParameters", function() { return SecurityGroupViewParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkInterfaceAssociation", function() { return NetworkInterfaceAssociation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubnetAssociation", function() { return SubnetAssociation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityRuleAssociations", function() { return SecurityRuleAssociations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityGroupNetworkInterface", function() { return SecurityGroupNetworkInterface; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityGroupViewResult", function() { return SecurityGroupViewResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PacketCaptureStorageLocation", function() { return PacketCaptureStorageLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PacketCaptureFilter", function() { return PacketCaptureFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PacketCaptureParameters", function() { return PacketCaptureParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PacketCapture", function() { return PacketCapture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PacketCaptureResult", function() { return PacketCaptureResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PacketCaptureQueryStatusResult", function() { return PacketCaptureQueryStatusResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TroubleshootingParameters", function() { return TroubleshootingParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryTroubleshootingParameters", function() { return QueryTroubleshootingParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TroubleshootingRecommendedActions", function() { return TroubleshootingRecommendedActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TroubleshootingDetails", function() { return TroubleshootingDetails; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TroubleshootingResult", function() { return TroubleshootingResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RetentionPolicyParameters", function() { return RetentionPolicyParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlowLogStatusParameters", function() { return FlowLogStatusParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlowLogInformation", function() { return FlowLogInformation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectivitySource", function() { return ConnectivitySource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectivityDestination", function() { return ConnectivityDestination; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectivityParameters", function() { return ConnectivityParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectivityIssue", function() { return ConnectivityIssue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectivityHop", function() { return ConnectivityHop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectivityInformation", function() { return ConnectivityInformation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PatchRouteFilterRule", function() { return PatchRouteFilterRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PatchRouteFilter", function() { return PatchRouteFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BGPCommunity", function() { return BGPCommunity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BgpServiceCommunity", function() { return BgpServiceCommunity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UsageName", function() { return UsageName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Usage", function() { return Usage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkPeering", function() { return VirtualNetworkPeering; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddressSpace", function() { return AddressSpace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DhcpOptions", function() { return DhcpOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetwork", function() { return VirtualNetwork; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IPAddressAvailabilityResult", function() { return IPAddressAvailabilityResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkUsageName", function() { return VirtualNetworkUsageName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkUsage", function() { return VirtualNetworkUsage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewayIPConfiguration", function() { return VirtualNetworkGatewayIPConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewaySku", function() { return VirtualNetworkGatewaySku; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VpnClientRootCertificate", function() { return VpnClientRootCertificate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VpnClientRevokedCertificate", function() { return VpnClientRevokedCertificate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VpnClientConfiguration", function() { return VpnClientConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BgpSettings", function() { return BgpSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BgpPeerStatus", function() { return BgpPeerStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GatewayRoute", function() { return GatewayRoute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGateway", function() { return VirtualNetworkGateway; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VpnClientParameters", function() { return VpnClientParameters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BgpPeerStatusListResult", function() { return BgpPeerStatusListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GatewayRouteListResult", function() { return GatewayRouteListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TunnelConnectionHealth", function() { return TunnelConnectionHealth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocalNetworkGateway", function() { return LocalNetworkGateway; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IpsecPolicy", function() { return IpsecPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewayConnection", function() { return VirtualNetworkGatewayConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionResetSharedKey", function() { return ConnectionResetSharedKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionSharedKey", function() { return ConnectionSharedKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkConnectionGatewayReference", function() { return VirtualNetworkConnectionGatewayReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewayConnectionListEntity", function() { return VirtualNetworkGatewayConnectionListEntity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewaysBackendHealthOptionalParams", function() { return ApplicationGatewaysBackendHealthOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewaysBeginBackendHealthOptionalParams", function() { return ApplicationGatewaysBeginBackendHealthOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadBalancersGetOptionalParams", function() { return LoadBalancersGetOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InboundNatRulesGetOptionalParams", function() { return InboundNatRulesGetOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkInterfacesGetOptionalParams", function() { return NetworkInterfacesGetOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams", function() { return NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkSecurityGroupsGetOptionalParams", function() { return NetworkSecurityGroupsGetOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PublicIPAddressesGetOptionalParams", function() { return PublicIPAddressesGetOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptionalParams", function() { return PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteFiltersGetOptionalParams", function() { return RouteFiltersGetOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteTablesGetOptionalParams", function() { return RouteTablesGetOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworksGetOptionalParams", function() { return VirtualNetworksGetOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworksCheckIPAddressAvailabilityOptionalParams", function() { return VirtualNetworksCheckIPAddressAvailabilityOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubnetsGetOptionalParams", function() { return SubnetsGetOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewaysResetOptionalParams", function() { return VirtualNetworkGatewaysResetOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams", function() { return VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewaysBeginResetOptionalParams", function() { return VirtualNetworkGatewaysBeginResetOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewaysBeginGetBgpPeerStatusOptionalParams", function() { return VirtualNetworkGatewaysBeginGetBgpPeerStatusOptionalParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayListResult", function() { return ApplicationGatewayListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayAvailableSslPredefinedPolicies", function() { return ApplicationGatewayAvailableSslPredefinedPolicies; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationSecurityGroupListResult", function() { return ApplicationSecurityGroupListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EndpointServicesListResult", function() { return EndpointServicesListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthorizationListResult", function() { return AuthorizationListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitPeeringListResult", function() { return ExpressRouteCircuitPeeringListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitListResult", function() { return ExpressRouteCircuitListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteServiceProviderListResult", function() { return ExpressRouteServiceProviderListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadBalancerListResult", function() { return LoadBalancerListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadBalancerBackendAddressPoolListResult", function() { return LoadBalancerBackendAddressPoolListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadBalancerFrontendIPConfigurationListResult", function() { return LoadBalancerFrontendIPConfigurationListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InboundNatRuleListResult", function() { return InboundNatRuleListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadBalancerLoadBalancingRuleListResult", function() { return LoadBalancerLoadBalancingRuleListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkInterfaceListResult", function() { return NetworkInterfaceListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadBalancerProbeListResult", function() { return LoadBalancerProbeListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkInterfaceIPConfigurationListResult", function() { return NetworkInterfaceIPConfigurationListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkInterfaceLoadBalancerListResult", function() { return NetworkInterfaceLoadBalancerListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkSecurityGroupListResult", function() { return NetworkSecurityGroupListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityRuleListResult", function() { return SecurityRuleListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkWatcherListResult", function() { return NetworkWatcherListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PacketCaptureListResult", function() { return PacketCaptureListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PublicIPAddressListResult", function() { return PublicIPAddressListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteFilterListResult", function() { return RouteFilterListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteFilterRuleListResult", function() { return RouteFilterRuleListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteTableListResult", function() { return RouteTableListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteListResult", function() { return RouteListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BgpServiceCommunityListResult", function() { return BgpServiceCommunityListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UsagesListResult", function() { return UsagesListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkListResult", function() { return VirtualNetworkListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkListUsageResult", function() { return VirtualNetworkListUsageResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubnetListResult", function() { return SubnetListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkPeeringListResult", function() { return VirtualNetworkPeeringListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewayListResult", function() { return VirtualNetworkGatewayListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewayListConnectionsResult", function() { return VirtualNetworkGatewayListConnectionsResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewayConnectionListResult", function() { return VirtualNetworkGatewayConnectionListResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocalNetworkGatewayListResult", function() { return LocalNetworkGatewayListResult; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_azure_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_azure_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_azure_js__);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

var CloudError = __WEBPACK_IMPORTED_MODULE_0_ms_rest_azure_js__["CloudErrorMapper"];
var BaseResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_azure_js__["BaseResourceMapper"];
var SubResource = {
    required: false,
    serializedName: 'SubResource',
    type: {
        name: 'Composite',
        className: 'SubResource',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var BackendAddressPool = {
    required: false,
    serializedName: 'BackendAddressPool',
    type: {
        name: 'Composite',
        className: 'BackendAddressPool',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            backendIPConfigurations: {
                required: false,
                readOnly: true,
                serializedName: 'properties.backendIPConfigurations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'NetworkInterfaceIPConfigurationElementType',
                        type: {
                            name: 'Composite',
                            className: 'NetworkInterfaceIPConfiguration'
                        }
                    }
                }
            },
            loadBalancingRules: {
                required: false,
                readOnly: true,
                serializedName: 'properties.loadBalancingRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SubResource'
                        }
                    }
                }
            },
            outboundNatRule: {
                required: false,
                readOnly: true,
                serializedName: 'properties.outboundNatRule',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var InboundNatRule = {
    required: false,
    serializedName: 'InboundNatRule',
    type: {
        name: 'Composite',
        className: 'InboundNatRule',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            frontendIPConfiguration: {
                required: false,
                serializedName: 'properties.frontendIPConfiguration',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            backendIPConfiguration: {
                required: false,
                readOnly: true,
                serializedName: 'properties.backendIPConfiguration',
                type: {
                    name: 'Composite',
                    className: 'NetworkInterfaceIPConfiguration'
                }
            },
            protocol: {
                required: false,
                serializedName: 'properties.protocol',
                type: {
                    name: 'String'
                }
            },
            frontendPort: {
                required: false,
                serializedName: 'properties.frontendPort',
                type: {
                    name: 'Number'
                }
            },
            backendPort: {
                required: false,
                serializedName: 'properties.backendPort',
                type: {
                    name: 'Number'
                }
            },
            idleTimeoutInMinutes: {
                required: false,
                serializedName: 'properties.idleTimeoutInMinutes',
                type: {
                    name: 'Number'
                }
            },
            enableFloatingIP: {
                required: false,
                serializedName: 'properties.enableFloatingIP',
                type: {
                    name: 'Boolean'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var Resource = {
    required: false,
    serializedName: 'Resource',
    type: {
        name: 'Composite',
        className: 'Resource',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var ApplicationSecurityGroup = {
    required: false,
    serializedName: 'ApplicationSecurityGroup',
    type: {
        name: 'Composite',
        className: 'ApplicationSecurityGroup',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            resourceGuid: {
                required: false,
                readOnly: true,
                serializedName: 'properties.resourceGuid',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                readOnly: true,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var SecurityRule = {
    required: false,
    serializedName: 'SecurityRule',
    type: {
        name: 'Composite',
        className: 'SecurityRule',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            description: {
                required: false,
                serializedName: 'properties.description',
                type: {
                    name: 'String'
                }
            },
            protocol: {
                required: true,
                serializedName: 'properties.protocol',
                type: {
                    name: 'String'
                }
            },
            sourcePortRange: {
                required: false,
                serializedName: 'properties.sourcePortRange',
                type: {
                    name: 'String'
                }
            },
            destinationPortRange: {
                required: false,
                serializedName: 'properties.destinationPortRange',
                type: {
                    name: 'String'
                }
            },
            sourceAddressPrefix: {
                required: true,
                serializedName: 'properties.sourceAddressPrefix',
                type: {
                    name: 'String'
                }
            },
            sourceAddressPrefixes: {
                required: false,
                serializedName: 'properties.sourceAddressPrefixes',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            sourceApplicationSecurityGroups: {
                required: false,
                serializedName: 'properties.sourceApplicationSecurityGroups',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationSecurityGroupElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationSecurityGroup'
                        }
                    }
                }
            },
            destinationAddressPrefix: {
                required: true,
                serializedName: 'properties.destinationAddressPrefix',
                type: {
                    name: 'String'
                }
            },
            destinationAddressPrefixes: {
                required: false,
                serializedName: 'properties.destinationAddressPrefixes',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            destinationApplicationSecurityGroups: {
                required: false,
                serializedName: 'properties.destinationApplicationSecurityGroups',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationSecurityGroupElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationSecurityGroup'
                        }
                    }
                }
            },
            sourcePortRanges: {
                required: false,
                serializedName: 'properties.sourcePortRanges',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            destinationPortRanges: {
                required: false,
                serializedName: 'properties.destinationPortRanges',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            access: {
                required: true,
                serializedName: 'properties.access',
                type: {
                    name: 'String'
                }
            },
            priority: {
                required: false,
                serializedName: 'properties.priority',
                type: {
                    name: 'Number'
                }
            },
            direction: {
                required: true,
                serializedName: 'properties.direction',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkInterfaceDnsSettings = {
    required: false,
    serializedName: 'NetworkInterfaceDnsSettings',
    type: {
        name: 'Composite',
        className: 'NetworkInterfaceDnsSettings',
        modelProperties: {
            dnsServers: {
                required: false,
                serializedName: 'dnsServers',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            appliedDnsServers: {
                required: false,
                serializedName: 'appliedDnsServers',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            internalDnsNameLabel: {
                required: false,
                serializedName: 'internalDnsNameLabel',
                type: {
                    name: 'String'
                }
            },
            internalFqdn: {
                required: false,
                serializedName: 'internalFqdn',
                type: {
                    name: 'String'
                }
            },
            internalDomainNameSuffix: {
                required: false,
                serializedName: 'internalDomainNameSuffix',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkInterface = {
    required: false,
    serializedName: 'NetworkInterface',
    type: {
        name: 'Composite',
        className: 'NetworkInterface',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            virtualMachine: {
                required: false,
                serializedName: 'properties.virtualMachine',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            networkSecurityGroup: {
                required: false,
                serializedName: 'properties.networkSecurityGroup',
                type: {
                    name: 'Composite',
                    className: 'NetworkSecurityGroup'
                }
            },
            ipConfigurations: {
                required: false,
                serializedName: 'properties.ipConfigurations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'NetworkInterfaceIPConfigurationElementType',
                        type: {
                            name: 'Composite',
                            className: 'NetworkInterfaceIPConfiguration'
                        }
                    }
                }
            },
            dnsSettings: {
                required: false,
                serializedName: 'properties.dnsSettings',
                type: {
                    name: 'Composite',
                    className: 'NetworkInterfaceDnsSettings'
                }
            },
            macAddress: {
                required: false,
                serializedName: 'properties.macAddress',
                type: {
                    name: 'String'
                }
            },
            primary: {
                required: false,
                serializedName: 'properties.primary',
                type: {
                    name: 'Boolean'
                }
            },
            enableAcceleratedNetworking: {
                required: false,
                serializedName: 'properties.enableAcceleratedNetworking',
                type: {
                    name: 'Boolean'
                }
            },
            enableIPForwarding: {
                required: false,
                serializedName: 'properties.enableIPForwarding',
                type: {
                    name: 'Boolean'
                }
            },
            resourceGuid: {
                required: false,
                serializedName: 'properties.resourceGuid',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkSecurityGroup = {
    required: false,
    serializedName: 'NetworkSecurityGroup',
    type: {
        name: 'Composite',
        className: 'NetworkSecurityGroup',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            securityRules: {
                required: false,
                serializedName: 'properties.securityRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SecurityRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'SecurityRule'
                        }
                    }
                }
            },
            defaultSecurityRules: {
                required: false,
                serializedName: 'properties.defaultSecurityRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SecurityRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'SecurityRule'
                        }
                    }
                }
            },
            networkInterfaces: {
                required: false,
                readOnly: true,
                serializedName: 'properties.networkInterfaces',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'NetworkInterfaceElementType',
                        type: {
                            name: 'Composite',
                            className: 'NetworkInterface'
                        }
                    }
                }
            },
            subnets: {
                required: false,
                readOnly: true,
                serializedName: 'properties.subnets',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubnetElementType',
                        type: {
                            name: 'Composite',
                            className: 'Subnet'
                        }
                    }
                }
            },
            resourceGuid: {
                required: false,
                serializedName: 'properties.resourceGuid',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var Route = {
    required: false,
    serializedName: 'Route',
    type: {
        name: 'Composite',
        className: 'Route',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            addressPrefix: {
                required: false,
                serializedName: 'properties.addressPrefix',
                type: {
                    name: 'String'
                }
            },
            nextHopType: {
                required: true,
                serializedName: 'properties.nextHopType',
                type: {
                    name: 'String'
                }
            },
            nextHopIpAddress: {
                required: false,
                serializedName: 'properties.nextHopIpAddress',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var RouteTable = {
    required: false,
    serializedName: 'RouteTable',
    type: {
        name: 'Composite',
        className: 'RouteTable',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            routes: {
                required: false,
                serializedName: 'properties.routes',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'RouteElementType',
                        type: {
                            name: 'Composite',
                            className: 'Route'
                        }
                    }
                }
            },
            subnets: {
                required: false,
                readOnly: true,
                serializedName: 'properties.subnets',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubnetElementType',
                        type: {
                            name: 'Composite',
                            className: 'Subnet'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ServiceEndpointPropertiesFormat = {
    required: false,
    serializedName: 'ServiceEndpointPropertiesFormat',
    type: {
        name: 'Composite',
        className: 'ServiceEndpointPropertiesFormat',
        modelProperties: {
            service: {
                required: false,
                serializedName: 'service',
                type: {
                    name: 'String'
                }
            },
            locations: {
                required: false,
                serializedName: 'locations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'provisioningState',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var PublicIPAddressSku = {
    required: false,
    serializedName: 'PublicIPAddressSku',
    type: {
        name: 'Composite',
        className: 'PublicIPAddressSku',
        modelProperties: {
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var PublicIPAddressDnsSettings = {
    required: false,
    serializedName: 'PublicIPAddressDnsSettings',
    type: {
        name: 'Composite',
        className: 'PublicIPAddressDnsSettings',
        modelProperties: {
            domainNameLabel: {
                required: false,
                serializedName: 'domainNameLabel',
                type: {
                    name: 'String'
                }
            },
            fqdn: {
                required: false,
                serializedName: 'fqdn',
                type: {
                    name: 'String'
                }
            },
            reverseFqdn: {
                required: false,
                serializedName: 'reverseFqdn',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var PublicIPAddress = {
    required: false,
    serializedName: 'PublicIPAddress',
    type: {
        name: 'Composite',
        className: 'PublicIPAddress',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            sku: {
                required: false,
                serializedName: 'sku',
                type: {
                    name: 'Composite',
                    className: 'PublicIPAddressSku'
                }
            },
            publicIPAllocationMethod: {
                required: false,
                serializedName: 'properties.publicIPAllocationMethod',
                type: {
                    name: 'String'
                }
            },
            publicIPAddressVersion: {
                required: false,
                serializedName: 'properties.publicIPAddressVersion',
                type: {
                    name: 'String'
                }
            },
            ipConfiguration: {
                required: false,
                readOnly: true,
                serializedName: 'properties.ipConfiguration',
                type: {
                    name: 'Composite',
                    className: 'IPConfiguration'
                }
            },
            dnsSettings: {
                required: false,
                serializedName: 'properties.dnsSettings',
                type: {
                    name: 'Composite',
                    className: 'PublicIPAddressDnsSettings'
                }
            },
            ipAddress: {
                required: false,
                serializedName: 'properties.ipAddress',
                type: {
                    name: 'String'
                }
            },
            idleTimeoutInMinutes: {
                required: false,
                serializedName: 'properties.idleTimeoutInMinutes',
                type: {
                    name: 'Number'
                }
            },
            resourceGuid: {
                required: false,
                serializedName: 'properties.resourceGuid',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            zones: {
                required: false,
                serializedName: 'zones',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var IPConfiguration = {
    required: false,
    serializedName: 'IPConfiguration',
    type: {
        name: 'Composite',
        className: 'IPConfiguration',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            privateIPAddress: {
                required: false,
                serializedName: 'properties.privateIPAddress',
                type: {
                    name: 'String'
                }
            },
            privateIPAllocationMethod: {
                required: false,
                serializedName: 'properties.privateIPAllocationMethod',
                type: {
                    name: 'String'
                }
            },
            subnet: {
                required: false,
                serializedName: 'properties.subnet',
                type: {
                    name: 'Composite',
                    className: 'Subnet'
                }
            },
            publicIPAddress: {
                required: false,
                serializedName: 'properties.publicIPAddress',
                type: {
                    name: 'Composite',
                    className: 'PublicIPAddress'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ResourceNavigationLink = {
    required: false,
    serializedName: 'ResourceNavigationLink',
    type: {
        name: 'Composite',
        className: 'ResourceNavigationLink',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            linkedResourceType: {
                required: false,
                serializedName: 'properties.linkedResourceType',
                type: {
                    name: 'String'
                }
            },
            link: {
                required: false,
                serializedName: 'properties.link',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                readOnly: true,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var Subnet = {
    required: false,
    serializedName: 'Subnet',
    type: {
        name: 'Composite',
        className: 'Subnet',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            addressPrefix: {
                required: false,
                serializedName: 'properties.addressPrefix',
                type: {
                    name: 'String'
                }
            },
            networkSecurityGroup: {
                required: false,
                serializedName: 'properties.networkSecurityGroup',
                type: {
                    name: 'Composite',
                    className: 'NetworkSecurityGroup'
                }
            },
            routeTable: {
                required: false,
                serializedName: 'properties.routeTable',
                type: {
                    name: 'Composite',
                    className: 'RouteTable'
                }
            },
            serviceEndpoints: {
                required: false,
                serializedName: 'properties.serviceEndpoints',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ServiceEndpointPropertiesFormatElementType',
                        type: {
                            name: 'Composite',
                            className: 'ServiceEndpointPropertiesFormat'
                        }
                    }
                }
            },
            ipConfigurations: {
                required: false,
                readOnly: true,
                serializedName: 'properties.ipConfigurations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'IPConfigurationElementType',
                        type: {
                            name: 'Composite',
                            className: 'IPConfiguration'
                        }
                    }
                }
            },
            resourceNavigationLinks: {
                required: false,
                serializedName: 'properties.resourceNavigationLinks',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ResourceNavigationLinkElementType',
                        type: {
                            name: 'Composite',
                            className: 'ResourceNavigationLink'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkInterfaceIPConfiguration = {
    required: false,
    serializedName: 'NetworkInterfaceIPConfiguration',
    type: {
        name: 'Composite',
        className: 'NetworkInterfaceIPConfiguration',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            applicationGatewayBackendAddressPools: {
                required: false,
                serializedName: 'properties.applicationGatewayBackendAddressPools',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayBackendAddressPoolElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayBackendAddressPool'
                        }
                    }
                }
            },
            loadBalancerBackendAddressPools: {
                required: false,
                serializedName: 'properties.loadBalancerBackendAddressPools',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'BackendAddressPoolElementType',
                        type: {
                            name: 'Composite',
                            className: 'BackendAddressPool'
                        }
                    }
                }
            },
            loadBalancerInboundNatRules: {
                required: false,
                serializedName: 'properties.loadBalancerInboundNatRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'InboundNatRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'InboundNatRule'
                        }
                    }
                }
            },
            privateIPAddress: {
                required: false,
                serializedName: 'properties.privateIPAddress',
                type: {
                    name: 'String'
                }
            },
            privateIPAllocationMethod: {
                required: false,
                serializedName: 'properties.privateIPAllocationMethod',
                type: {
                    name: 'String'
                }
            },
            privateIPAddressVersion: {
                required: false,
                serializedName: 'properties.privateIPAddressVersion',
                type: {
                    name: 'String'
                }
            },
            subnet: {
                required: false,
                serializedName: 'properties.subnet',
                type: {
                    name: 'Composite',
                    className: 'Subnet'
                }
            },
            primary: {
                required: false,
                serializedName: 'properties.primary',
                type: {
                    name: 'Boolean'
                }
            },
            publicIPAddress: {
                required: false,
                serializedName: 'properties.publicIPAddress',
                type: {
                    name: 'Composite',
                    className: 'PublicIPAddress'
                }
            },
            applicationSecurityGroups: {
                required: false,
                serializedName: 'properties.applicationSecurityGroups',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationSecurityGroupElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationSecurityGroup'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayBackendAddress = {
    required: false,
    serializedName: 'ApplicationGatewayBackendAddress',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayBackendAddress',
        modelProperties: {
            fqdn: {
                required: false,
                serializedName: 'fqdn',
                type: {
                    name: 'String'
                }
            },
            ipAddress: {
                required: false,
                serializedName: 'ipAddress',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayBackendAddressPool = {
    required: false,
    serializedName: 'ApplicationGatewayBackendAddressPool',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayBackendAddressPool',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            backendIPConfigurations: {
                required: false,
                serializedName: 'properties.backendIPConfigurations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'NetworkInterfaceIPConfigurationElementType',
                        type: {
                            name: 'Composite',
                            className: 'NetworkInterfaceIPConfiguration'
                        }
                    }
                }
            },
            backendAddresses: {
                required: false,
                serializedName: 'properties.backendAddresses',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayBackendAddressElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayBackendAddress'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayConnectionDraining = {
    required: false,
    serializedName: 'ApplicationGatewayConnectionDraining',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayConnectionDraining',
        modelProperties: {
            enabled: {
                required: true,
                serializedName: 'enabled',
                type: {
                    name: 'Boolean'
                }
            },
            drainTimeoutInSec: {
                required: true,
                serializedName: 'drainTimeoutInSec',
                constraints: {
                    InclusiveMaximum: 3600,
                    InclusiveMinimum: 1
                },
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var ApplicationGatewayBackendHttpSettings = {
    required: false,
    serializedName: 'ApplicationGatewayBackendHttpSettings',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayBackendHttpSettings',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            port: {
                required: false,
                serializedName: 'properties.port',
                type: {
                    name: 'Number'
                }
            },
            protocol: {
                required: false,
                serializedName: 'properties.protocol',
                type: {
                    name: 'String'
                }
            },
            cookieBasedAffinity: {
                required: false,
                serializedName: 'properties.cookieBasedAffinity',
                type: {
                    name: 'String'
                }
            },
            requestTimeout: {
                required: false,
                serializedName: 'properties.requestTimeout',
                type: {
                    name: 'Number'
                }
            },
            probe: {
                required: false,
                serializedName: 'properties.probe',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            authenticationCertificates: {
                required: false,
                serializedName: 'properties.authenticationCertificates',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SubResource'
                        }
                    }
                }
            },
            connectionDraining: {
                required: false,
                serializedName: 'properties.connectionDraining',
                type: {
                    name: 'Composite',
                    className: 'ApplicationGatewayConnectionDraining'
                }
            },
            hostName: {
                required: false,
                serializedName: 'properties.hostName',
                type: {
                    name: 'String'
                }
            },
            pickHostNameFromBackendAddress: {
                required: false,
                serializedName: 'properties.pickHostNameFromBackendAddress',
                type: {
                    name: 'Boolean'
                }
            },
            affinityCookieName: {
                required: false,
                serializedName: 'properties.affinityCookieName',
                type: {
                    name: 'String'
                }
            },
            probeEnabled: {
                required: false,
                serializedName: 'properties.probeEnabled',
                type: {
                    name: 'Boolean'
                }
            },
            path: {
                required: false,
                serializedName: 'properties.path',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayBackendHealthServer = {
    required: false,
    serializedName: 'ApplicationGatewayBackendHealthServer',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayBackendHealthServer',
        modelProperties: {
            address: {
                required: false,
                serializedName: 'address',
                type: {
                    name: 'String'
                }
            },
            ipConfiguration: {
                required: false,
                serializedName: 'ipConfiguration',
                type: {
                    name: 'Composite',
                    className: 'NetworkInterfaceIPConfiguration'
                }
            },
            health: {
                required: false,
                serializedName: 'health',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayBackendHealthHttpSettings = {
    required: false,
    serializedName: 'ApplicationGatewayBackendHealthHttpSettings',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayBackendHealthHttpSettings',
        modelProperties: {
            backendHttpSettings: {
                required: false,
                serializedName: 'backendHttpSettings',
                type: {
                    name: 'Composite',
                    className: 'ApplicationGatewayBackendHttpSettings'
                }
            },
            servers: {
                required: false,
                serializedName: 'servers',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayBackendHealthServerElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayBackendHealthServer'
                        }
                    }
                }
            }
        }
    }
};
var ApplicationGatewayBackendHealthPool = {
    required: false,
    serializedName: 'ApplicationGatewayBackendHealthPool',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayBackendHealthPool',
        modelProperties: {
            backendAddressPool: {
                required: false,
                serializedName: 'backendAddressPool',
                type: {
                    name: 'Composite',
                    className: 'ApplicationGatewayBackendAddressPool'
                }
            },
            backendHttpSettingsCollection: {
                required: false,
                serializedName: 'backendHttpSettingsCollection',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayBackendHealthHttpSettingsElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayBackendHealthHttpSettings'
                        }
                    }
                }
            }
        }
    }
};
var ApplicationGatewayBackendHealth = {
    required: false,
    serializedName: 'ApplicationGatewayBackendHealth',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayBackendHealth',
        modelProperties: {
            backendAddressPools: {
                required: false,
                serializedName: 'backendAddressPools',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayBackendHealthPoolElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayBackendHealthPool'
                        }
                    }
                }
            }
        }
    }
};
var ApplicationGatewaySku = {
    required: false,
    serializedName: 'ApplicationGatewaySku',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewaySku',
        modelProperties: {
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            tier: {
                required: false,
                serializedName: 'tier',
                type: {
                    name: 'String'
                }
            },
            capacity: {
                required: false,
                serializedName: 'capacity',
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var ApplicationGatewaySslPolicy = {
    required: false,
    serializedName: 'ApplicationGatewaySslPolicy',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewaySslPolicy',
        modelProperties: {
            disabledSslProtocols: {
                required: false,
                serializedName: 'disabledSslProtocols',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            policyType: {
                required: false,
                serializedName: 'policyType',
                type: {
                    name: 'String'
                }
            },
            policyName: {
                required: false,
                serializedName: 'policyName',
                type: {
                    name: 'String'
                }
            },
            cipherSuites: {
                required: false,
                serializedName: 'cipherSuites',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            minProtocolVersion: {
                required: false,
                serializedName: 'minProtocolVersion',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayIPConfiguration = {
    required: false,
    serializedName: 'ApplicationGatewayIPConfiguration',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayIPConfiguration',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            subnet: {
                required: false,
                serializedName: 'properties.subnet',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayAuthenticationCertificate = {
    required: false,
    serializedName: 'ApplicationGatewayAuthenticationCertificate',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayAuthenticationCertificate',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            data: {
                required: false,
                serializedName: 'properties.data',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewaySslCertificate = {
    required: false,
    serializedName: 'ApplicationGatewaySslCertificate',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewaySslCertificate',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            data: {
                required: false,
                serializedName: 'properties.data',
                type: {
                    name: 'String'
                }
            },
            password: {
                required: false,
                serializedName: 'properties.password',
                type: {
                    name: 'String'
                }
            },
            publicCertData: {
                required: false,
                serializedName: 'properties.publicCertData',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayFrontendIPConfiguration = {
    required: false,
    serializedName: 'ApplicationGatewayFrontendIPConfiguration',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayFrontendIPConfiguration',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            privateIPAddress: {
                required: false,
                serializedName: 'properties.privateIPAddress',
                type: {
                    name: 'String'
                }
            },
            privateIPAllocationMethod: {
                required: false,
                serializedName: 'properties.privateIPAllocationMethod',
                type: {
                    name: 'String'
                }
            },
            subnet: {
                required: false,
                serializedName: 'properties.subnet',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            publicIPAddress: {
                required: false,
                serializedName: 'properties.publicIPAddress',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayFrontendPort = {
    required: false,
    serializedName: 'ApplicationGatewayFrontendPort',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayFrontendPort',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            port: {
                required: false,
                serializedName: 'properties.port',
                type: {
                    name: 'Number'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayHttpListener = {
    required: false,
    serializedName: 'ApplicationGatewayHttpListener',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayHttpListener',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            frontendIPConfiguration: {
                required: false,
                serializedName: 'properties.frontendIPConfiguration',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            frontendPort: {
                required: false,
                serializedName: 'properties.frontendPort',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            protocol: {
                required: false,
                serializedName: 'properties.protocol',
                type: {
                    name: 'String'
                }
            },
            hostName: {
                required: false,
                serializedName: 'properties.hostName',
                type: {
                    name: 'String'
                }
            },
            sslCertificate: {
                required: false,
                serializedName: 'properties.sslCertificate',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            requireServerNameIndication: {
                required: false,
                serializedName: 'properties.requireServerNameIndication',
                type: {
                    name: 'Boolean'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayPathRule = {
    required: false,
    serializedName: 'ApplicationGatewayPathRule',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayPathRule',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            paths: {
                required: false,
                serializedName: 'properties.paths',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            backendAddressPool: {
                required: false,
                serializedName: 'properties.backendAddressPool',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            backendHttpSettings: {
                required: false,
                serializedName: 'properties.backendHttpSettings',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            redirectConfiguration: {
                required: false,
                serializedName: 'properties.redirectConfiguration',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayProbeHealthResponseMatch = {
    required: false,
    serializedName: 'ApplicationGatewayProbeHealthResponseMatch',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayProbeHealthResponseMatch',
        modelProperties: {
            body: {
                required: false,
                serializedName: 'body',
                type: {
                    name: 'String'
                }
            },
            statusCodes: {
                required: false,
                serializedName: 'statusCodes',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var ApplicationGatewayProbe = {
    required: false,
    serializedName: 'ApplicationGatewayProbe',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayProbe',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            protocol: {
                required: false,
                serializedName: 'properties.protocol',
                type: {
                    name: 'String'
                }
            },
            host: {
                required: false,
                serializedName: 'properties.host',
                type: {
                    name: 'String'
                }
            },
            path: {
                required: false,
                serializedName: 'properties.path',
                type: {
                    name: 'String'
                }
            },
            interval: {
                required: false,
                serializedName: 'properties.interval',
                type: {
                    name: 'Number'
                }
            },
            timeout: {
                required: false,
                serializedName: 'properties.timeout',
                type: {
                    name: 'Number'
                }
            },
            unhealthyThreshold: {
                required: false,
                serializedName: 'properties.unhealthyThreshold',
                type: {
                    name: 'Number'
                }
            },
            pickHostNameFromBackendHttpSettings: {
                required: false,
                serializedName: 'properties.pickHostNameFromBackendHttpSettings',
                type: {
                    name: 'Boolean'
                }
            },
            minServers: {
                required: false,
                serializedName: 'properties.minServers',
                type: {
                    name: 'Number'
                }
            },
            match: {
                required: false,
                serializedName: 'properties.match',
                type: {
                    name: 'Composite',
                    className: 'ApplicationGatewayProbeHealthResponseMatch'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayRequestRoutingRule = {
    required: false,
    serializedName: 'ApplicationGatewayRequestRoutingRule',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayRequestRoutingRule',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            ruleType: {
                required: false,
                serializedName: 'properties.ruleType',
                type: {
                    name: 'String'
                }
            },
            backendAddressPool: {
                required: false,
                serializedName: 'properties.backendAddressPool',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            backendHttpSettings: {
                required: false,
                serializedName: 'properties.backendHttpSettings',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            httpListener: {
                required: false,
                serializedName: 'properties.httpListener',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            urlPathMap: {
                required: false,
                serializedName: 'properties.urlPathMap',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            redirectConfiguration: {
                required: false,
                serializedName: 'properties.redirectConfiguration',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayRedirectConfiguration = {
    required: false,
    serializedName: 'ApplicationGatewayRedirectConfiguration',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayRedirectConfiguration',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            redirectType: {
                required: false,
                serializedName: 'properties.redirectType',
                type: {
                    name: 'String'
                }
            },
            targetListener: {
                required: false,
                serializedName: 'properties.targetListener',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            targetUrl: {
                required: false,
                serializedName: 'properties.targetUrl',
                type: {
                    name: 'String'
                }
            },
            includePath: {
                required: false,
                serializedName: 'properties.includePath',
                type: {
                    name: 'Boolean'
                }
            },
            includeQueryString: {
                required: false,
                serializedName: 'properties.includeQueryString',
                type: {
                    name: 'Boolean'
                }
            },
            requestRoutingRules: {
                required: false,
                serializedName: 'properties.requestRoutingRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SubResource'
                        }
                    }
                }
            },
            urlPathMaps: {
                required: false,
                serializedName: 'properties.urlPathMaps',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SubResource'
                        }
                    }
                }
            },
            pathRules: {
                required: false,
                serializedName: 'properties.pathRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SubResource'
                        }
                    }
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayUrlPathMap = {
    required: false,
    serializedName: 'ApplicationGatewayUrlPathMap',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayUrlPathMap',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            defaultBackendAddressPool: {
                required: false,
                serializedName: 'properties.defaultBackendAddressPool',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            defaultBackendHttpSettings: {
                required: false,
                serializedName: 'properties.defaultBackendHttpSettings',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            defaultRedirectConfiguration: {
                required: false,
                serializedName: 'properties.defaultRedirectConfiguration',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            pathRules: {
                required: false,
                serializedName: 'properties.pathRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayPathRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayPathRule'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayFirewallDisabledRuleGroup = {
    required: false,
    serializedName: 'ApplicationGatewayFirewallDisabledRuleGroup',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayFirewallDisabledRuleGroup',
        modelProperties: {
            ruleGroupName: {
                required: true,
                serializedName: 'ruleGroupName',
                type: {
                    name: 'String'
                }
            },
            rules: {
                required: false,
                serializedName: 'rules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'numberElementType',
                        type: {
                            name: 'Number'
                        }
                    }
                }
            }
        }
    }
};
var ApplicationGatewayWebApplicationFirewallConfiguration = {
    required: false,
    serializedName: 'ApplicationGatewayWebApplicationFirewallConfiguration',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayWebApplicationFirewallConfiguration',
        modelProperties: {
            enabled: {
                required: true,
                serializedName: 'enabled',
                type: {
                    name: 'Boolean'
                }
            },
            firewallMode: {
                required: true,
                serializedName: 'firewallMode',
                type: {
                    name: 'String'
                }
            },
            ruleSetType: {
                required: true,
                serializedName: 'ruleSetType',
                type: {
                    name: 'String'
                }
            },
            ruleSetVersion: {
                required: true,
                serializedName: 'ruleSetVersion',
                type: {
                    name: 'String'
                }
            },
            disabledRuleGroups: {
                required: false,
                serializedName: 'disabledRuleGroups',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayFirewallDisabledRuleGroupElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayFirewallDisabledRuleGroup'
                        }
                    }
                }
            }
        }
    }
};
var ApplicationGateway = {
    required: false,
    serializedName: 'ApplicationGateway',
    type: {
        name: 'Composite',
        className: 'ApplicationGateway',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            sku: {
                required: false,
                serializedName: 'properties.sku',
                type: {
                    name: 'Composite',
                    className: 'ApplicationGatewaySku'
                }
            },
            sslPolicy: {
                required: false,
                serializedName: 'properties.sslPolicy',
                type: {
                    name: 'Composite',
                    className: 'ApplicationGatewaySslPolicy'
                }
            },
            operationalState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.operationalState',
                type: {
                    name: 'String'
                }
            },
            gatewayIPConfigurations: {
                required: false,
                serializedName: 'properties.gatewayIPConfigurations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayIPConfigurationElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayIPConfiguration'
                        }
                    }
                }
            },
            authenticationCertificates: {
                required: false,
                serializedName: 'properties.authenticationCertificates',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayAuthenticationCertificateElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayAuthenticationCertificate'
                        }
                    }
                }
            },
            sslCertificates: {
                required: false,
                serializedName: 'properties.sslCertificates',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewaySslCertificateElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewaySslCertificate'
                        }
                    }
                }
            },
            frontendIPConfigurations: {
                required: false,
                serializedName: 'properties.frontendIPConfigurations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayFrontendIPConfigurationElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayFrontendIPConfiguration'
                        }
                    }
                }
            },
            frontendPorts: {
                required: false,
                serializedName: 'properties.frontendPorts',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayFrontendPortElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayFrontendPort'
                        }
                    }
                }
            },
            probes: {
                required: false,
                serializedName: 'properties.probes',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayProbeElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayProbe'
                        }
                    }
                }
            },
            backendAddressPools: {
                required: false,
                serializedName: 'properties.backendAddressPools',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayBackendAddressPoolElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayBackendAddressPool'
                        }
                    }
                }
            },
            backendHttpSettingsCollection: {
                required: false,
                serializedName: 'properties.backendHttpSettingsCollection',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayBackendHttpSettingsElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayBackendHttpSettings'
                        }
                    }
                }
            },
            httpListeners: {
                required: false,
                serializedName: 'properties.httpListeners',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayHttpListenerElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayHttpListener'
                        }
                    }
                }
            },
            urlPathMaps: {
                required: false,
                serializedName: 'properties.urlPathMaps',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayUrlPathMapElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayUrlPathMap'
                        }
                    }
                }
            },
            requestRoutingRules: {
                required: false,
                serializedName: 'properties.requestRoutingRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayRequestRoutingRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayRequestRoutingRule'
                        }
                    }
                }
            },
            redirectConfigurations: {
                required: false,
                serializedName: 'properties.redirectConfigurations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayRedirectConfigurationElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayRedirectConfiguration'
                        }
                    }
                }
            },
            webApplicationFirewallConfiguration: {
                required: false,
                serializedName: 'properties.webApplicationFirewallConfiguration',
                type: {
                    name: 'Composite',
                    className: 'ApplicationGatewayWebApplicationFirewallConfiguration'
                }
            },
            resourceGuid: {
                required: false,
                serializedName: 'properties.resourceGuid',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayFirewallRule = {
    required: false,
    serializedName: 'ApplicationGatewayFirewallRule',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayFirewallRule',
        modelProperties: {
            ruleId: {
                required: true,
                serializedName: 'ruleId',
                type: {
                    name: 'Number'
                }
            },
            description: {
                required: false,
                serializedName: 'description',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayFirewallRuleGroup = {
    required: false,
    serializedName: 'ApplicationGatewayFirewallRuleGroup',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayFirewallRuleGroup',
        modelProperties: {
            ruleGroupName: {
                required: true,
                serializedName: 'ruleGroupName',
                type: {
                    name: 'String'
                }
            },
            description: {
                required: false,
                serializedName: 'description',
                type: {
                    name: 'String'
                }
            },
            rules: {
                required: true,
                serializedName: 'rules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayFirewallRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayFirewallRule'
                        }
                    }
                }
            }
        }
    }
};
var ApplicationGatewayFirewallRuleSet = {
    required: false,
    serializedName: 'ApplicationGatewayFirewallRuleSet',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayFirewallRuleSet',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            ruleSetType: {
                required: true,
                serializedName: 'properties.ruleSetType',
                type: {
                    name: 'String'
                }
            },
            ruleSetVersion: {
                required: true,
                serializedName: 'properties.ruleSetVersion',
                type: {
                    name: 'String'
                }
            },
            ruleGroups: {
                required: true,
                serializedName: 'properties.ruleGroups',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayFirewallRuleGroupElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayFirewallRuleGroup'
                        }
                    }
                }
            }
        }
    }
};
var ApplicationGatewayAvailableWafRuleSetsResult = {
    required: false,
    serializedName: 'ApplicationGatewayAvailableWafRuleSetsResult',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayAvailableWafRuleSetsResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: 'value',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayFirewallRuleSetElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewayFirewallRuleSet'
                        }
                    }
                }
            }
        }
    }
};
var ApplicationGatewayAvailableSslOptions = {
    required: false,
    serializedName: 'ApplicationGatewayAvailableSslOptions',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayAvailableSslOptions',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            predefinedPolicies: {
                required: false,
                serializedName: 'properties.predefinedPolicies',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SubResource'
                        }
                    }
                }
            },
            defaultPolicy: {
                required: false,
                serializedName: 'properties.defaultPolicy',
                type: {
                    name: 'String'
                }
            },
            availableCipherSuites: {
                required: false,
                serializedName: 'properties.availableCipherSuites',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            availableProtocols: {
                required: false,
                serializedName: 'properties.availableProtocols',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var ApplicationGatewaySslPredefinedPolicy = {
    required: false,
    serializedName: 'ApplicationGatewaySslPredefinedPolicy',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewaySslPredefinedPolicy',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            cipherSuites: {
                required: false,
                serializedName: 'properties.cipherSuites',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            minProtocolVersion: {
                required: false,
                serializedName: 'properties.minProtocolVersion',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var DnsNameAvailabilityResult = {
    required: false,
    serializedName: 'DnsNameAvailabilityResult',
    type: {
        name: 'Composite',
        className: 'DnsNameAvailabilityResult',
        modelProperties: {
            available: {
                required: false,
                serializedName: 'available',
                type: {
                    name: 'Boolean'
                }
            }
        }
    }
};
var EndpointServiceResult = {
    required: false,
    serializedName: 'EndpointServiceResult',
    type: {
        name: 'Composite',
        className: 'EndpointServiceResult',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteCircuitAuthorization = {
    required: false,
    serializedName: 'ExpressRouteCircuitAuthorization',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitAuthorization',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            authorizationKey: {
                required: false,
                serializedName: 'properties.authorizationKey',
                type: {
                    name: 'String'
                }
            },
            authorizationUseStatus: {
                required: false,
                serializedName: 'properties.authorizationUseStatus',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                readOnly: true,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteCircuitPeeringConfig = {
    required: false,
    serializedName: 'ExpressRouteCircuitPeeringConfig',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitPeeringConfig',
        modelProperties: {
            advertisedPublicPrefixes: {
                required: false,
                serializedName: 'advertisedPublicPrefixes',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            advertisedCommunities: {
                required: false,
                serializedName: 'advertisedCommunities',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            advertisedPublicPrefixesState: {
                required: false,
                serializedName: 'advertisedPublicPrefixesState',
                type: {
                    name: 'String'
                }
            },
            legacyMode: {
                required: false,
                serializedName: 'legacyMode',
                type: {
                    name: 'Number'
                }
            },
            customerASN: {
                required: false,
                serializedName: 'customerASN',
                type: {
                    name: 'Number'
                }
            },
            routingRegistryName: {
                required: false,
                serializedName: 'routingRegistryName',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var RouteFilterRule = {
    required: false,
    serializedName: 'RouteFilterRule',
    type: {
        name: 'Composite',
        className: 'RouteFilterRule',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            access: {
                required: true,
                serializedName: 'properties.access',
                type: {
                    name: 'String'
                }
            },
            routeFilterRuleType: {
                required: true,
                isConstant: true,
                serializedName: 'properties.routeFilterRuleType',
                defaultValue: 'Community',
                type: {
                    name: 'String'
                }
            },
            communities: {
                required: true,
                serializedName: 'properties.communities',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                readOnly: true,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var ExpressRouteCircuitStats = {
    required: false,
    serializedName: 'ExpressRouteCircuitStats',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitStats',
        modelProperties: {
            primarybytesIn: {
                required: false,
                serializedName: 'primarybytesIn',
                type: {
                    name: 'Number'
                }
            },
            primarybytesOut: {
                required: false,
                serializedName: 'primarybytesOut',
                type: {
                    name: 'Number'
                }
            },
            secondarybytesIn: {
                required: false,
                serializedName: 'secondarybytesIn',
                type: {
                    name: 'Number'
                }
            },
            secondarybytesOut: {
                required: false,
                serializedName: 'secondarybytesOut',
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var ExpressRouteCircuitPeering = {
    required: false,
    serializedName: 'ExpressRouteCircuitPeering',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitPeering',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            peeringType: {
                required: false,
                serializedName: 'properties.peeringType',
                type: {
                    name: 'String'
                }
            },
            state: {
                required: false,
                serializedName: 'properties.state',
                type: {
                    name: 'String'
                }
            },
            azureASN: {
                required: false,
                serializedName: 'properties.azureASN',
                type: {
                    name: 'Number'
                }
            },
            peerASN: {
                required: false,
                serializedName: 'properties.peerASN',
                type: {
                    name: 'Number'
                }
            },
            primaryPeerAddressPrefix: {
                required: false,
                serializedName: 'properties.primaryPeerAddressPrefix',
                type: {
                    name: 'String'
                }
            },
            secondaryPeerAddressPrefix: {
                required: false,
                serializedName: 'properties.secondaryPeerAddressPrefix',
                type: {
                    name: 'String'
                }
            },
            primaryAzurePort: {
                required: false,
                serializedName: 'properties.primaryAzurePort',
                type: {
                    name: 'String'
                }
            },
            secondaryAzurePort: {
                required: false,
                serializedName: 'properties.secondaryAzurePort',
                type: {
                    name: 'String'
                }
            },
            sharedKey: {
                required: false,
                serializedName: 'properties.sharedKey',
                type: {
                    name: 'String'
                }
            },
            vlanId: {
                required: false,
                serializedName: 'properties.vlanId',
                type: {
                    name: 'Number'
                }
            },
            microsoftPeeringConfig: {
                required: false,
                serializedName: 'properties.microsoftPeeringConfig',
                type: {
                    name: 'Composite',
                    className: 'ExpressRouteCircuitPeeringConfig'
                }
            },
            stats: {
                required: false,
                serializedName: 'properties.stats',
                type: {
                    name: 'Composite',
                    className: 'ExpressRouteCircuitStats'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            gatewayManagerEtag: {
                required: false,
                serializedName: 'properties.gatewayManagerEtag',
                type: {
                    name: 'String'
                }
            },
            lastModifiedBy: {
                required: false,
                serializedName: 'properties.lastModifiedBy',
                type: {
                    name: 'String'
                }
            },
            routeFilter: {
                required: false,
                serializedName: 'properties.routeFilter',
                type: {
                    name: 'Composite',
                    className: 'RouteFilter'
                }
            },
            ipv6PeeringConfig: {
                required: false,
                serializedName: 'properties.ipv6PeeringConfig',
                type: {
                    name: 'Composite',
                    className: 'Ipv6ExpressRouteCircuitPeeringConfig'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                readOnly: true,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var RouteFilter = {
    required: false,
    serializedName: 'RouteFilter',
    type: {
        name: 'Composite',
        className: 'RouteFilter',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            rules: {
                required: false,
                serializedName: 'properties.rules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'RouteFilterRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'RouteFilterRule'
                        }
                    }
                }
            },
            peerings: {
                required: false,
                serializedName: 'properties.peerings',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ExpressRouteCircuitPeeringElementType',
                        type: {
                            name: 'Composite',
                            className: 'ExpressRouteCircuitPeering'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                readOnly: true,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var Ipv6ExpressRouteCircuitPeeringConfig = {
    required: false,
    serializedName: 'Ipv6ExpressRouteCircuitPeeringConfig',
    type: {
        name: 'Composite',
        className: 'Ipv6ExpressRouteCircuitPeeringConfig',
        modelProperties: {
            primaryPeerAddressPrefix: {
                required: false,
                serializedName: 'primaryPeerAddressPrefix',
                type: {
                    name: 'String'
                }
            },
            secondaryPeerAddressPrefix: {
                required: false,
                serializedName: 'secondaryPeerAddressPrefix',
                type: {
                    name: 'String'
                }
            },
            microsoftPeeringConfig: {
                required: false,
                serializedName: 'microsoftPeeringConfig',
                type: {
                    name: 'Composite',
                    className: 'ExpressRouteCircuitPeeringConfig'
                }
            },
            routeFilter: {
                required: false,
                serializedName: 'routeFilter',
                type: {
                    name: 'Composite',
                    className: 'RouteFilter'
                }
            },
            state: {
                required: false,
                serializedName: 'state',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteCircuitSku = {
    required: false,
    serializedName: 'ExpressRouteCircuitSku',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitSku',
        modelProperties: {
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            tier: {
                required: false,
                serializedName: 'tier',
                type: {
                    name: 'String'
                }
            },
            family: {
                required: false,
                serializedName: 'family',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteCircuitServiceProviderProperties = {
    required: false,
    serializedName: 'ExpressRouteCircuitServiceProviderProperties',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitServiceProviderProperties',
        modelProperties: {
            serviceProviderName: {
                required: false,
                serializedName: 'serviceProviderName',
                type: {
                    name: 'String'
                }
            },
            peeringLocation: {
                required: false,
                serializedName: 'peeringLocation',
                type: {
                    name: 'String'
                }
            },
            bandwidthInMbps: {
                required: false,
                serializedName: 'bandwidthInMbps',
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var ExpressRouteCircuit = {
    required: false,
    serializedName: 'ExpressRouteCircuit',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuit',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            sku: {
                required: false,
                serializedName: 'sku',
                type: {
                    name: 'Composite',
                    className: 'ExpressRouteCircuitSku'
                }
            },
            allowClassicOperations: {
                required: false,
                serializedName: 'properties.allowClassicOperations',
                type: {
                    name: 'Boolean'
                }
            },
            circuitProvisioningState: {
                required: false,
                serializedName: 'properties.circuitProvisioningState',
                type: {
                    name: 'String'
                }
            },
            serviceProviderProvisioningState: {
                required: false,
                serializedName: 'properties.serviceProviderProvisioningState',
                type: {
                    name: 'String'
                }
            },
            authorizations: {
                required: false,
                serializedName: 'properties.authorizations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ExpressRouteCircuitAuthorizationElementType',
                        type: {
                            name: 'Composite',
                            className: 'ExpressRouteCircuitAuthorization'
                        }
                    }
                }
            },
            peerings: {
                required: false,
                serializedName: 'properties.peerings',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ExpressRouteCircuitPeeringElementType',
                        type: {
                            name: 'Composite',
                            className: 'ExpressRouteCircuitPeering'
                        }
                    }
                }
            },
            serviceKey: {
                required: false,
                serializedName: 'properties.serviceKey',
                type: {
                    name: 'String'
                }
            },
            serviceProviderNotes: {
                required: false,
                serializedName: 'properties.serviceProviderNotes',
                type: {
                    name: 'String'
                }
            },
            serviceProviderProperties: {
                required: false,
                serializedName: 'properties.serviceProviderProperties',
                type: {
                    name: 'Composite',
                    className: 'ExpressRouteCircuitServiceProviderProperties'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            gatewayManagerEtag: {
                required: false,
                serializedName: 'properties.gatewayManagerEtag',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                readOnly: true,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteCircuitArpTable = {
    required: false,
    serializedName: 'ExpressRouteCircuitArpTable',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitArpTable',
        modelProperties: {
            age: {
                required: false,
                serializedName: 'age',
                type: {
                    name: 'Number'
                }
            },
            interfaceProperty: {
                required: false,
                serializedName: 'interface',
                type: {
                    name: 'String'
                }
            },
            ipAddress: {
                required: false,
                serializedName: 'ipAddress',
                type: {
                    name: 'String'
                }
            },
            macAddress: {
                required: false,
                serializedName: 'macAddress',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteCircuitsArpTableListResult = {
    required: false,
    serializedName: 'ExpressRouteCircuitsArpTableListResult',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitsArpTableListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: 'value',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ExpressRouteCircuitArpTableElementType',
                        type: {
                            name: 'Composite',
                            className: 'ExpressRouteCircuitArpTable'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteCircuitRoutesTable = {
    required: false,
    serializedName: 'ExpressRouteCircuitRoutesTable',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitRoutesTable',
        modelProperties: {
            network: {
                required: false,
                serializedName: 'network',
                type: {
                    name: 'String'
                }
            },
            nextHop: {
                required: false,
                serializedName: 'nextHop',
                type: {
                    name: 'String'
                }
            },
            locPrf: {
                required: false,
                serializedName: 'locPrf',
                type: {
                    name: 'String'
                }
            },
            weight: {
                required: false,
                serializedName: 'weight',
                type: {
                    name: 'Number'
                }
            },
            path: {
                required: false,
                serializedName: 'path',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteCircuitsRoutesTableListResult = {
    required: false,
    serializedName: 'ExpressRouteCircuitsRoutesTableListResult',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitsRoutesTableListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: 'value',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ExpressRouteCircuitRoutesTableElementType',
                        type: {
                            name: 'Composite',
                            className: 'ExpressRouteCircuitRoutesTable'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteCircuitRoutesTableSummary = {
    required: false,
    serializedName: 'ExpressRouteCircuitRoutesTableSummary',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitRoutesTableSummary',
        modelProperties: {
            neighbor: {
                required: false,
                serializedName: 'neighbor',
                type: {
                    name: 'String'
                }
            },
            v: {
                required: false,
                serializedName: 'v',
                type: {
                    name: 'Number'
                }
            },
            as: {
                required: false,
                serializedName: 'as',
                type: {
                    name: 'Number'
                }
            },
            upDown: {
                required: false,
                serializedName: 'upDown',
                type: {
                    name: 'String'
                }
            },
            statePfxRcd: {
                required: false,
                serializedName: 'statePfxRcd',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteCircuitsRoutesTableSummaryListResult = {
    required: false,
    serializedName: 'ExpressRouteCircuitsRoutesTableSummaryListResult',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitsRoutesTableSummaryListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: 'value',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ExpressRouteCircuitRoutesTableSummaryElementType',
                        type: {
                            name: 'Composite',
                            className: 'ExpressRouteCircuitRoutesTableSummary'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteServiceProviderBandwidthsOffered = {
    required: false,
    serializedName: 'ExpressRouteServiceProviderBandwidthsOffered',
    type: {
        name: 'Composite',
        className: 'ExpressRouteServiceProviderBandwidthsOffered',
        modelProperties: {
            offerName: {
                required: false,
                serializedName: 'offerName',
                type: {
                    name: 'String'
                }
            },
            valueInMbps: {
                required: false,
                serializedName: 'valueInMbps',
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var ExpressRouteServiceProvider = {
    required: false,
    serializedName: 'ExpressRouteServiceProvider',
    type: {
        name: 'Composite',
        className: 'ExpressRouteServiceProvider',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            peeringLocations: {
                required: false,
                serializedName: 'properties.peeringLocations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            bandwidthsOffered: {
                required: false,
                serializedName: 'properties.bandwidthsOffered',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ExpressRouteServiceProviderBandwidthsOfferedElementType',
                        type: {
                            name: 'Composite',
                            className: 'ExpressRouteServiceProviderBandwidthsOffered'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var LoadBalancerSku = {
    required: false,
    serializedName: 'LoadBalancerSku',
    type: {
        name: 'Composite',
        className: 'LoadBalancerSku',
        modelProperties: {
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var FrontendIPConfiguration = {
    required: false,
    serializedName: 'FrontendIPConfiguration',
    type: {
        name: 'Composite',
        className: 'FrontendIPConfiguration',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            inboundNatRules: {
                required: false,
                readOnly: true,
                serializedName: 'properties.inboundNatRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SubResource'
                        }
                    }
                }
            },
            inboundNatPools: {
                required: false,
                readOnly: true,
                serializedName: 'properties.inboundNatPools',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SubResource'
                        }
                    }
                }
            },
            outboundNatRules: {
                required: false,
                readOnly: true,
                serializedName: 'properties.outboundNatRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SubResource'
                        }
                    }
                }
            },
            loadBalancingRules: {
                required: false,
                readOnly: true,
                serializedName: 'properties.loadBalancingRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SubResource'
                        }
                    }
                }
            },
            privateIPAddress: {
                required: false,
                serializedName: 'properties.privateIPAddress',
                type: {
                    name: 'String'
                }
            },
            privateIPAllocationMethod: {
                required: false,
                serializedName: 'properties.privateIPAllocationMethod',
                type: {
                    name: 'String'
                }
            },
            subnet: {
                required: false,
                serializedName: 'properties.subnet',
                type: {
                    name: 'Composite',
                    className: 'Subnet'
                }
            },
            publicIPAddress: {
                required: false,
                serializedName: 'properties.publicIPAddress',
                type: {
                    name: 'Composite',
                    className: 'PublicIPAddress'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            zones: {
                required: false,
                serializedName: 'zones',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var LoadBalancingRule = {
    required: false,
    serializedName: 'LoadBalancingRule',
    type: {
        name: 'Composite',
        className: 'LoadBalancingRule',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            frontendIPConfiguration: {
                required: false,
                serializedName: 'properties.frontendIPConfiguration',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            backendAddressPool: {
                required: false,
                serializedName: 'properties.backendAddressPool',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            probe: {
                required: false,
                serializedName: 'properties.probe',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            protocol: {
                required: true,
                serializedName: 'properties.protocol',
                type: {
                    name: 'String'
                }
            },
            loadDistribution: {
                required: false,
                serializedName: 'properties.loadDistribution',
                type: {
                    name: 'String'
                }
            },
            frontendPort: {
                required: true,
                serializedName: 'properties.frontendPort',
                type: {
                    name: 'Number'
                }
            },
            backendPort: {
                required: false,
                serializedName: 'properties.backendPort',
                type: {
                    name: 'Number'
                }
            },
            idleTimeoutInMinutes: {
                required: false,
                serializedName: 'properties.idleTimeoutInMinutes',
                type: {
                    name: 'Number'
                }
            },
            enableFloatingIP: {
                required: false,
                serializedName: 'properties.enableFloatingIP',
                type: {
                    name: 'Boolean'
                }
            },
            disableOutboundSnat: {
                required: false,
                serializedName: 'properties.disableOutboundSnat',
                type: {
                    name: 'Boolean'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var Probe = {
    required: false,
    serializedName: 'Probe',
    type: {
        name: 'Composite',
        className: 'Probe',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            loadBalancingRules: {
                required: false,
                readOnly: true,
                serializedName: 'properties.loadBalancingRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SubResource'
                        }
                    }
                }
            },
            protocol: {
                required: true,
                serializedName: 'properties.protocol',
                type: {
                    name: 'String'
                }
            },
            port: {
                required: true,
                serializedName: 'properties.port',
                type: {
                    name: 'Number'
                }
            },
            intervalInSeconds: {
                required: false,
                serializedName: 'properties.intervalInSeconds',
                type: {
                    name: 'Number'
                }
            },
            numberOfProbes: {
                required: false,
                serializedName: 'properties.numberOfProbes',
                type: {
                    name: 'Number'
                }
            },
            requestPath: {
                required: false,
                serializedName: 'properties.requestPath',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var InboundNatPool = {
    required: false,
    serializedName: 'InboundNatPool',
    type: {
        name: 'Composite',
        className: 'InboundNatPool',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            frontendIPConfiguration: {
                required: false,
                serializedName: 'properties.frontendIPConfiguration',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            protocol: {
                required: true,
                serializedName: 'properties.protocol',
                type: {
                    name: 'String'
                }
            },
            frontendPortRangeStart: {
                required: true,
                serializedName: 'properties.frontendPortRangeStart',
                type: {
                    name: 'Number'
                }
            },
            frontendPortRangeEnd: {
                required: true,
                serializedName: 'properties.frontendPortRangeEnd',
                type: {
                    name: 'Number'
                }
            },
            backendPort: {
                required: true,
                serializedName: 'properties.backendPort',
                type: {
                    name: 'Number'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var OutboundNatRule = {
    required: false,
    serializedName: 'OutboundNatRule',
    type: {
        name: 'Composite',
        className: 'OutboundNatRule',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            allocatedOutboundPorts: {
                required: false,
                serializedName: 'properties.allocatedOutboundPorts',
                type: {
                    name: 'Number'
                }
            },
            frontendIPConfigurations: {
                required: false,
                serializedName: 'properties.frontendIPConfigurations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SubResource'
                        }
                    }
                }
            },
            backendAddressPool: {
                required: true,
                serializedName: 'properties.backendAddressPool',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var LoadBalancer = {
    required: false,
    serializedName: 'LoadBalancer',
    type: {
        name: 'Composite',
        className: 'LoadBalancer',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            sku: {
                required: false,
                serializedName: 'sku',
                type: {
                    name: 'Composite',
                    className: 'LoadBalancerSku'
                }
            },
            frontendIPConfigurations: {
                required: false,
                serializedName: 'properties.frontendIPConfigurations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'FrontendIPConfigurationElementType',
                        type: {
                            name: 'Composite',
                            className: 'FrontendIPConfiguration'
                        }
                    }
                }
            },
            backendAddressPools: {
                required: false,
                serializedName: 'properties.backendAddressPools',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'BackendAddressPoolElementType',
                        type: {
                            name: 'Composite',
                            className: 'BackendAddressPool'
                        }
                    }
                }
            },
            loadBalancingRules: {
                required: false,
                serializedName: 'properties.loadBalancingRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'LoadBalancingRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'LoadBalancingRule'
                        }
                    }
                }
            },
            probes: {
                required: false,
                serializedName: 'properties.probes',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ProbeElementType',
                        type: {
                            name: 'Composite',
                            className: 'Probe'
                        }
                    }
                }
            },
            inboundNatRules: {
                required: false,
                serializedName: 'properties.inboundNatRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'InboundNatRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'InboundNatRule'
                        }
                    }
                }
            },
            inboundNatPools: {
                required: false,
                serializedName: 'properties.inboundNatPools',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'InboundNatPoolElementType',
                        type: {
                            name: 'Composite',
                            className: 'InboundNatPool'
                        }
                    }
                }
            },
            outboundNatRules: {
                required: false,
                serializedName: 'properties.outboundNatRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'OutboundNatRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'OutboundNatRule'
                        }
                    }
                }
            },
            resourceGuid: {
                required: false,
                serializedName: 'properties.resourceGuid',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ErrorDetails = {
    required: false,
    serializedName: 'ErrorDetails',
    type: {
        name: 'Composite',
        className: 'ErrorDetails',
        modelProperties: {
            code: {
                required: false,
                serializedName: 'code',
                type: {
                    name: 'String'
                }
            },
            target: {
                required: false,
                serializedName: 'target',
                type: {
                    name: 'String'
                }
            },
            message: {
                required: false,
                serializedName: 'message',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ErrorModel = {
    required: false,
    serializedName: 'Error',
    type: {
        name: 'Composite',
        className: 'ErrorModel',
        modelProperties: {
            code: {
                required: false,
                serializedName: 'code',
                type: {
                    name: 'String'
                }
            },
            message: {
                required: false,
                serializedName: 'message',
                type: {
                    name: 'String'
                }
            },
            target: {
                required: false,
                serializedName: 'target',
                type: {
                    name: 'String'
                }
            },
            details: {
                required: false,
                serializedName: 'details',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ErrorDetailsElementType',
                        type: {
                            name: 'Composite',
                            className: 'ErrorDetails'
                        }
                    }
                }
            },
            innerError: {
                required: false,
                serializedName: 'innerError',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var AzureAsyncOperationResult = {
    required: false,
    serializedName: 'AzureAsyncOperationResult',
    type: {
        name: 'Composite',
        className: 'AzureAsyncOperationResult',
        modelProperties: {
            status: {
                required: false,
                serializedName: 'status',
                type: {
                    name: 'String'
                }
            },
            error: {
                required: false,
                serializedName: 'error',
                type: {
                    name: 'Composite',
                    className: 'ErrorModel'
                }
            }
        }
    }
};
var EffectiveNetworkSecurityGroupAssociation = {
    required: false,
    serializedName: 'EffectiveNetworkSecurityGroupAssociation',
    type: {
        name: 'Composite',
        className: 'EffectiveNetworkSecurityGroupAssociation',
        modelProperties: {
            subnet: {
                required: false,
                serializedName: 'subnet',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            networkInterface: {
                required: false,
                serializedName: 'networkInterface',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            }
        }
    }
};
var EffectiveNetworkSecurityRule = {
    required: false,
    serializedName: 'EffectiveNetworkSecurityRule',
    type: {
        name: 'Composite',
        className: 'EffectiveNetworkSecurityRule',
        modelProperties: {
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            protocol: {
                required: false,
                serializedName: 'protocol',
                type: {
                    name: 'String'
                }
            },
            sourcePortRange: {
                required: false,
                serializedName: 'sourcePortRange',
                type: {
                    name: 'String'
                }
            },
            destinationPortRange: {
                required: false,
                serializedName: 'destinationPortRange',
                type: {
                    name: 'String'
                }
            },
            sourcePortRanges: {
                required: false,
                serializedName: 'sourcePortRanges',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            destinationPortRanges: {
                required: false,
                serializedName: 'destinationPortRanges',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            sourceAddressPrefix: {
                required: false,
                serializedName: 'sourceAddressPrefix',
                type: {
                    name: 'String'
                }
            },
            destinationAddressPrefix: {
                required: false,
                serializedName: 'destinationAddressPrefix',
                type: {
                    name: 'String'
                }
            },
            sourceAddressPrefixes: {
                required: false,
                serializedName: 'sourceAddressPrefixes',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            destinationAddressPrefixes: {
                required: false,
                serializedName: 'destinationAddressPrefixes',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            expandedSourceAddressPrefix: {
                required: false,
                serializedName: 'expandedSourceAddressPrefix',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            expandedDestinationAddressPrefix: {
                required: false,
                serializedName: 'expandedDestinationAddressPrefix',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            access: {
                required: false,
                serializedName: 'access',
                type: {
                    name: 'String'
                }
            },
            priority: {
                required: false,
                serializedName: 'priority',
                type: {
                    name: 'Number'
                }
            },
            direction: {
                required: false,
                serializedName: 'direction',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var EffectiveNetworkSecurityGroup = {
    required: false,
    serializedName: 'EffectiveNetworkSecurityGroup',
    type: {
        name: 'Composite',
        className: 'EffectiveNetworkSecurityGroup',
        modelProperties: {
            networkSecurityGroup: {
                required: false,
                serializedName: 'networkSecurityGroup',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            association: {
                required: false,
                serializedName: 'association',
                type: {
                    name: 'Composite',
                    className: 'EffectiveNetworkSecurityGroupAssociation'
                }
            },
            effectiveSecurityRules: {
                required: false,
                serializedName: 'effectiveSecurityRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'EffectiveNetworkSecurityRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'EffectiveNetworkSecurityRule'
                        }
                    }
                }
            },
            tagMap: {
                required: false,
                serializedName: 'tagMap',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'ArrayElementType',
                        type: {
                            name: 'Sequence',
                            element: {
                                required: false,
                                serializedName: 'stringElementType',
                                type: {
                                    name: 'String'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
var EffectiveNetworkSecurityGroupListResult = {
    required: false,
    serializedName: 'EffectiveNetworkSecurityGroupListResult',
    type: {
        name: 'Composite',
        className: 'EffectiveNetworkSecurityGroupListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: 'value',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'EffectiveNetworkSecurityGroupElementType',
                        type: {
                            name: 'Composite',
                            className: 'EffectiveNetworkSecurityGroup'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var EffectiveRoute = {
    required: false,
    serializedName: 'EffectiveRoute',
    type: {
        name: 'Composite',
        className: 'EffectiveRoute',
        modelProperties: {
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            source: {
                required: false,
                serializedName: 'source',
                type: {
                    name: 'String'
                }
            },
            state: {
                required: false,
                serializedName: 'state',
                type: {
                    name: 'String'
                }
            },
            addressPrefix: {
                required: false,
                serializedName: 'addressPrefix',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            nextHopIpAddress: {
                required: false,
                serializedName: 'nextHopIpAddress',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            nextHopType: {
                required: false,
                serializedName: 'nextHopType',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var EffectiveRouteListResult = {
    required: false,
    serializedName: 'EffectiveRouteListResult',
    type: {
        name: 'Composite',
        className: 'EffectiveRouteListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: 'value',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'EffectiveRouteElementType',
                        type: {
                            name: 'Composite',
                            className: 'EffectiveRoute'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkWatcher = {
    required: false,
    serializedName: 'NetworkWatcher',
    type: {
        name: 'Composite',
        className: 'NetworkWatcher',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var TopologyParameters = {
    required: false,
    serializedName: 'TopologyParameters',
    type: {
        name: 'Composite',
        className: 'TopologyParameters',
        modelProperties: {
            targetResourceGroupName: {
                required: true,
                serializedName: 'targetResourceGroupName',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var TopologyAssociation = {
    required: false,
    serializedName: 'TopologyAssociation',
    type: {
        name: 'Composite',
        className: 'TopologyAssociation',
        modelProperties: {
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            resourceId: {
                required: false,
                serializedName: 'resourceId',
                type: {
                    name: 'String'
                }
            },
            associationType: {
                required: false,
                serializedName: 'associationType',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var TopologyResource = {
    required: false,
    serializedName: 'TopologyResource',
    type: {
        name: 'Composite',
        className: 'TopologyResource',
        modelProperties: {
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            associations: {
                required: false,
                serializedName: 'associations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'TopologyAssociationElementType',
                        type: {
                            name: 'Composite',
                            className: 'TopologyAssociation'
                        }
                    }
                }
            }
        }
    }
};
var Topology = {
    required: false,
    serializedName: 'Topology',
    type: {
        name: 'Composite',
        className: 'Topology',
        modelProperties: {
            id: {
                required: false,
                readOnly: true,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            createdDateTime: {
                required: false,
                readOnly: true,
                serializedName: 'createdDateTime',
                type: {
                    name: 'DateTime'
                }
            },
            lastModified: {
                required: false,
                readOnly: true,
                serializedName: 'lastModified',
                type: {
                    name: 'DateTime'
                }
            },
            resources: {
                required: false,
                serializedName: 'resources',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'TopologyResourceElementType',
                        type: {
                            name: 'Composite',
                            className: 'TopologyResource'
                        }
                    }
                }
            }
        }
    }
};
var VerificationIPFlowParameters = {
    required: false,
    serializedName: 'VerificationIPFlowParameters',
    type: {
        name: 'Composite',
        className: 'VerificationIPFlowParameters',
        modelProperties: {
            targetResourceId: {
                required: true,
                serializedName: 'targetResourceId',
                type: {
                    name: 'String'
                }
            },
            direction: {
                required: true,
                serializedName: 'direction',
                type: {
                    name: 'String'
                }
            },
            protocol: {
                required: true,
                serializedName: 'protocol',
                type: {
                    name: 'String'
                }
            },
            localPort: {
                required: true,
                serializedName: 'localPort',
                type: {
                    name: 'String'
                }
            },
            remotePort: {
                required: true,
                serializedName: 'remotePort',
                type: {
                    name: 'String'
                }
            },
            localIPAddress: {
                required: true,
                serializedName: 'localIPAddress',
                type: {
                    name: 'String'
                }
            },
            remoteIPAddress: {
                required: true,
                serializedName: 'remoteIPAddress',
                type: {
                    name: 'String'
                }
            },
            targetNicResourceId: {
                required: false,
                serializedName: 'targetNicResourceId',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VerificationIPFlowResult = {
    required: false,
    serializedName: 'VerificationIPFlowResult',
    type: {
        name: 'Composite',
        className: 'VerificationIPFlowResult',
        modelProperties: {
            access: {
                required: false,
                serializedName: 'access',
                type: {
                    name: 'String'
                }
            },
            ruleName: {
                required: false,
                serializedName: 'ruleName',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NextHopParameters = {
    required: false,
    serializedName: 'NextHopParameters',
    type: {
        name: 'Composite',
        className: 'NextHopParameters',
        modelProperties: {
            targetResourceId: {
                required: true,
                serializedName: 'targetResourceId',
                type: {
                    name: 'String'
                }
            },
            sourceIPAddress: {
                required: true,
                serializedName: 'sourceIPAddress',
                type: {
                    name: 'String'
                }
            },
            destinationIPAddress: {
                required: true,
                serializedName: 'destinationIPAddress',
                type: {
                    name: 'String'
                }
            },
            targetNicResourceId: {
                required: false,
                serializedName: 'targetNicResourceId',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NextHopResult = {
    required: false,
    serializedName: 'NextHopResult',
    type: {
        name: 'Composite',
        className: 'NextHopResult',
        modelProperties: {
            nextHopType: {
                required: false,
                serializedName: 'nextHopType',
                type: {
                    name: 'String'
                }
            },
            nextHopIpAddress: {
                required: false,
                serializedName: 'nextHopIpAddress',
                type: {
                    name: 'String'
                }
            },
            routeTableId: {
                required: false,
                serializedName: 'routeTableId',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var SecurityGroupViewParameters = {
    required: false,
    serializedName: 'SecurityGroupViewParameters',
    type: {
        name: 'Composite',
        className: 'SecurityGroupViewParameters',
        modelProperties: {
            targetResourceId: {
                required: true,
                serializedName: 'targetResourceId',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkInterfaceAssociation = {
    required: false,
    serializedName: 'NetworkInterfaceAssociation',
    type: {
        name: 'Composite',
        className: 'NetworkInterfaceAssociation',
        modelProperties: {
            id: {
                required: false,
                readOnly: true,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            securityRules: {
                required: false,
                serializedName: 'securityRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SecurityRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'SecurityRule'
                        }
                    }
                }
            }
        }
    }
};
var SubnetAssociation = {
    required: false,
    serializedName: 'SubnetAssociation',
    type: {
        name: 'Composite',
        className: 'SubnetAssociation',
        modelProperties: {
            id: {
                required: false,
                readOnly: true,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            securityRules: {
                required: false,
                serializedName: 'securityRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SecurityRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'SecurityRule'
                        }
                    }
                }
            }
        }
    }
};
var SecurityRuleAssociations = {
    required: false,
    serializedName: 'SecurityRuleAssociations',
    type: {
        name: 'Composite',
        className: 'SecurityRuleAssociations',
        modelProperties: {
            networkInterfaceAssociation: {
                required: false,
                serializedName: 'networkInterfaceAssociation',
                type: {
                    name: 'Composite',
                    className: 'NetworkInterfaceAssociation'
                }
            },
            subnetAssociation: {
                required: false,
                serializedName: 'subnetAssociation',
                type: {
                    name: 'Composite',
                    className: 'SubnetAssociation'
                }
            },
            defaultSecurityRules: {
                required: false,
                serializedName: 'defaultSecurityRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SecurityRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'SecurityRule'
                        }
                    }
                }
            },
            effectiveSecurityRules: {
                required: false,
                serializedName: 'effectiveSecurityRules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'EffectiveNetworkSecurityRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'EffectiveNetworkSecurityRule'
                        }
                    }
                }
            }
        }
    }
};
var SecurityGroupNetworkInterface = {
    required: false,
    serializedName: 'SecurityGroupNetworkInterface',
    type: {
        name: 'Composite',
        className: 'SecurityGroupNetworkInterface',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            securityRuleAssociations: {
                required: false,
                serializedName: 'securityRuleAssociations',
                type: {
                    name: 'Composite',
                    className: 'SecurityRuleAssociations'
                }
            }
        }
    }
};
var SecurityGroupViewResult = {
    required: false,
    serializedName: 'SecurityGroupViewResult',
    type: {
        name: 'Composite',
        className: 'SecurityGroupViewResult',
        modelProperties: {
            networkInterfaces: {
                required: false,
                serializedName: 'networkInterfaces',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SecurityGroupNetworkInterfaceElementType',
                        type: {
                            name: 'Composite',
                            className: 'SecurityGroupNetworkInterface'
                        }
                    }
                }
            }
        }
    }
};
var PacketCaptureStorageLocation = {
    required: false,
    serializedName: 'PacketCaptureStorageLocation',
    type: {
        name: 'Composite',
        className: 'PacketCaptureStorageLocation',
        modelProperties: {
            storageId: {
                required: false,
                serializedName: 'storageId',
                type: {
                    name: 'String'
                }
            },
            storagePath: {
                required: false,
                serializedName: 'storagePath',
                type: {
                    name: 'String'
                }
            },
            filePath: {
                required: false,
                serializedName: 'filePath',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var PacketCaptureFilter = {
    required: false,
    serializedName: 'PacketCaptureFilter',
    type: {
        name: 'Composite',
        className: 'PacketCaptureFilter',
        modelProperties: {
            protocol: {
                required: false,
                serializedName: 'protocol',
                defaultValue: 'Any',
                type: {
                    name: 'String'
                }
            },
            localIPAddress: {
                required: false,
                serializedName: 'localIPAddress',
                type: {
                    name: 'String'
                }
            },
            remoteIPAddress: {
                required: false,
                serializedName: 'remoteIPAddress',
                type: {
                    name: 'String'
                }
            },
            localPort: {
                required: false,
                serializedName: 'localPort',
                type: {
                    name: 'String'
                }
            },
            remotePort: {
                required: false,
                serializedName: 'remotePort',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var PacketCaptureParameters = {
    required: false,
    serializedName: 'PacketCaptureParameters',
    type: {
        name: 'Composite',
        className: 'PacketCaptureParameters',
        modelProperties: {
            target: {
                required: true,
                serializedName: 'target',
                type: {
                    name: 'String'
                }
            },
            bytesToCapturePerPacket: {
                required: false,
                serializedName: 'bytesToCapturePerPacket',
                defaultValue: 0,
                type: {
                    name: 'Number'
                }
            },
            totalBytesPerSession: {
                required: false,
                serializedName: 'totalBytesPerSession',
                defaultValue: 1073741824,
                type: {
                    name: 'Number'
                }
            },
            timeLimitInSeconds: {
                required: false,
                serializedName: 'timeLimitInSeconds',
                defaultValue: 18000,
                type: {
                    name: 'Number'
                }
            },
            storageLocation: {
                required: true,
                serializedName: 'storageLocation',
                type: {
                    name: 'Composite',
                    className: 'PacketCaptureStorageLocation'
                }
            },
            filters: {
                required: false,
                serializedName: 'filters',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'PacketCaptureFilterElementType',
                        type: {
                            name: 'Composite',
                            className: 'PacketCaptureFilter'
                        }
                    }
                }
            }
        }
    }
};
var PacketCapture = {
    required: false,
    serializedName: 'PacketCapture',
    type: {
        name: 'Composite',
        className: 'PacketCapture',
        modelProperties: {
            target: {
                required: true,
                serializedName: 'properties.target',
                type: {
                    name: 'String'
                }
            },
            bytesToCapturePerPacket: {
                required: false,
                serializedName: 'properties.bytesToCapturePerPacket',
                defaultValue: 0,
                type: {
                    name: 'Number'
                }
            },
            totalBytesPerSession: {
                required: false,
                serializedName: 'properties.totalBytesPerSession',
                defaultValue: 1073741824,
                type: {
                    name: 'Number'
                }
            },
            timeLimitInSeconds: {
                required: false,
                serializedName: 'properties.timeLimitInSeconds',
                defaultValue: 18000,
                type: {
                    name: 'Number'
                }
            },
            storageLocation: {
                required: true,
                serializedName: 'properties.storageLocation',
                type: {
                    name: 'Composite',
                    className: 'PacketCaptureStorageLocation'
                }
            },
            filters: {
                required: false,
                serializedName: 'properties.filters',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'PacketCaptureFilterElementType',
                        type: {
                            name: 'Composite',
                            className: 'PacketCaptureFilter'
                        }
                    }
                }
            }
        }
    }
};
var PacketCaptureResult = {
    required: false,
    serializedName: 'PacketCaptureResult',
    type: {
        name: 'Composite',
        className: 'PacketCaptureResult',
        modelProperties: {
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            id: {
                required: false,
                readOnly: true,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                defaultValue: 'A unique read-only string that changes whenever the resource is updated.',
                type: {
                    name: 'String'
                }
            },
            target: {
                required: true,
                serializedName: 'properties.target',
                type: {
                    name: 'String'
                }
            },
            bytesToCapturePerPacket: {
                required: false,
                serializedName: 'properties.bytesToCapturePerPacket',
                defaultValue: 0,
                type: {
                    name: 'Number'
                }
            },
            totalBytesPerSession: {
                required: false,
                serializedName: 'properties.totalBytesPerSession',
                defaultValue: 1073741824,
                type: {
                    name: 'Number'
                }
            },
            timeLimitInSeconds: {
                required: false,
                serializedName: 'properties.timeLimitInSeconds',
                defaultValue: 18000,
                type: {
                    name: 'Number'
                }
            },
            storageLocation: {
                required: true,
                serializedName: 'properties.storageLocation',
                type: {
                    name: 'Composite',
                    className: 'PacketCaptureStorageLocation'
                }
            },
            filters: {
                required: false,
                serializedName: 'properties.filters',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'PacketCaptureFilterElementType',
                        type: {
                            name: 'Composite',
                            className: 'PacketCaptureFilter'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var PacketCaptureQueryStatusResult = {
    required: false,
    serializedName: 'PacketCaptureQueryStatusResult',
    type: {
        name: 'Composite',
        className: 'PacketCaptureQueryStatusResult',
        modelProperties: {
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            captureStartTime: {
                required: false,
                serializedName: 'captureStartTime',
                type: {
                    name: 'DateTime'
                }
            },
            packetCaptureStatus: {
                required: false,
                serializedName: 'packetCaptureStatus',
                type: {
                    name: 'String'
                }
            },
            stopReason: {
                required: false,
                serializedName: 'stopReason',
                type: {
                    name: 'String'
                }
            },
            packetCaptureError: {
                required: false,
                serializedName: 'packetCaptureError',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var TroubleshootingParameters = {
    required: false,
    serializedName: 'TroubleshootingParameters',
    type: {
        name: 'Composite',
        className: 'TroubleshootingParameters',
        modelProperties: {
            targetResourceId: {
                required: true,
                serializedName: 'targetResourceId',
                type: {
                    name: 'String'
                }
            },
            storageId: {
                required: true,
                serializedName: 'properties.storageId',
                type: {
                    name: 'String'
                }
            },
            storagePath: {
                required: true,
                serializedName: 'properties.storagePath',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var QueryTroubleshootingParameters = {
    required: false,
    serializedName: 'QueryTroubleshootingParameters',
    type: {
        name: 'Composite',
        className: 'QueryTroubleshootingParameters',
        modelProperties: {
            targetResourceId: {
                required: true,
                serializedName: 'targetResourceId',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var TroubleshootingRecommendedActions = {
    required: false,
    serializedName: 'TroubleshootingRecommendedActions',
    type: {
        name: 'Composite',
        className: 'TroubleshootingRecommendedActions',
        modelProperties: {
            actionId: {
                required: false,
                serializedName: 'actionId',
                type: {
                    name: 'String'
                }
            },
            actionText: {
                required: false,
                serializedName: 'actionText',
                type: {
                    name: 'String'
                }
            },
            actionUri: {
                required: false,
                serializedName: 'actionUri',
                type: {
                    name: 'String'
                }
            },
            actionUriText: {
                required: false,
                serializedName: 'actionUriText',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var TroubleshootingDetails = {
    required: false,
    serializedName: 'TroubleshootingDetails',
    type: {
        name: 'Composite',
        className: 'TroubleshootingDetails',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            reasonType: {
                required: false,
                serializedName: 'reasonType',
                type: {
                    name: 'String'
                }
            },
            summary: {
                required: false,
                serializedName: 'summary',
                type: {
                    name: 'String'
                }
            },
            detail: {
                required: false,
                serializedName: 'detail',
                type: {
                    name: 'String'
                }
            },
            recommendedActions: {
                required: false,
                serializedName: 'recommendedActions',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'TroubleshootingRecommendedActionsElementType',
                        type: {
                            name: 'Composite',
                            className: 'TroubleshootingRecommendedActions'
                        }
                    }
                }
            }
        }
    }
};
var TroubleshootingResult = {
    required: false,
    serializedName: 'TroubleshootingResult',
    type: {
        name: 'Composite',
        className: 'TroubleshootingResult',
        modelProperties: {
            startTime: {
                required: false,
                serializedName: 'startTime',
                type: {
                    name: 'DateTime'
                }
            },
            endTime: {
                required: false,
                serializedName: 'endTime',
                type: {
                    name: 'DateTime'
                }
            },
            code: {
                required: false,
                serializedName: 'code',
                type: {
                    name: 'String'
                }
            },
            results: {
                required: false,
                serializedName: 'results',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'TroubleshootingDetailsElementType',
                        type: {
                            name: 'Composite',
                            className: 'TroubleshootingDetails'
                        }
                    }
                }
            }
        }
    }
};
var RetentionPolicyParameters = {
    required: false,
    serializedName: 'RetentionPolicyParameters',
    type: {
        name: 'Composite',
        className: 'RetentionPolicyParameters',
        modelProperties: {
            days: {
                required: false,
                serializedName: 'days',
                defaultValue: 0,
                type: {
                    name: 'Number'
                }
            },
            enabled: {
                required: false,
                serializedName: 'enabled',
                defaultValue: false,
                type: {
                    name: 'Boolean'
                }
            }
        }
    }
};
var FlowLogStatusParameters = {
    required: false,
    serializedName: 'FlowLogStatusParameters',
    type: {
        name: 'Composite',
        className: 'FlowLogStatusParameters',
        modelProperties: {
            targetResourceId: {
                required: true,
                serializedName: 'targetResourceId',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var FlowLogInformation = {
    required: false,
    serializedName: 'FlowLogInformation',
    type: {
        name: 'Composite',
        className: 'FlowLogInformation',
        modelProperties: {
            targetResourceId: {
                required: true,
                serializedName: 'targetResourceId',
                type: {
                    name: 'String'
                }
            },
            storageId: {
                required: true,
                serializedName: 'properties.storageId',
                type: {
                    name: 'String'
                }
            },
            enabled: {
                required: true,
                serializedName: 'properties.enabled',
                type: {
                    name: 'Boolean'
                }
            },
            retentionPolicy: {
                required: false,
                serializedName: 'properties.retentionPolicy',
                type: {
                    name: 'Composite',
                    className: 'RetentionPolicyParameters'
                }
            }
        }
    }
};
var ConnectivitySource = {
    required: false,
    serializedName: 'ConnectivitySource',
    type: {
        name: 'Composite',
        className: 'ConnectivitySource',
        modelProperties: {
            resourceId: {
                required: true,
                serializedName: 'resourceId',
                type: {
                    name: 'String'
                }
            },
            port: {
                required: false,
                serializedName: 'port',
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var ConnectivityDestination = {
    required: false,
    serializedName: 'ConnectivityDestination',
    type: {
        name: 'Composite',
        className: 'ConnectivityDestination',
        modelProperties: {
            resourceId: {
                required: false,
                serializedName: 'resourceId',
                type: {
                    name: 'String'
                }
            },
            address: {
                required: false,
                serializedName: 'address',
                type: {
                    name: 'String'
                }
            },
            port: {
                required: false,
                serializedName: 'port',
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var ConnectivityParameters = {
    required: false,
    serializedName: 'ConnectivityParameters',
    type: {
        name: 'Composite',
        className: 'ConnectivityParameters',
        modelProperties: {
            source: {
                required: true,
                serializedName: 'source',
                type: {
                    name: 'Composite',
                    className: 'ConnectivitySource'
                }
            },
            destination: {
                required: true,
                serializedName: 'destination',
                type: {
                    name: 'Composite',
                    className: 'ConnectivityDestination'
                }
            }
        }
    }
};
var ConnectivityIssue = {
    required: false,
    serializedName: 'ConnectivityIssue',
    type: {
        name: 'Composite',
        className: 'ConnectivityIssue',
        modelProperties: {
            origin: {
                required: false,
                readOnly: true,
                serializedName: 'origin',
                type: {
                    name: 'String'
                }
            },
            severity: {
                required: false,
                readOnly: true,
                serializedName: 'severity',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            context: {
                required: false,
                readOnly: true,
                serializedName: 'context',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ObjectElementType',
                        type: {
                            name: 'Dictionary',
                            value: {
                                required: false,
                                serializedName: 'stringElementType',
                                type: {
                                    name: 'String'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
var ConnectivityHop = {
    required: false,
    serializedName: 'ConnectivityHop',
    type: {
        name: 'Composite',
        className: 'ConnectivityHop',
        modelProperties: {
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            id: {
                required: false,
                readOnly: true,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            address: {
                required: false,
                readOnly: true,
                serializedName: 'address',
                type: {
                    name: 'String'
                }
            },
            resourceId: {
                required: false,
                readOnly: true,
                serializedName: 'resourceId',
                type: {
                    name: 'String'
                }
            },
            nextHopIds: {
                required: false,
                readOnly: true,
                serializedName: 'nextHopIds',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            issues: {
                required: false,
                readOnly: true,
                serializedName: 'issues',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ConnectivityIssueElementType',
                        type: {
                            name: 'Composite',
                            className: 'ConnectivityIssue'
                        }
                    }
                }
            }
        }
    }
};
var ConnectivityInformation = {
    required: false,
    serializedName: 'ConnectivityInformation',
    type: {
        name: 'Composite',
        className: 'ConnectivityInformation',
        modelProperties: {
            hops: {
                required: false,
                readOnly: true,
                serializedName: 'hops',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ConnectivityHopElementType',
                        type: {
                            name: 'Composite',
                            className: 'ConnectivityHop'
                        }
                    }
                }
            },
            connectionStatus: {
                required: false,
                readOnly: true,
                serializedName: 'connectionStatus',
                type: {
                    name: 'String'
                }
            },
            avgLatencyInMs: {
                required: false,
                readOnly: true,
                serializedName: 'avgLatencyInMs',
                type: {
                    name: 'Number'
                }
            },
            minLatencyInMs: {
                required: false,
                readOnly: true,
                serializedName: 'minLatencyInMs',
                type: {
                    name: 'Number'
                }
            },
            maxLatencyInMs: {
                required: false,
                readOnly: true,
                serializedName: 'maxLatencyInMs',
                type: {
                    name: 'Number'
                }
            },
            probesSent: {
                required: false,
                readOnly: true,
                serializedName: 'probesSent',
                type: {
                    name: 'Number'
                }
            },
            probesFailed: {
                required: false,
                readOnly: true,
                serializedName: 'probesFailed',
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var PatchRouteFilterRule = {
    required: false,
    serializedName: 'PatchRouteFilterRule',
    type: {
        name: 'Composite',
        className: 'PatchRouteFilterRule',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            access: {
                required: true,
                serializedName: 'properties.access',
                type: {
                    name: 'String'
                }
            },
            routeFilterRuleType: {
                required: true,
                isConstant: true,
                serializedName: 'properties.routeFilterRuleType',
                defaultValue: 'Community',
                type: {
                    name: 'String'
                }
            },
            communities: {
                required: true,
                serializedName: 'properties.communities',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                readOnly: true,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var PatchRouteFilter = {
    required: false,
    serializedName: 'PatchRouteFilter',
    type: {
        name: 'Composite',
        className: 'PatchRouteFilter',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            rules: {
                required: false,
                serializedName: 'properties.rules',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'RouteFilterRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'RouteFilterRule'
                        }
                    }
                }
            },
            peerings: {
                required: false,
                serializedName: 'properties.peerings',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ExpressRouteCircuitPeeringElementType',
                        type: {
                            name: 'Composite',
                            className: 'ExpressRouteCircuitPeering'
                        }
                    }
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                readOnly: true,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var BGPCommunity = {
    required: false,
    serializedName: 'BGPCommunity',
    type: {
        name: 'Composite',
        className: 'BGPCommunity',
        modelProperties: {
            serviceSupportedRegion: {
                required: false,
                serializedName: 'serviceSupportedRegion',
                type: {
                    name: 'String'
                }
            },
            communityName: {
                required: false,
                serializedName: 'communityName',
                type: {
                    name: 'String'
                }
            },
            communityValue: {
                required: false,
                serializedName: 'communityValue',
                type: {
                    name: 'String'
                }
            },
            communityPrefixes: {
                required: false,
                serializedName: 'communityPrefixes',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            isAuthorizedToUse: {
                required: false,
                serializedName: 'isAuthorizedToUse',
                type: {
                    name: 'Boolean'
                }
            },
            serviceGroup: {
                required: false,
                serializedName: 'serviceGroup',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var BgpServiceCommunity = {
    required: false,
    serializedName: 'BgpServiceCommunity',
    type: {
        name: 'Composite',
        className: 'BgpServiceCommunity',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            serviceName: {
                required: false,
                serializedName: 'properties.serviceName',
                type: {
                    name: 'String'
                }
            },
            bgpCommunities: {
                required: false,
                serializedName: 'properties.bgpCommunities',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'BGPCommunityElementType',
                        type: {
                            name: 'Composite',
                            className: 'BGPCommunity'
                        }
                    }
                }
            }
        }
    }
};
var UsageName = {
    required: false,
    serializedName: 'UsageName',
    type: {
        name: 'Composite',
        className: 'UsageName',
        modelProperties: {
            value: {
                required: false,
                serializedName: 'value',
                type: {
                    name: 'String'
                }
            },
            localizedValue: {
                required: false,
                serializedName: 'localizedValue',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var Usage = {
    required: false,
    serializedName: 'Usage',
    type: {
        name: 'Composite',
        className: 'Usage',
        modelProperties: {
            id: {
                required: false,
                readOnly: true,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            unit: {
                required: true,
                isConstant: true,
                serializedName: 'unit',
                defaultValue: 'Count',
                type: {
                    name: 'String'
                }
            },
            currentValue: {
                required: true,
                serializedName: 'currentValue',
                type: {
                    name: 'Number'
                }
            },
            limit: {
                required: true,
                serializedName: 'limit',
                type: {
                    name: 'Number'
                }
            },
            name: {
                required: true,
                serializedName: 'name',
                type: {
                    name: 'Composite',
                    className: 'UsageName'
                }
            }
        }
    }
};
var VirtualNetworkPeering = {
    required: false,
    serializedName: 'VirtualNetworkPeering',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkPeering',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            allowVirtualNetworkAccess: {
                required: false,
                serializedName: 'properties.allowVirtualNetworkAccess',
                type: {
                    name: 'Boolean'
                }
            },
            allowForwardedTraffic: {
                required: false,
                serializedName: 'properties.allowForwardedTraffic',
                type: {
                    name: 'Boolean'
                }
            },
            allowGatewayTransit: {
                required: false,
                serializedName: 'properties.allowGatewayTransit',
                type: {
                    name: 'Boolean'
                }
            },
            useRemoteGateways: {
                required: false,
                serializedName: 'properties.useRemoteGateways',
                type: {
                    name: 'Boolean'
                }
            },
            remoteVirtualNetwork: {
                required: false,
                serializedName: 'properties.remoteVirtualNetwork',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            peeringState: {
                required: false,
                serializedName: 'properties.peeringState',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var AddressSpace = {
    required: false,
    serializedName: 'AddressSpace',
    type: {
        name: 'Composite',
        className: 'AddressSpace',
        modelProperties: {
            addressPrefixes: {
                required: false,
                serializedName: 'addressPrefixes',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var DhcpOptions = {
    required: false,
    serializedName: 'DhcpOptions',
    type: {
        name: 'Composite',
        className: 'DhcpOptions',
        modelProperties: {
            dnsServers: {
                required: false,
                serializedName: 'dnsServers',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var VirtualNetwork = {
    required: false,
    serializedName: 'VirtualNetwork',
    type: {
        name: 'Composite',
        className: 'VirtualNetwork',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            addressSpace: {
                required: false,
                serializedName: 'properties.addressSpace',
                type: {
                    name: 'Composite',
                    className: 'AddressSpace'
                }
            },
            dhcpOptions: {
                required: false,
                serializedName: 'properties.dhcpOptions',
                type: {
                    name: 'Composite',
                    className: 'DhcpOptions'
                }
            },
            subnets: {
                required: false,
                serializedName: 'properties.subnets',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubnetElementType',
                        type: {
                            name: 'Composite',
                            className: 'Subnet'
                        }
                    }
                }
            },
            virtualNetworkPeerings: {
                required: false,
                serializedName: 'properties.virtualNetworkPeerings',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'VirtualNetworkPeeringElementType',
                        type: {
                            name: 'Composite',
                            className: 'VirtualNetworkPeering'
                        }
                    }
                }
            },
            resourceGuid: {
                required: false,
                serializedName: 'properties.resourceGuid',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            enableDdosProtection: {
                required: false,
                serializedName: 'properties.enableDdosProtection',
                type: {
                    name: 'Boolean'
                }
            },
            enableVmProtection: {
                required: false,
                serializedName: 'properties.enableVmProtection',
                type: {
                    name: 'Boolean'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var IPAddressAvailabilityResult = {
    required: false,
    serializedName: 'IPAddressAvailabilityResult',
    type: {
        name: 'Composite',
        className: 'IPAddressAvailabilityResult',
        modelProperties: {
            available: {
                required: false,
                serializedName: 'available',
                type: {
                    name: 'Boolean'
                }
            },
            availableIPAddresses: {
                required: false,
                serializedName: 'availableIPAddresses',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var VirtualNetworkUsageName = {
    required: false,
    serializedName: 'VirtualNetworkUsageName',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkUsageName',
        modelProperties: {
            localizedValue: {
                required: false,
                readOnly: true,
                serializedName: 'localizedValue',
                type: {
                    name: 'String'
                }
            },
            value: {
                required: false,
                readOnly: true,
                serializedName: 'value',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkUsage = {
    required: false,
    serializedName: 'VirtualNetworkUsage',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkUsage',
        modelProperties: {
            currentValue: {
                required: false,
                readOnly: true,
                serializedName: 'currentValue',
                type: {
                    name: 'Number'
                }
            },
            id: {
                required: false,
                readOnly: true,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            limit: {
                required: false,
                readOnly: true,
                serializedName: 'limit',
                type: {
                    name: 'Number'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'Composite',
                    className: 'VirtualNetworkUsageName'
                }
            },
            unit: {
                required: false,
                readOnly: true,
                serializedName: 'unit',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkGatewayIPConfiguration = {
    required: false,
    serializedName: 'VirtualNetworkGatewayIPConfiguration',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkGatewayIPConfiguration',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            privateIPAllocationMethod: {
                required: false,
                serializedName: 'properties.privateIPAllocationMethod',
                type: {
                    name: 'String'
                }
            },
            subnet: {
                required: false,
                serializedName: 'properties.subnet',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            publicIPAddress: {
                required: false,
                serializedName: 'properties.publicIPAddress',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkGatewaySku = {
    required: false,
    serializedName: 'VirtualNetworkGatewaySku',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkGatewaySku',
        modelProperties: {
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            tier: {
                required: false,
                serializedName: 'tier',
                type: {
                    name: 'String'
                }
            },
            capacity: {
                required: false,
                serializedName: 'capacity',
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var VpnClientRootCertificate = {
    required: false,
    serializedName: 'VpnClientRootCertificate',
    type: {
        name: 'Composite',
        className: 'VpnClientRootCertificate',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            publicCertData: {
                required: true,
                serializedName: 'properties.publicCertData',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VpnClientRevokedCertificate = {
    required: false,
    serializedName: 'VpnClientRevokedCertificate',
    type: {
        name: 'Composite',
        className: 'VpnClientRevokedCertificate',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            thumbprint: {
                required: false,
                serializedName: 'properties.thumbprint',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VpnClientConfiguration = {
    required: false,
    serializedName: 'VpnClientConfiguration',
    type: {
        name: 'Composite',
        className: 'VpnClientConfiguration',
        modelProperties: {
            vpnClientAddressPool: {
                required: false,
                serializedName: 'vpnClientAddressPool',
                type: {
                    name: 'Composite',
                    className: 'AddressSpace'
                }
            },
            vpnClientRootCertificates: {
                required: false,
                serializedName: 'vpnClientRootCertificates',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'VpnClientRootCertificateElementType',
                        type: {
                            name: 'Composite',
                            className: 'VpnClientRootCertificate'
                        }
                    }
                }
            },
            vpnClientRevokedCertificates: {
                required: false,
                serializedName: 'vpnClientRevokedCertificates',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'VpnClientRevokedCertificateElementType',
                        type: {
                            name: 'Composite',
                            className: 'VpnClientRevokedCertificate'
                        }
                    }
                }
            },
            vpnClientProtocols: {
                required: false,
                serializedName: 'vpnClientProtocols',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            radiusServerAddress: {
                required: false,
                serializedName: 'radiusServerAddress',
                type: {
                    name: 'String'
                }
            },
            radiusServerSecret: {
                required: false,
                serializedName: 'radiusServerSecret',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var BgpSettings = {
    required: false,
    serializedName: 'BgpSettings',
    type: {
        name: 'Composite',
        className: 'BgpSettings',
        modelProperties: {
            asn: {
                required: false,
                serializedName: 'asn',
                type: {
                    name: 'Number'
                }
            },
            bgpPeeringAddress: {
                required: false,
                serializedName: 'bgpPeeringAddress',
                type: {
                    name: 'String'
                }
            },
            peerWeight: {
                required: false,
                serializedName: 'peerWeight',
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var BgpPeerStatus = {
    required: false,
    serializedName: 'BgpPeerStatus',
    type: {
        name: 'Composite',
        className: 'BgpPeerStatus',
        modelProperties: {
            localAddress: {
                required: false,
                readOnly: true,
                serializedName: 'localAddress',
                type: {
                    name: 'String'
                }
            },
            neighbor: {
                required: false,
                readOnly: true,
                serializedName: 'neighbor',
                type: {
                    name: 'String'
                }
            },
            asn: {
                required: false,
                readOnly: true,
                serializedName: 'asn',
                type: {
                    name: 'Number'
                }
            },
            state: {
                required: false,
                readOnly: true,
                serializedName: 'state',
                type: {
                    name: 'String'
                }
            },
            connectedDuration: {
                required: false,
                readOnly: true,
                serializedName: 'connectedDuration',
                type: {
                    name: 'String'
                }
            },
            routesReceived: {
                required: false,
                readOnly: true,
                serializedName: 'routesReceived',
                type: {
                    name: 'Number'
                }
            },
            messagesSent: {
                required: false,
                readOnly: true,
                serializedName: 'messagesSent',
                type: {
                    name: 'Number'
                }
            },
            messagesReceived: {
                required: false,
                readOnly: true,
                serializedName: 'messagesReceived',
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var GatewayRoute = {
    required: false,
    serializedName: 'GatewayRoute',
    type: {
        name: 'Composite',
        className: 'GatewayRoute',
        modelProperties: {
            localAddress: {
                required: false,
                readOnly: true,
                serializedName: 'localAddress',
                type: {
                    name: 'String'
                }
            },
            network: {
                required: false,
                readOnly: true,
                serializedName: 'network',
                type: {
                    name: 'String'
                }
            },
            nextHop: {
                required: false,
                readOnly: true,
                serializedName: 'nextHop',
                type: {
                    name: 'String'
                }
            },
            sourcePeer: {
                required: false,
                readOnly: true,
                serializedName: 'sourcePeer',
                type: {
                    name: 'String'
                }
            },
            origin: {
                required: false,
                readOnly: true,
                serializedName: 'origin',
                type: {
                    name: 'String'
                }
            },
            asPath: {
                required: false,
                readOnly: true,
                serializedName: 'asPath',
                type: {
                    name: 'String'
                }
            },
            weight: {
                required: false,
                readOnly: true,
                serializedName: 'weight',
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var VirtualNetworkGateway = {
    required: false,
    serializedName: 'VirtualNetworkGateway',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkGateway',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            ipConfigurations: {
                required: false,
                serializedName: 'properties.ipConfigurations',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'VirtualNetworkGatewayIPConfigurationElementType',
                        type: {
                            name: 'Composite',
                            className: 'VirtualNetworkGatewayIPConfiguration'
                        }
                    }
                }
            },
            gatewayType: {
                required: false,
                serializedName: 'properties.gatewayType',
                type: {
                    name: 'String'
                }
            },
            vpnType: {
                required: false,
                serializedName: 'properties.vpnType',
                type: {
                    name: 'String'
                }
            },
            enableBgp: {
                required: false,
                serializedName: 'properties.enableBgp',
                type: {
                    name: 'Boolean'
                }
            },
            activeActive: {
                required: false,
                serializedName: 'properties.activeActive',
                type: {
                    name: 'Boolean'
                }
            },
            gatewayDefaultSite: {
                required: false,
                serializedName: 'properties.gatewayDefaultSite',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            sku: {
                required: false,
                serializedName: 'properties.sku',
                type: {
                    name: 'Composite',
                    className: 'VirtualNetworkGatewaySku'
                }
            },
            vpnClientConfiguration: {
                required: false,
                serializedName: 'properties.vpnClientConfiguration',
                type: {
                    name: 'Composite',
                    className: 'VpnClientConfiguration'
                }
            },
            bgpSettings: {
                required: false,
                serializedName: 'properties.bgpSettings',
                type: {
                    name: 'Composite',
                    className: 'BgpSettings'
                }
            },
            resourceGuid: {
                required: false,
                serializedName: 'properties.resourceGuid',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VpnClientParameters = {
    required: false,
    serializedName: 'VpnClientParameters',
    type: {
        name: 'Composite',
        className: 'VpnClientParameters',
        modelProperties: {
            processorArchitecture: {
                required: false,
                serializedName: 'processorArchitecture',
                type: {
                    name: 'String'
                }
            },
            authenticationMethod: {
                required: false,
                serializedName: 'authenticationMethod',
                type: {
                    name: 'String'
                }
            },
            radiusServerAuthCertificate: {
                required: false,
                serializedName: 'radiusServerAuthCertificate',
                type: {
                    name: 'String'
                }
            },
            clientRootCertificates: {
                required: false,
                serializedName: 'clientRootCertificates',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            }
        }
    }
};
var BgpPeerStatusListResult = {
    required: false,
    serializedName: 'BgpPeerStatusListResult',
    type: {
        name: 'Composite',
        className: 'BgpPeerStatusListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: 'value',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'BgpPeerStatusElementType',
                        type: {
                            name: 'Composite',
                            className: 'BgpPeerStatus'
                        }
                    }
                }
            }
        }
    }
};
var GatewayRouteListResult = {
    required: false,
    serializedName: 'GatewayRouteListResult',
    type: {
        name: 'Composite',
        className: 'GatewayRouteListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: 'value',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'GatewayRouteElementType',
                        type: {
                            name: 'Composite',
                            className: 'GatewayRoute'
                        }
                    }
                }
            }
        }
    }
};
var TunnelConnectionHealth = {
    required: false,
    serializedName: 'TunnelConnectionHealth',
    type: {
        name: 'Composite',
        className: 'TunnelConnectionHealth',
        modelProperties: {
            tunnel: {
                required: false,
                readOnly: true,
                serializedName: 'tunnel',
                type: {
                    name: 'String'
                }
            },
            connectionStatus: {
                required: false,
                readOnly: true,
                serializedName: 'connectionStatus',
                type: {
                    name: 'String'
                }
            },
            ingressBytesTransferred: {
                required: false,
                readOnly: true,
                serializedName: 'ingressBytesTransferred',
                type: {
                    name: 'Number'
                }
            },
            egressBytesTransferred: {
                required: false,
                readOnly: true,
                serializedName: 'egressBytesTransferred',
                type: {
                    name: 'Number'
                }
            },
            lastConnectionEstablishedUtcTime: {
                required: false,
                readOnly: true,
                serializedName: 'lastConnectionEstablishedUtcTime',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var LocalNetworkGateway = {
    required: false,
    serializedName: 'LocalNetworkGateway',
    type: {
        name: 'Composite',
        className: 'LocalNetworkGateway',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            localNetworkAddressSpace: {
                required: false,
                serializedName: 'properties.localNetworkAddressSpace',
                type: {
                    name: 'Composite',
                    className: 'AddressSpace'
                }
            },
            gatewayIpAddress: {
                required: false,
                serializedName: 'properties.gatewayIpAddress',
                type: {
                    name: 'String'
                }
            },
            bgpSettings: {
                required: false,
                serializedName: 'properties.bgpSettings',
                type: {
                    name: 'Composite',
                    className: 'BgpSettings'
                }
            },
            resourceGuid: {
                required: false,
                serializedName: 'properties.resourceGuid',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var IpsecPolicy = {
    required: false,
    serializedName: 'IpsecPolicy',
    type: {
        name: 'Composite',
        className: 'IpsecPolicy',
        modelProperties: {
            saLifeTimeSeconds: {
                required: true,
                serializedName: 'saLifeTimeSeconds',
                type: {
                    name: 'Number'
                }
            },
            saDataSizeKilobytes: {
                required: true,
                serializedName: 'saDataSizeKilobytes',
                type: {
                    name: 'Number'
                }
            },
            ipsecEncryption: {
                required: true,
                serializedName: 'ipsecEncryption',
                type: {
                    name: 'String'
                }
            },
            ipsecIntegrity: {
                required: true,
                serializedName: 'ipsecIntegrity',
                type: {
                    name: 'String'
                }
            },
            ikeEncryption: {
                required: true,
                serializedName: 'ikeEncryption',
                type: {
                    name: 'String'
                }
            },
            ikeIntegrity: {
                required: true,
                serializedName: 'ikeIntegrity',
                type: {
                    name: 'String'
                }
            },
            dhGroup: {
                required: true,
                serializedName: 'dhGroup',
                type: {
                    name: 'String'
                }
            },
            pfsGroup: {
                required: true,
                serializedName: 'pfsGroup',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkGatewayConnection = {
    required: false,
    serializedName: 'VirtualNetworkGatewayConnection',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkGatewayConnection',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            authorizationKey: {
                required: false,
                serializedName: 'properties.authorizationKey',
                type: {
                    name: 'String'
                }
            },
            virtualNetworkGateway1: {
                required: true,
                serializedName: 'properties.virtualNetworkGateway1',
                type: {
                    name: 'Composite',
                    className: 'VirtualNetworkGateway'
                }
            },
            virtualNetworkGateway2: {
                required: false,
                serializedName: 'properties.virtualNetworkGateway2',
                type: {
                    name: 'Composite',
                    className: 'VirtualNetworkGateway'
                }
            },
            localNetworkGateway2: {
                required: false,
                serializedName: 'properties.localNetworkGateway2',
                type: {
                    name: 'Composite',
                    className: 'LocalNetworkGateway'
                }
            },
            connectionType: {
                required: true,
                serializedName: 'properties.connectionType',
                type: {
                    name: 'String'
                }
            },
            routingWeight: {
                required: false,
                serializedName: 'properties.routingWeight',
                type: {
                    name: 'Number'
                }
            },
            sharedKey: {
                required: false,
                serializedName: 'properties.sharedKey',
                type: {
                    name: 'String'
                }
            },
            connectionStatus: {
                required: false,
                readOnly: true,
                serializedName: 'properties.connectionStatus',
                type: {
                    name: 'String'
                }
            },
            tunnelConnectionStatus: {
                required: false,
                readOnly: true,
                serializedName: 'properties.tunnelConnectionStatus',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'TunnelConnectionHealthElementType',
                        type: {
                            name: 'Composite',
                            className: 'TunnelConnectionHealth'
                        }
                    }
                }
            },
            egressBytesTransferred: {
                required: false,
                readOnly: true,
                serializedName: 'properties.egressBytesTransferred',
                type: {
                    name: 'Number'
                }
            },
            ingressBytesTransferred: {
                required: false,
                readOnly: true,
                serializedName: 'properties.ingressBytesTransferred',
                type: {
                    name: 'Number'
                }
            },
            peer: {
                required: false,
                serializedName: 'properties.peer',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            enableBgp: {
                required: false,
                serializedName: 'properties.enableBgp',
                type: {
                    name: 'Boolean'
                }
            },
            usePolicyBasedTrafficSelectors: {
                required: false,
                serializedName: 'properties.usePolicyBasedTrafficSelectors',
                type: {
                    name: 'Boolean'
                }
            },
            ipsecPolicies: {
                required: false,
                serializedName: 'properties.ipsecPolicies',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'IpsecPolicyElementType',
                        type: {
                            name: 'Composite',
                            className: 'IpsecPolicy'
                        }
                    }
                }
            },
            resourceGuid: {
                required: false,
                serializedName: 'properties.resourceGuid',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ConnectionResetSharedKey = {
    required: false,
    serializedName: 'ConnectionResetSharedKey',
    type: {
        name: 'Composite',
        className: 'ConnectionResetSharedKey',
        modelProperties: {
            keyLength: {
                required: true,
                serializedName: 'keyLength',
                constraints: {
                    InclusiveMaximum: 128,
                    InclusiveMinimum: 1
                },
                type: {
                    name: 'Number'
                }
            }
        }
    }
};
var ConnectionSharedKey = {
    required: false,
    serializedName: 'ConnectionSharedKey',
    type: {
        name: 'Composite',
        className: 'ConnectionSharedKey',
        modelProperties: {
            value: {
                required: true,
                serializedName: 'value',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkConnectionGatewayReference = {
    required: false,
    serializedName: 'virtualNetworkConnectionGatewayReference',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkConnectionGatewayReference',
        modelProperties: {
            id: {
                required: true,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkGatewayConnectionListEntity = {
    required: false,
    serializedName: 'VirtualNetworkGatewayConnectionListEntity',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkGatewayConnectionListEntity',
        modelProperties: {
            id: {
                required: false,
                serializedName: 'id',
                type: {
                    name: 'String'
                }
            },
            name: {
                required: false,
                readOnly: true,
                serializedName: 'name',
                type: {
                    name: 'String'
                }
            },
            type: {
                required: false,
                readOnly: true,
                serializedName: 'type',
                type: {
                    name: 'String'
                }
            },
            location: {
                required: false,
                serializedName: 'location',
                type: {
                    name: 'String'
                }
            },
            tags: {
                required: false,
                serializedName: 'tags',
                type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'stringElementType',
                        type: {
                            name: 'String'
                        }
                    }
                }
            },
            authorizationKey: {
                required: false,
                serializedName: 'properties.authorizationKey',
                type: {
                    name: 'String'
                }
            },
            virtualNetworkGateway1: {
                required: true,
                serializedName: 'properties.virtualNetworkGateway1',
                type: {
                    name: 'Composite',
                    className: 'VirtualNetworkConnectionGatewayReference'
                }
            },
            virtualNetworkGateway2: {
                required: false,
                serializedName: 'properties.virtualNetworkGateway2',
                type: {
                    name: 'Composite',
                    className: 'VirtualNetworkConnectionGatewayReference'
                }
            },
            localNetworkGateway2: {
                required: false,
                serializedName: 'properties.localNetworkGateway2',
                type: {
                    name: 'Composite',
                    className: 'VirtualNetworkConnectionGatewayReference'
                }
            },
            connectionType: {
                required: true,
                serializedName: 'properties.connectionType',
                type: {
                    name: 'String'
                }
            },
            routingWeight: {
                required: false,
                serializedName: 'properties.routingWeight',
                type: {
                    name: 'Number'
                }
            },
            sharedKey: {
                required: false,
                serializedName: 'properties.sharedKey',
                type: {
                    name: 'String'
                }
            },
            connectionStatus: {
                required: false,
                readOnly: true,
                serializedName: 'properties.connectionStatus',
                type: {
                    name: 'String'
                }
            },
            tunnelConnectionStatus: {
                required: false,
                readOnly: true,
                serializedName: 'properties.tunnelConnectionStatus',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'TunnelConnectionHealthElementType',
                        type: {
                            name: 'Composite',
                            className: 'TunnelConnectionHealth'
                        }
                    }
                }
            },
            egressBytesTransferred: {
                required: false,
                readOnly: true,
                serializedName: 'properties.egressBytesTransferred',
                type: {
                    name: 'Number'
                }
            },
            ingressBytesTransferred: {
                required: false,
                readOnly: true,
                serializedName: 'properties.ingressBytesTransferred',
                type: {
                    name: 'Number'
                }
            },
            peer: {
                required: false,
                serializedName: 'properties.peer',
                type: {
                    name: 'Composite',
                    className: 'SubResource'
                }
            },
            enableBgp: {
                required: false,
                serializedName: 'properties.enableBgp',
                type: {
                    name: 'Boolean'
                }
            },
            usePolicyBasedTrafficSelectors: {
                required: false,
                serializedName: 'properties.usePolicyBasedTrafficSelectors',
                type: {
                    name: 'Boolean'
                }
            },
            ipsecPolicies: {
                required: false,
                serializedName: 'properties.ipsecPolicies',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'IpsecPolicyElementType',
                        type: {
                            name: 'Composite',
                            className: 'IpsecPolicy'
                        }
                    }
                }
            },
            resourceGuid: {
                required: false,
                serializedName: 'properties.resourceGuid',
                type: {
                    name: 'String'
                }
            },
            provisioningState: {
                required: false,
                readOnly: true,
                serializedName: 'properties.provisioningState',
                type: {
                    name: 'String'
                }
            },
            etag: {
                required: false,
                serializedName: 'etag',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewaysBackendHealthOptionalParams = {
    required: false,
    serializedName: 'BackendHealthOptions',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewaysBackendHealthOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewaysBeginBackendHealthOptionalParams = {
    required: false,
    serializedName: 'BeginBackendHealthOptions',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewaysBeginBackendHealthOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var LoadBalancersGetOptionalParams = {
    required: false,
    serializedName: 'GetOptions',
    type: {
        name: 'Composite',
        className: 'LoadBalancersGetOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var InboundNatRulesGetOptionalParams = {
    required: false,
    serializedName: 'GetOptions',
    type: {
        name: 'Composite',
        className: 'InboundNatRulesGetOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkInterfacesGetOptionalParams = {
    required: false,
    serializedName: 'GetOptions',
    type: {
        name: 'Composite',
        className: 'NetworkInterfacesGetOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams = {
    required: false,
    serializedName: 'GetVirtualMachineScaleSetNetworkInterfaceOptions',
    type: {
        name: 'Composite',
        className: 'NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkSecurityGroupsGetOptionalParams = {
    required: false,
    serializedName: 'GetOptions',
    type: {
        name: 'Composite',
        className: 'NetworkSecurityGroupsGetOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var PublicIPAddressesGetOptionalParams = {
    required: false,
    serializedName: 'GetOptions',
    type: {
        name: 'Composite',
        className: 'PublicIPAddressesGetOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptionalParams = {
    required: false,
    serializedName: 'GetVirtualMachineScaleSetPublicIPAddressOptions',
    type: {
        name: 'Composite',
        className: 'PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var RouteFiltersGetOptionalParams = {
    required: false,
    serializedName: 'GetOptions',
    type: {
        name: 'Composite',
        className: 'RouteFiltersGetOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var RouteTablesGetOptionalParams = {
    required: false,
    serializedName: 'GetOptions',
    type: {
        name: 'Composite',
        className: 'RouteTablesGetOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworksGetOptionalParams = {
    required: false,
    serializedName: 'GetOptions',
    type: {
        name: 'Composite',
        className: 'VirtualNetworksGetOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworksCheckIPAddressAvailabilityOptionalParams = {
    required: false,
    serializedName: 'CheckIPAddressAvailabilityOptions',
    type: {
        name: 'Composite',
        className: 'VirtualNetworksCheckIPAddressAvailabilityOptionalParams',
        modelProperties: {
            ipAddress: {
                required: false,
                serializedName: 'ipAddress',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var SubnetsGetOptionalParams = {
    required: false,
    serializedName: 'GetOptions',
    type: {
        name: 'Composite',
        className: 'SubnetsGetOptionalParams',
        modelProperties: {
            expand: {
                required: false,
                serializedName: '$expand',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkGatewaysResetOptionalParams = {
    required: false,
    serializedName: 'ResetOptions',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkGatewaysResetOptionalParams',
        modelProperties: {
            gatewayVip: {
                required: false,
                serializedName: 'gatewayVip',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams = {
    required: false,
    serializedName: 'GetBgpPeerStatusOptions',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams',
        modelProperties: {
            peer: {
                required: false,
                serializedName: 'peer',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkGatewaysBeginResetOptionalParams = {
    required: false,
    serializedName: 'BeginResetOptions',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkGatewaysBeginResetOptionalParams',
        modelProperties: {
            gatewayVip: {
                required: false,
                serializedName: 'gatewayVip',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkGatewaysBeginGetBgpPeerStatusOptionalParams = {
    required: false,
    serializedName: 'BeginGetBgpPeerStatusOptions',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkGatewaysBeginGetBgpPeerStatusOptionalParams',
        modelProperties: {
            peer: {
                required: false,
                serializedName: 'peer',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayListResult = {
    required: false,
    serializedName: 'ApplicationGatewayListResult',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewayElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGateway'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationGatewayAvailableSslPredefinedPolicies = {
    required: false,
    serializedName: 'ApplicationGatewayAvailableSslPredefinedPolicies',
    type: {
        name: 'Composite',
        className: 'ApplicationGatewayAvailableSslPredefinedPolicies',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationGatewaySslPredefinedPolicyElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationGatewaySslPredefinedPolicy'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ApplicationSecurityGroupListResult = {
    required: false,
    serializedName: 'ApplicationSecurityGroupListResult',
    type: {
        name: 'Composite',
        className: 'ApplicationSecurityGroupListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ApplicationSecurityGroupElementType',
                        type: {
                            name: 'Composite',
                            className: 'ApplicationSecurityGroup'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var EndpointServicesListResult = {
    required: false,
    serializedName: 'EndpointServicesListResult',
    type: {
        name: 'Composite',
        className: 'EndpointServicesListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'EndpointServiceResultElementType',
                        type: {
                            name: 'Composite',
                            className: 'EndpointServiceResult'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var AuthorizationListResult = {
    required: false,
    serializedName: 'AuthorizationListResult',
    type: {
        name: 'Composite',
        className: 'AuthorizationListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ExpressRouteCircuitAuthorizationElementType',
                        type: {
                            name: 'Composite',
                            className: 'ExpressRouteCircuitAuthorization'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteCircuitPeeringListResult = {
    required: false,
    serializedName: 'ExpressRouteCircuitPeeringListResult',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitPeeringListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ExpressRouteCircuitPeeringElementType',
                        type: {
                            name: 'Composite',
                            className: 'ExpressRouteCircuitPeering'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteCircuitListResult = {
    required: false,
    serializedName: 'ExpressRouteCircuitListResult',
    type: {
        name: 'Composite',
        className: 'ExpressRouteCircuitListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ExpressRouteCircuitElementType',
                        type: {
                            name: 'Composite',
                            className: 'ExpressRouteCircuit'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var ExpressRouteServiceProviderListResult = {
    required: false,
    serializedName: 'ExpressRouteServiceProviderListResult',
    type: {
        name: 'Composite',
        className: 'ExpressRouteServiceProviderListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ExpressRouteServiceProviderElementType',
                        type: {
                            name: 'Composite',
                            className: 'ExpressRouteServiceProvider'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var LoadBalancerListResult = {
    required: false,
    serializedName: 'LoadBalancerListResult',
    type: {
        name: 'Composite',
        className: 'LoadBalancerListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'LoadBalancerElementType',
                        type: {
                            name: 'Composite',
                            className: 'LoadBalancer'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var LoadBalancerBackendAddressPoolListResult = {
    required: false,
    serializedName: 'LoadBalancerBackendAddressPoolListResult',
    type: {
        name: 'Composite',
        className: 'LoadBalancerBackendAddressPoolListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'BackendAddressPoolElementType',
                        type: {
                            name: 'Composite',
                            className: 'BackendAddressPool'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var LoadBalancerFrontendIPConfigurationListResult = {
    required: false,
    serializedName: 'LoadBalancerFrontendIPConfigurationListResult',
    type: {
        name: 'Composite',
        className: 'LoadBalancerFrontendIPConfigurationListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'FrontendIPConfigurationElementType',
                        type: {
                            name: 'Composite',
                            className: 'FrontendIPConfiguration'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var InboundNatRuleListResult = {
    required: false,
    serializedName: 'InboundNatRuleListResult',
    type: {
        name: 'Composite',
        className: 'InboundNatRuleListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'InboundNatRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'InboundNatRule'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var LoadBalancerLoadBalancingRuleListResult = {
    required: false,
    serializedName: 'LoadBalancerLoadBalancingRuleListResult',
    type: {
        name: 'Composite',
        className: 'LoadBalancerLoadBalancingRuleListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'LoadBalancingRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'LoadBalancingRule'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkInterfaceListResult = {
    required: false,
    serializedName: 'NetworkInterfaceListResult',
    type: {
        name: 'Composite',
        className: 'NetworkInterfaceListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'NetworkInterfaceElementType',
                        type: {
                            name: 'Composite',
                            className: 'NetworkInterface'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var LoadBalancerProbeListResult = {
    required: false,
    serializedName: 'LoadBalancerProbeListResult',
    type: {
        name: 'Composite',
        className: 'LoadBalancerProbeListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'ProbeElementType',
                        type: {
                            name: 'Composite',
                            className: 'Probe'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkInterfaceIPConfigurationListResult = {
    required: false,
    serializedName: 'NetworkInterfaceIPConfigurationListResult',
    type: {
        name: 'Composite',
        className: 'NetworkInterfaceIPConfigurationListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'NetworkInterfaceIPConfigurationElementType',
                        type: {
                            name: 'Composite',
                            className: 'NetworkInterfaceIPConfiguration'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkInterfaceLoadBalancerListResult = {
    required: false,
    serializedName: 'NetworkInterfaceLoadBalancerListResult',
    type: {
        name: 'Composite',
        className: 'NetworkInterfaceLoadBalancerListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'LoadBalancerElementType',
                        type: {
                            name: 'Composite',
                            className: 'LoadBalancer'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkSecurityGroupListResult = {
    required: false,
    serializedName: 'NetworkSecurityGroupListResult',
    type: {
        name: 'Composite',
        className: 'NetworkSecurityGroupListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'NetworkSecurityGroupElementType',
                        type: {
                            name: 'Composite',
                            className: 'NetworkSecurityGroup'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var SecurityRuleListResult = {
    required: false,
    serializedName: 'SecurityRuleListResult',
    type: {
        name: 'Composite',
        className: 'SecurityRuleListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SecurityRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'SecurityRule'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var NetworkWatcherListResult = {
    required: false,
    serializedName: 'NetworkWatcherListResult',
    type: {
        name: 'Composite',
        className: 'NetworkWatcherListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'NetworkWatcherElementType',
                        type: {
                            name: 'Composite',
                            className: 'NetworkWatcher'
                        }
                    }
                }
            }
        }
    }
};
var PacketCaptureListResult = {
    required: false,
    serializedName: 'PacketCaptureListResult',
    type: {
        name: 'Composite',
        className: 'PacketCaptureListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'PacketCaptureResultElementType',
                        type: {
                            name: 'Composite',
                            className: 'PacketCaptureResult'
                        }
                    }
                }
            }
        }
    }
};
var PublicIPAddressListResult = {
    required: false,
    serializedName: 'PublicIPAddressListResult',
    type: {
        name: 'Composite',
        className: 'PublicIPAddressListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'PublicIPAddressElementType',
                        type: {
                            name: 'Composite',
                            className: 'PublicIPAddress'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var RouteFilterListResult = {
    required: false,
    serializedName: 'RouteFilterListResult',
    type: {
        name: 'Composite',
        className: 'RouteFilterListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'RouteFilterElementType',
                        type: {
                            name: 'Composite',
                            className: 'RouteFilter'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var RouteFilterRuleListResult = {
    required: false,
    serializedName: 'RouteFilterRuleListResult',
    type: {
        name: 'Composite',
        className: 'RouteFilterRuleListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'RouteFilterRuleElementType',
                        type: {
                            name: 'Composite',
                            className: 'RouteFilterRule'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var RouteTableListResult = {
    required: false,
    serializedName: 'RouteTableListResult',
    type: {
        name: 'Composite',
        className: 'RouteTableListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'RouteTableElementType',
                        type: {
                            name: 'Composite',
                            className: 'RouteTable'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var RouteListResult = {
    required: false,
    serializedName: 'RouteListResult',
    type: {
        name: 'Composite',
        className: 'RouteListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'RouteElementType',
                        type: {
                            name: 'Composite',
                            className: 'Route'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var BgpServiceCommunityListResult = {
    required: false,
    serializedName: 'BgpServiceCommunityListResult',
    type: {
        name: 'Composite',
        className: 'BgpServiceCommunityListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'BgpServiceCommunityElementType',
                        type: {
                            name: 'Composite',
                            className: 'BgpServiceCommunity'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var UsagesListResult = {
    required: false,
    serializedName: 'UsagesListResult',
    type: {
        name: 'Composite',
        className: 'UsagesListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'UsageElementType',
                        type: {
                            name: 'Composite',
                            className: 'Usage'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkListResult = {
    required: false,
    serializedName: 'VirtualNetworkListResult',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'VirtualNetworkElementType',
                        type: {
                            name: 'Composite',
                            className: 'VirtualNetwork'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkListUsageResult = {
    required: false,
    serializedName: 'VirtualNetworkListUsageResult',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkListUsageResult',
        modelProperties: {
            value: {
                required: false,
                readOnly: true,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'VirtualNetworkUsageElementType',
                        type: {
                            name: 'Composite',
                            className: 'VirtualNetworkUsage'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var SubnetListResult = {
    required: false,
    serializedName: 'SubnetListResult',
    type: {
        name: 'Composite',
        className: 'SubnetListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'SubnetElementType',
                        type: {
                            name: 'Composite',
                            className: 'Subnet'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkPeeringListResult = {
    required: false,
    serializedName: 'VirtualNetworkPeeringListResult',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkPeeringListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'VirtualNetworkPeeringElementType',
                        type: {
                            name: 'Composite',
                            className: 'VirtualNetworkPeering'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkGatewayListResult = {
    required: false,
    serializedName: 'VirtualNetworkGatewayListResult',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkGatewayListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'VirtualNetworkGatewayElementType',
                        type: {
                            name: 'Composite',
                            className: 'VirtualNetworkGateway'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkGatewayListConnectionsResult = {
    required: false,
    serializedName: 'VirtualNetworkGatewayListConnectionsResult',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkGatewayListConnectionsResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'VirtualNetworkGatewayConnectionListEntityElementType',
                        type: {
                            name: 'Composite',
                            className: 'VirtualNetworkGatewayConnectionListEntity'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var VirtualNetworkGatewayConnectionListResult = {
    required: false,
    serializedName: 'VirtualNetworkGatewayConnectionListResult',
    type: {
        name: 'Composite',
        className: 'VirtualNetworkGatewayConnectionListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'VirtualNetworkGatewayConnectionElementType',
                        type: {
                            name: 'Composite',
                            className: 'VirtualNetworkGatewayConnection'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};
var LocalNetworkGatewayListResult = {
    required: false,
    serializedName: 'LocalNetworkGatewayListResult',
    type: {
        name: 'Composite',
        className: 'LocalNetworkGatewayListResult',
        modelProperties: {
            value: {
                required: false,
                serializedName: '',
                type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'LocalNetworkGatewayElementType',
                        type: {
                            name: 'Composite',
                            className: 'LocalNetworkGateway'
                        }
                    }
                }
            },
            nextLink: {
                required: false,
                readOnly: true,
                serializedName: 'nextLink',
                type: {
                    name: 'String'
                }
            }
        }
    }
};


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = msRest;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = msRestAzure;

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkManagementClient", function() { return NetworkManagementClient; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__models__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ms_rest_azure_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ms_rest_azure_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_ms_rest_azure_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__operations__ = __webpack_require__(5);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "NetworkManagementModels", function() { return __WEBPACK_IMPORTED_MODULE_0__models__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "NetworkManagementMappers", function() { return __WEBPACK_IMPORTED_MODULE_1__models_mappers__; });
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};





var WebResource = __WEBPACK_IMPORTED_MODULE_2_ms_rest_js__["WebResource"];
var packageName = "";
var packageVersion = "";
var NetworkManagementClient = /** @class */ (function (_super) {
    __extends(NetworkManagementClient, _super);
    /**
     * @class
     * Initializes a new instance of the NetworkManagementClient class.
     * @constructor
     *
     * @param {msRest.ServiceClientCredentials} credentials - Credentials needed for the client to connect to Azure.
     *
     * @param {string} subscriptionId - The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     *
     * @param {string} [baseUri] - The base URI of the service.
     *
     * @param {object} [options] - The parameter options
     *
     * @param {Array} [options.filters] - Filters to be added to the request pipeline
     *
     * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
     * {@link https://github.github.io/fetch/#Request Options doc}
     *
     * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
     *
     * @param {string} [options.acceptLanguage] - Gets or sets the preferred language for the response.
     *
     * @param {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param {boolean} [options.generateClientRequestId] - When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     */
    function NetworkManagementClient(credentials, subscriptionId, baseUri, options) {
        var _this = this;
        if (credentials === null || credentials === undefined) {
            throw new Error('\'credentials\' cannot be null.');
        }
        if (subscriptionId === null || subscriptionId === undefined) {
            throw new Error('\'subscriptionId\' cannot be null.');
        }
        if (!options)
            options = {};
        _this = _super.call(this, credentials, options) || this;
        _this.acceptLanguage = 'en-US';
        _this.longRunningOperationRetryTimeout = 30;
        _this.generateClientRequestId = true;
        _this.baseUri = baseUri;
        if (!_this.baseUri) {
            _this.baseUri = 'https://management.azure.com';
        }
        _this.credentials = credentials;
        _this.subscriptionId = subscriptionId;
        _this.addUserAgentInfo(packageName + "/" + packageVersion);
        if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
            _this.acceptLanguage = options.acceptLanguage;
        }
        if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
            _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
        }
        if (options.generateClientRequestId !== null && options.generateClientRequestId !== undefined) {
            _this.generateClientRequestId = options.generateClientRequestId;
        }
        _this.applicationGateways = new __WEBPACK_IMPORTED_MODULE_4__operations__["a" /* ApplicationGateways */](_this);
        _this.applicationSecurityGroups = new __WEBPACK_IMPORTED_MODULE_4__operations__["b" /* ApplicationSecurityGroups */](_this);
        _this.availableEndpointServices = new __WEBPACK_IMPORTED_MODULE_4__operations__["c" /* AvailableEndpointServices */](_this);
        _this.expressRouteCircuitAuthorizations = new __WEBPACK_IMPORTED_MODULE_4__operations__["f" /* ExpressRouteCircuitAuthorizations */](_this);
        _this.expressRouteCircuitPeerings = new __WEBPACK_IMPORTED_MODULE_4__operations__["g" /* ExpressRouteCircuitPeerings */](_this);
        _this.expressRouteCircuits = new __WEBPACK_IMPORTED_MODULE_4__operations__["h" /* ExpressRouteCircuits */](_this);
        _this.expressRouteServiceProviders = new __WEBPACK_IMPORTED_MODULE_4__operations__["i" /* ExpressRouteServiceProviders */](_this);
        _this.loadBalancers = new __WEBPACK_IMPORTED_MODULE_4__operations__["p" /* LoadBalancers */](_this);
        _this.loadBalancerBackendAddressPools = new __WEBPACK_IMPORTED_MODULE_4__operations__["k" /* LoadBalancerBackendAddressPools */](_this);
        _this.loadBalancerFrontendIPConfigurations = new __WEBPACK_IMPORTED_MODULE_4__operations__["l" /* LoadBalancerFrontendIPConfigurations */](_this);
        _this.inboundNatRules = new __WEBPACK_IMPORTED_MODULE_4__operations__["j" /* InboundNatRules */](_this);
        _this.loadBalancerLoadBalancingRules = new __WEBPACK_IMPORTED_MODULE_4__operations__["m" /* LoadBalancerLoadBalancingRules */](_this);
        _this.loadBalancerNetworkInterfaces = new __WEBPACK_IMPORTED_MODULE_4__operations__["n" /* LoadBalancerNetworkInterfaces */](_this);
        _this.loadBalancerProbes = new __WEBPACK_IMPORTED_MODULE_4__operations__["o" /* LoadBalancerProbes */](_this);
        _this.networkInterfaces = new __WEBPACK_IMPORTED_MODULE_4__operations__["t" /* NetworkInterfaces */](_this);
        _this.networkInterfaceIPConfigurations = new __WEBPACK_IMPORTED_MODULE_4__operations__["r" /* NetworkInterfaceIPConfigurations */](_this);
        _this.networkInterfaceLoadBalancers = new __WEBPACK_IMPORTED_MODULE_4__operations__["s" /* NetworkInterfaceLoadBalancers */](_this);
        _this.networkSecurityGroups = new __WEBPACK_IMPORTED_MODULE_4__operations__["u" /* NetworkSecurityGroups */](_this);
        _this.securityRules = new __WEBPACK_IMPORTED_MODULE_4__operations__["C" /* SecurityRules */](_this);
        _this.defaultSecurityRules = new __WEBPACK_IMPORTED_MODULE_4__operations__["e" /* DefaultSecurityRules */](_this);
        _this.networkWatchers = new __WEBPACK_IMPORTED_MODULE_4__operations__["v" /* NetworkWatchers */](_this);
        _this.packetCaptures = new __WEBPACK_IMPORTED_MODULE_4__operations__["w" /* PacketCaptures */](_this);
        _this.publicIPAddresses = new __WEBPACK_IMPORTED_MODULE_4__operations__["x" /* PublicIPAddresses */](_this);
        _this.routeFilters = new __WEBPACK_IMPORTED_MODULE_4__operations__["z" /* RouteFilters */](_this);
        _this.routeFilterRules = new __WEBPACK_IMPORTED_MODULE_4__operations__["y" /* RouteFilterRules */](_this);
        _this.routeTables = new __WEBPACK_IMPORTED_MODULE_4__operations__["A" /* RouteTables */](_this);
        _this.routes = new __WEBPACK_IMPORTED_MODULE_4__operations__["B" /* Routes */](_this);
        _this.bgpServiceCommunities = new __WEBPACK_IMPORTED_MODULE_4__operations__["d" /* BgpServiceCommunities */](_this);
        _this.usages = new __WEBPACK_IMPORTED_MODULE_4__operations__["E" /* Usages */](_this);
        _this.virtualNetworks = new __WEBPACK_IMPORTED_MODULE_4__operations__["I" /* VirtualNetworks */](_this);
        _this.subnets = new __WEBPACK_IMPORTED_MODULE_4__operations__["D" /* Subnets */](_this);
        _this.virtualNetworkPeerings = new __WEBPACK_IMPORTED_MODULE_4__operations__["H" /* VirtualNetworkPeerings */](_this);
        _this.virtualNetworkGateways = new __WEBPACK_IMPORTED_MODULE_4__operations__["G" /* VirtualNetworkGateways */](_this);
        _this.virtualNetworkGatewayConnections = new __WEBPACK_IMPORTED_MODULE_4__operations__["F" /* VirtualNetworkGatewayConnections */](_this);
        _this.localNetworkGateways = new __WEBPACK_IMPORTED_MODULE_4__operations__["q" /* LocalNetworkGateways */](_this);
        _this.serializer = new __WEBPACK_IMPORTED_MODULE_2_ms_rest_js__["Serializer"](__WEBPACK_IMPORTED_MODULE_1__models_mappers__);
        return _this;
    }
    // methods on the client.
    /**
     * Checks whether a domain name in the cloudapp.azure.com zone is available for
     * use.
     *
     * @param {string} location The location of the domain name.
     *
     * @param {string} domainNameLabel The domain name to be verified. It must
     * conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkManagementClient.prototype.checkDnsNameAvailabilityWithHttpOperationResponse = function (location, domainNameLabel, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (location === null || location === undefined || typeof location.valueOf() !== 'string') {
                                throw new Error('location cannot be null or undefined and it must be of type string.');
                            }
                            if (domainNameLabel === null || domainNameLabel === undefined || typeof domainNameLabel.valueOf() !== 'string') {
                                throw new Error('domainNameLabel cannot be null or undefined and it must be of type string.');
                            }
                            if (this.subscriptionId === null || this.subscriptionId === undefined || typeof this.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability';
                        requestUrl = requestUrl.replace('{location}', encodeURIComponent(location));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('domainNameLabel=' + encodeURIComponent(domainNameLabel));
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_2_ms_rest_js__["generateUuid"]();
                        }
                        if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_2_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_2_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_2_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["DnsNameAvailabilityResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_2_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_2_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_2_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    NetworkManagementClient.prototype.checkDnsNameAvailability = function (location, domainNameLabel, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.checkDnsNameAvailabilityWithHttpOperationResponse(location, domainNameLabel, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_2_ms_rest_js__["promiseToCallback"](this.checkDnsNameAvailabilityWithHttpOperationResponse(location, domainNameLabel, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return NetworkManagementClient;
}(__WEBPACK_IMPORTED_MODULE_3_ms_rest_azure_js__["AzureServiceClient"]));



/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransportProtocol", function() { return TransportProtocol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IPAllocationMethod", function() { return IPAllocationMethod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IPVersion", function() { return IPVersion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityRuleProtocol", function() { return SecurityRuleProtocol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityRuleAccess", function() { return SecurityRuleAccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityRuleDirection", function() { return SecurityRuleDirection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteNextHopType", function() { return RouteNextHopType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PublicIPAddressSkuName", function() { return PublicIPAddressSkuName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayProtocol", function() { return ApplicationGatewayProtocol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayCookieBasedAffinity", function() { return ApplicationGatewayCookieBasedAffinity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayBackendHealthServerHealth", function() { return ApplicationGatewayBackendHealthServerHealth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewaySkuName", function() { return ApplicationGatewaySkuName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayTier", function() { return ApplicationGatewayTier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewaySslProtocol", function() { return ApplicationGatewaySslProtocol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewaySslPolicyType", function() { return ApplicationGatewaySslPolicyType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewaySslPolicyName", function() { return ApplicationGatewaySslPolicyName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewaySslCipherSuite", function() { return ApplicationGatewaySslCipherSuite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayRequestRoutingRuleType", function() { return ApplicationGatewayRequestRoutingRuleType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayRedirectType", function() { return ApplicationGatewayRedirectType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayOperationalState", function() { return ApplicationGatewayOperationalState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationGatewayFirewallMode", function() { return ApplicationGatewayFirewallMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthorizationUseStatus", function() { return AuthorizationUseStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitPeeringAdvertisedPublicPrefixState", function() { return ExpressRouteCircuitPeeringAdvertisedPublicPrefixState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Access", function() { return Access; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitPeeringType", function() { return ExpressRouteCircuitPeeringType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitPeeringState", function() { return ExpressRouteCircuitPeeringState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitSkuTier", function() { return ExpressRouteCircuitSkuTier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressRouteCircuitSkuFamily", function() { return ExpressRouteCircuitSkuFamily; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceProviderProvisioningState", function() { return ServiceProviderProvisioningState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadBalancerSkuName", function() { return LoadBalancerSkuName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadDistribution", function() { return LoadDistribution; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProbeProtocol", function() { return ProbeProtocol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkOperationStatus", function() { return NetworkOperationStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EffectiveSecurityRuleProtocol", function() { return EffectiveSecurityRuleProtocol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EffectiveRouteSource", function() { return EffectiveRouteSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EffectiveRouteState", function() { return EffectiveRouteState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProvisioningState", function() { return ProvisioningState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AssociationType", function() { return AssociationType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Direction", function() { return Direction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Protocol", function() { return Protocol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NextHopType", function() { return NextHopType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PcProtocol", function() { return PcProtocol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PcStatus", function() { return PcStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PcError", function() { return PcError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Origin", function() { return Origin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Severity", function() { return Severity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IssueType", function() { return IssueType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionStatus", function() { return ConnectionStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkPeeringState", function() { return VirtualNetworkPeeringState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewayType", function() { return VirtualNetworkGatewayType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VpnType", function() { return VpnType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewaySkuName", function() { return VirtualNetworkGatewaySkuName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewaySkuTier", function() { return VirtualNetworkGatewaySkuTier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VpnClientProtocol", function() { return VpnClientProtocol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BgpPeerState", function() { return BgpPeerState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProcessorArchitecture", function() { return ProcessorArchitecture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthenticationMethod", function() { return AuthenticationMethod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewayConnectionStatus", function() { return VirtualNetworkGatewayConnectionStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualNetworkGatewayConnectionType", function() { return VirtualNetworkGatewayConnectionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IpsecEncryption", function() { return IpsecEncryption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IpsecIntegrity", function() { return IpsecIntegrity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IkeEncryption", function() { return IkeEncryption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IkeIntegrity", function() { return IkeIntegrity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DhGroup", function() { return DhGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PfsGroup", function() { return PfsGroup; });
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
/**
 * Defines values for TransportProtocol.
 * Possible values include: 'Udp', 'Tcp', 'All'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TransportProtocol =
 * <TransportProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var TransportProtocol;
(function (TransportProtocol) {
    TransportProtocol["Udp"] = "Udp";
    TransportProtocol["Tcp"] = "Tcp";
    TransportProtocol["All"] = "All";
})(TransportProtocol || (TransportProtocol = {}));
/**
 * Defines values for IPAllocationMethod.
 * Possible values include: 'Static', 'Dynamic'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IPAllocationMethod =
 * <IPAllocationMethod>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var IPAllocationMethod;
(function (IPAllocationMethod) {
    IPAllocationMethod["Static"] = "Static";
    IPAllocationMethod["Dynamic"] = "Dynamic";
})(IPAllocationMethod || (IPAllocationMethod = {}));
/**
 * Defines values for IPVersion.
 * Possible values include: 'IPv4', 'IPv6'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IPVersion = <IPVersion>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var IPVersion;
(function (IPVersion) {
    IPVersion["IPv4"] = "IPv4";
    IPVersion["IPv6"] = "IPv6";
})(IPVersion || (IPVersion = {}));
/**
 * Defines values for SecurityRuleProtocol.
 * Possible values include: 'Tcp', 'Udp', '*'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SecurityRuleProtocol =
 * <SecurityRuleProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var SecurityRuleProtocol;
(function (SecurityRuleProtocol) {
    SecurityRuleProtocol["Tcp"] = "Tcp";
    SecurityRuleProtocol["Udp"] = "Udp";
    SecurityRuleProtocol["Asterisk"] = "*";
})(SecurityRuleProtocol || (SecurityRuleProtocol = {}));
/**
 * Defines values for SecurityRuleAccess.
 * Possible values include: 'Allow', 'Deny'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SecurityRuleAccess =
 * <SecurityRuleAccess>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var SecurityRuleAccess;
(function (SecurityRuleAccess) {
    SecurityRuleAccess["Allow"] = "Allow";
    SecurityRuleAccess["Deny"] = "Deny";
})(SecurityRuleAccess || (SecurityRuleAccess = {}));
/**
 * Defines values for SecurityRuleDirection.
 * Possible values include: 'Inbound', 'Outbound'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SecurityRuleDirection =
 * <SecurityRuleDirection>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var SecurityRuleDirection;
(function (SecurityRuleDirection) {
    SecurityRuleDirection["Inbound"] = "Inbound";
    SecurityRuleDirection["Outbound"] = "Outbound";
})(SecurityRuleDirection || (SecurityRuleDirection = {}));
/**
 * Defines values for RouteNextHopType.
 * Possible values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',
 * 'VirtualAppliance', 'None'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: RouteNextHopType =
 * <RouteNextHopType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var RouteNextHopType;
(function (RouteNextHopType) {
    RouteNextHopType["VirtualNetworkGateway"] = "VirtualNetworkGateway";
    RouteNextHopType["VnetLocal"] = "VnetLocal";
    RouteNextHopType["Internet"] = "Internet";
    RouteNextHopType["VirtualAppliance"] = "VirtualAppliance";
    RouteNextHopType["None"] = "None";
})(RouteNextHopType || (RouteNextHopType = {}));
/**
 * Defines values for PublicIPAddressSkuName.
 * Possible values include: 'Basic', 'Standard'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PublicIPAddressSkuName =
 * <PublicIPAddressSkuName>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var PublicIPAddressSkuName;
(function (PublicIPAddressSkuName) {
    PublicIPAddressSkuName["Basic"] = "Basic";
    PublicIPAddressSkuName["Standard"] = "Standard";
})(PublicIPAddressSkuName || (PublicIPAddressSkuName = {}));
/**
 * Defines values for ApplicationGatewayProtocol.
 * Possible values include: 'Http', 'Https'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewayProtocol =
 * <ApplicationGatewayProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewayProtocol;
(function (ApplicationGatewayProtocol) {
    ApplicationGatewayProtocol["Http"] = "Http";
    ApplicationGatewayProtocol["Https"] = "Https";
})(ApplicationGatewayProtocol || (ApplicationGatewayProtocol = {}));
/**
 * Defines values for ApplicationGatewayCookieBasedAffinity.
 * Possible values include: 'Enabled', 'Disabled'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewayCookieBasedAffinity =
 * <ApplicationGatewayCookieBasedAffinity>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewayCookieBasedAffinity;
(function (ApplicationGatewayCookieBasedAffinity) {
    ApplicationGatewayCookieBasedAffinity["Enabled"] = "Enabled";
    ApplicationGatewayCookieBasedAffinity["Disabled"] = "Disabled";
})(ApplicationGatewayCookieBasedAffinity || (ApplicationGatewayCookieBasedAffinity = {}));
/**
 * Defines values for ApplicationGatewayBackendHealthServerHealth.
 * Possible values include: 'Unknown', 'Up', 'Down', 'Partial', 'Draining'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewayBackendHealthServerHealth =
 * <ApplicationGatewayBackendHealthServerHealth>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewayBackendHealthServerHealth;
(function (ApplicationGatewayBackendHealthServerHealth) {
    ApplicationGatewayBackendHealthServerHealth["Unknown"] = "Unknown";
    ApplicationGatewayBackendHealthServerHealth["Up"] = "Up";
    ApplicationGatewayBackendHealthServerHealth["Down"] = "Down";
    ApplicationGatewayBackendHealthServerHealth["Partial"] = "Partial";
    ApplicationGatewayBackendHealthServerHealth["Draining"] = "Draining";
})(ApplicationGatewayBackendHealthServerHealth || (ApplicationGatewayBackendHealthServerHealth = {}));
/**
 * Defines values for ApplicationGatewaySkuName.
 * Possible values include: 'Standard_Small', 'Standard_Medium',
 * 'Standard_Large', 'WAF_Medium', 'WAF_Large'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewaySkuName =
 * <ApplicationGatewaySkuName>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewaySkuName;
(function (ApplicationGatewaySkuName) {
    ApplicationGatewaySkuName["StandardSmall"] = "Standard_Small";
    ApplicationGatewaySkuName["StandardMedium"] = "Standard_Medium";
    ApplicationGatewaySkuName["StandardLarge"] = "Standard_Large";
    ApplicationGatewaySkuName["WAFMedium"] = "WAF_Medium";
    ApplicationGatewaySkuName["WAFLarge"] = "WAF_Large";
})(ApplicationGatewaySkuName || (ApplicationGatewaySkuName = {}));
/**
 * Defines values for ApplicationGatewayTier.
 * Possible values include: 'Standard', 'WAF'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewayTier =
 * <ApplicationGatewayTier>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewayTier;
(function (ApplicationGatewayTier) {
    ApplicationGatewayTier["Standard"] = "Standard";
    ApplicationGatewayTier["WAF"] = "WAF";
})(ApplicationGatewayTier || (ApplicationGatewayTier = {}));
/**
 * Defines values for ApplicationGatewaySslProtocol.
 * Possible values include: 'TLSv1_0', 'TLSv1_1', 'TLSv1_2'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewaySslProtocol =
 * <ApplicationGatewaySslProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewaySslProtocol;
(function (ApplicationGatewaySslProtocol) {
    ApplicationGatewaySslProtocol["TLSv10"] = "TLSv1_0";
    ApplicationGatewaySslProtocol["TLSv11"] = "TLSv1_1";
    ApplicationGatewaySslProtocol["TLSv12"] = "TLSv1_2";
})(ApplicationGatewaySslProtocol || (ApplicationGatewaySslProtocol = {}));
/**
 * Defines values for ApplicationGatewaySslPolicyType.
 * Possible values include: 'Predefined', 'Custom'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewaySslPolicyType =
 * <ApplicationGatewaySslPolicyType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewaySslPolicyType;
(function (ApplicationGatewaySslPolicyType) {
    ApplicationGatewaySslPolicyType["Predefined"] = "Predefined";
    ApplicationGatewaySslPolicyType["Custom"] = "Custom";
})(ApplicationGatewaySslPolicyType || (ApplicationGatewaySslPolicyType = {}));
/**
 * Defines values for ApplicationGatewaySslPolicyName.
 * Possible values include: 'AppGwSslPolicy20150501', 'AppGwSslPolicy20170401',
 * 'AppGwSslPolicy20170401S'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewaySslPolicyName =
 * <ApplicationGatewaySslPolicyName>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewaySslPolicyName;
(function (ApplicationGatewaySslPolicyName) {
    ApplicationGatewaySslPolicyName["AppGwSslPolicy20150501"] = "AppGwSslPolicy20150501";
    ApplicationGatewaySslPolicyName["AppGwSslPolicy20170401"] = "AppGwSslPolicy20170401";
    ApplicationGatewaySslPolicyName["AppGwSslPolicy20170401S"] = "AppGwSslPolicy20170401S";
})(ApplicationGatewaySslPolicyName || (ApplicationGatewaySslPolicyName = {}));
/**
 * Defines values for ApplicationGatewaySslCipherSuite.
 * Possible values include: 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
 * 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
 * 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA', 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA',
 * 'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',
 * 'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256', 'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',
 * 'TLS_DHE_RSA_WITH_AES_128_CBC_SHA', 'TLS_RSA_WITH_AES_256_GCM_SHA384',
 * 'TLS_RSA_WITH_AES_128_GCM_SHA256', 'TLS_RSA_WITH_AES_256_CBC_SHA256',
 * 'TLS_RSA_WITH_AES_128_CBC_SHA256', 'TLS_RSA_WITH_AES_256_CBC_SHA',
 * 'TLS_RSA_WITH_AES_128_CBC_SHA', 'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
 * 'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',
 * 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
 * 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256',
 * 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',
 * 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA',
 * 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256',
 * 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256', 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA',
 * 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA', 'TLS_RSA_WITH_3DES_EDE_CBC_SHA'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewaySslCipherSuite =
 * <ApplicationGatewaySslCipherSuite>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewaySslCipherSuite;
(function (ApplicationGatewaySslCipherSuite) {
    ApplicationGatewaySslCipherSuite["TLSECDHERSAWITHAES256CBCSHA384"] = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
    ApplicationGatewaySslCipherSuite["TLSECDHERSAWITHAES128CBCSHA256"] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
    ApplicationGatewaySslCipherSuite["TLSECDHERSAWITHAES256CBCSHA"] = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
    ApplicationGatewaySslCipherSuite["TLSECDHERSAWITHAES128CBCSHA"] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
    ApplicationGatewaySslCipherSuite["TLSDHERSAWITHAES256GCMSHA384"] = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384";
    ApplicationGatewaySslCipherSuite["TLSDHERSAWITHAES128GCMSHA256"] = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256";
    ApplicationGatewaySslCipherSuite["TLSDHERSAWITHAES256CBCSHA"] = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";
    ApplicationGatewaySslCipherSuite["TLSDHERSAWITHAES128CBCSHA"] = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";
    ApplicationGatewaySslCipherSuite["TLSRSAWITHAES256GCMSHA384"] = "TLS_RSA_WITH_AES_256_GCM_SHA384";
    ApplicationGatewaySslCipherSuite["TLSRSAWITHAES128GCMSHA256"] = "TLS_RSA_WITH_AES_128_GCM_SHA256";
    ApplicationGatewaySslCipherSuite["TLSRSAWITHAES256CBCSHA256"] = "TLS_RSA_WITH_AES_256_CBC_SHA256";
    ApplicationGatewaySslCipherSuite["TLSRSAWITHAES128CBCSHA256"] = "TLS_RSA_WITH_AES_128_CBC_SHA256";
    ApplicationGatewaySslCipherSuite["TLSRSAWITHAES256CBCSHA"] = "TLS_RSA_WITH_AES_256_CBC_SHA";
    ApplicationGatewaySslCipherSuite["TLSRSAWITHAES128CBCSHA"] = "TLS_RSA_WITH_AES_128_CBC_SHA";
    ApplicationGatewaySslCipherSuite["TLSECDHEECDSAWITHAES256GCMSHA384"] = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
    ApplicationGatewaySslCipherSuite["TLSECDHEECDSAWITHAES128GCMSHA256"] = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
    ApplicationGatewaySslCipherSuite["TLSECDHEECDSAWITHAES256CBCSHA384"] = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384";
    ApplicationGatewaySslCipherSuite["TLSECDHEECDSAWITHAES128CBCSHA256"] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
    ApplicationGatewaySslCipherSuite["TLSECDHEECDSAWITHAES256CBCSHA"] = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA";
    ApplicationGatewaySslCipherSuite["TLSECDHEECDSAWITHAES128CBCSHA"] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";
    ApplicationGatewaySslCipherSuite["TLSDHEDSSWITHAES256CBCSHA256"] = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256";
    ApplicationGatewaySslCipherSuite["TLSDHEDSSWITHAES128CBCSHA256"] = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256";
    ApplicationGatewaySslCipherSuite["TLSDHEDSSWITHAES256CBCSHA"] = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA";
    ApplicationGatewaySslCipherSuite["TLSDHEDSSWITHAES128CBCSHA"] = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA";
    ApplicationGatewaySslCipherSuite["TLSRSAWITH3DESEDECBCSHA"] = "TLS_RSA_WITH_3DES_EDE_CBC_SHA";
})(ApplicationGatewaySslCipherSuite || (ApplicationGatewaySslCipherSuite = {}));
/**
 * Defines values for ApplicationGatewayRequestRoutingRuleType.
 * Possible values include: 'Basic', 'PathBasedRouting'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewayRequestRoutingRuleType =
 * <ApplicationGatewayRequestRoutingRuleType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewayRequestRoutingRuleType;
(function (ApplicationGatewayRequestRoutingRuleType) {
    ApplicationGatewayRequestRoutingRuleType["Basic"] = "Basic";
    ApplicationGatewayRequestRoutingRuleType["PathBasedRouting"] = "PathBasedRouting";
})(ApplicationGatewayRequestRoutingRuleType || (ApplicationGatewayRequestRoutingRuleType = {}));
/**
 * Defines values for ApplicationGatewayRedirectType.
 * Possible values include: 'Permanent', 'Found', 'SeeOther', 'Temporary'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewayRedirectType =
 * <ApplicationGatewayRedirectType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewayRedirectType;
(function (ApplicationGatewayRedirectType) {
    ApplicationGatewayRedirectType["Permanent"] = "Permanent";
    ApplicationGatewayRedirectType["Found"] = "Found";
    ApplicationGatewayRedirectType["SeeOther"] = "SeeOther";
    ApplicationGatewayRedirectType["Temporary"] = "Temporary";
})(ApplicationGatewayRedirectType || (ApplicationGatewayRedirectType = {}));
/**
 * Defines values for ApplicationGatewayOperationalState.
 * Possible values include: 'Stopped', 'Starting', 'Running', 'Stopping'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewayOperationalState =
 * <ApplicationGatewayOperationalState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewayOperationalState;
(function (ApplicationGatewayOperationalState) {
    ApplicationGatewayOperationalState["Stopped"] = "Stopped";
    ApplicationGatewayOperationalState["Starting"] = "Starting";
    ApplicationGatewayOperationalState["Running"] = "Running";
    ApplicationGatewayOperationalState["Stopping"] = "Stopping";
})(ApplicationGatewayOperationalState || (ApplicationGatewayOperationalState = {}));
/**
 * Defines values for ApplicationGatewayFirewallMode.
 * Possible values include: 'Detection', 'Prevention'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationGatewayFirewallMode =
 * <ApplicationGatewayFirewallMode>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ApplicationGatewayFirewallMode;
(function (ApplicationGatewayFirewallMode) {
    ApplicationGatewayFirewallMode["Detection"] = "Detection";
    ApplicationGatewayFirewallMode["Prevention"] = "Prevention";
})(ApplicationGatewayFirewallMode || (ApplicationGatewayFirewallMode = {}));
/**
 * Defines values for AuthorizationUseStatus.
 * Possible values include: 'Available', 'InUse'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: AuthorizationUseStatus =
 * <AuthorizationUseStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var AuthorizationUseStatus;
(function (AuthorizationUseStatus) {
    AuthorizationUseStatus["Available"] = "Available";
    AuthorizationUseStatus["InUse"] = "InUse";
})(AuthorizationUseStatus || (AuthorizationUseStatus = {}));
/**
 * Defines values for ExpressRouteCircuitPeeringAdvertisedPublicPrefixState.
 * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
 * 'ValidationNeeded'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ExpressRouteCircuitPeeringAdvertisedPublicPrefixState =
 * <ExpressRouteCircuitPeeringAdvertisedPublicPrefixState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ExpressRouteCircuitPeeringAdvertisedPublicPrefixState;
(function (ExpressRouteCircuitPeeringAdvertisedPublicPrefixState) {
    ExpressRouteCircuitPeeringAdvertisedPublicPrefixState["NotConfigured"] = "NotConfigured";
    ExpressRouteCircuitPeeringAdvertisedPublicPrefixState["Configuring"] = "Configuring";
    ExpressRouteCircuitPeeringAdvertisedPublicPrefixState["Configured"] = "Configured";
    ExpressRouteCircuitPeeringAdvertisedPublicPrefixState["ValidationNeeded"] = "ValidationNeeded";
})(ExpressRouteCircuitPeeringAdvertisedPublicPrefixState || (ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = {}));
/**
 * Defines values for Access.
 * Possible values include: 'Allow', 'Deny'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Access = <Access>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Access;
(function (Access) {
    Access["Allow"] = "Allow";
    Access["Deny"] = "Deny";
})(Access || (Access = {}));
/**
 * Defines values for ExpressRouteCircuitPeeringType.
 * Possible values include: 'AzurePublicPeering', 'AzurePrivatePeering',
 * 'MicrosoftPeering'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ExpressRouteCircuitPeeringType =
 * <ExpressRouteCircuitPeeringType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ExpressRouteCircuitPeeringType;
(function (ExpressRouteCircuitPeeringType) {
    ExpressRouteCircuitPeeringType["AzurePublicPeering"] = "AzurePublicPeering";
    ExpressRouteCircuitPeeringType["AzurePrivatePeering"] = "AzurePrivatePeering";
    ExpressRouteCircuitPeeringType["MicrosoftPeering"] = "MicrosoftPeering";
})(ExpressRouteCircuitPeeringType || (ExpressRouteCircuitPeeringType = {}));
/**
 * Defines values for ExpressRouteCircuitPeeringState.
 * Possible values include: 'Disabled', 'Enabled'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ExpressRouteCircuitPeeringState =
 * <ExpressRouteCircuitPeeringState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ExpressRouteCircuitPeeringState;
(function (ExpressRouteCircuitPeeringState) {
    ExpressRouteCircuitPeeringState["Disabled"] = "Disabled";
    ExpressRouteCircuitPeeringState["Enabled"] = "Enabled";
})(ExpressRouteCircuitPeeringState || (ExpressRouteCircuitPeeringState = {}));
/**
 * Defines values for ExpressRouteCircuitSkuTier.
 * Possible values include: 'Standard', 'Premium'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ExpressRouteCircuitSkuTier =
 * <ExpressRouteCircuitSkuTier>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ExpressRouteCircuitSkuTier;
(function (ExpressRouteCircuitSkuTier) {
    ExpressRouteCircuitSkuTier["Standard"] = "Standard";
    ExpressRouteCircuitSkuTier["Premium"] = "Premium";
})(ExpressRouteCircuitSkuTier || (ExpressRouteCircuitSkuTier = {}));
/**
 * Defines values for ExpressRouteCircuitSkuFamily.
 * Possible values include: 'UnlimitedData', 'MeteredData'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ExpressRouteCircuitSkuFamily =
 * <ExpressRouteCircuitSkuFamily>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ExpressRouteCircuitSkuFamily;
(function (ExpressRouteCircuitSkuFamily) {
    ExpressRouteCircuitSkuFamily["UnlimitedData"] = "UnlimitedData";
    ExpressRouteCircuitSkuFamily["MeteredData"] = "MeteredData";
})(ExpressRouteCircuitSkuFamily || (ExpressRouteCircuitSkuFamily = {}));
/**
 * Defines values for ServiceProviderProvisioningState.
 * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
 * 'Deprovisioning'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ServiceProviderProvisioningState =
 * <ServiceProviderProvisioningState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ServiceProviderProvisioningState;
(function (ServiceProviderProvisioningState) {
    ServiceProviderProvisioningState["NotProvisioned"] = "NotProvisioned";
    ServiceProviderProvisioningState["Provisioning"] = "Provisioning";
    ServiceProviderProvisioningState["Provisioned"] = "Provisioned";
    ServiceProviderProvisioningState["Deprovisioning"] = "Deprovisioning";
})(ServiceProviderProvisioningState || (ServiceProviderProvisioningState = {}));
/**
 * Defines values for LoadBalancerSkuName.
 * Possible values include: 'Basic', 'Standard'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: LoadBalancerSkuName =
 * <LoadBalancerSkuName>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var LoadBalancerSkuName;
(function (LoadBalancerSkuName) {
    LoadBalancerSkuName["Basic"] = "Basic";
    LoadBalancerSkuName["Standard"] = "Standard";
})(LoadBalancerSkuName || (LoadBalancerSkuName = {}));
/**
 * Defines values for LoadDistribution.
 * Possible values include: 'Default', 'SourceIP', 'SourceIPProtocol'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: LoadDistribution =
 * <LoadDistribution>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var LoadDistribution;
(function (LoadDistribution) {
    LoadDistribution["Default"] = "Default";
    LoadDistribution["SourceIP"] = "SourceIP";
    LoadDistribution["SourceIPProtocol"] = "SourceIPProtocol";
})(LoadDistribution || (LoadDistribution = {}));
/**
 * Defines values for ProbeProtocol.
 * Possible values include: 'Http', 'Tcp'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ProbeProtocol =
 * <ProbeProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ProbeProtocol;
(function (ProbeProtocol) {
    ProbeProtocol["Http"] = "Http";
    ProbeProtocol["Tcp"] = "Tcp";
})(ProbeProtocol || (ProbeProtocol = {}));
/**
 * Defines values for NetworkOperationStatus.
 * Possible values include: 'InProgress', 'Succeeded', 'Failed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: NetworkOperationStatus =
 * <NetworkOperationStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var NetworkOperationStatus;
(function (NetworkOperationStatus) {
    NetworkOperationStatus["InProgress"] = "InProgress";
    NetworkOperationStatus["Succeeded"] = "Succeeded";
    NetworkOperationStatus["Failed"] = "Failed";
})(NetworkOperationStatus || (NetworkOperationStatus = {}));
/**
 * Defines values for EffectiveSecurityRuleProtocol.
 * Possible values include: 'Tcp', 'Udp', 'All'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: EffectiveSecurityRuleProtocol =
 * <EffectiveSecurityRuleProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var EffectiveSecurityRuleProtocol;
(function (EffectiveSecurityRuleProtocol) {
    EffectiveSecurityRuleProtocol["Tcp"] = "Tcp";
    EffectiveSecurityRuleProtocol["Udp"] = "Udp";
    EffectiveSecurityRuleProtocol["All"] = "All";
})(EffectiveSecurityRuleProtocol || (EffectiveSecurityRuleProtocol = {}));
/**
 * Defines values for EffectiveRouteSource.
 * Possible values include: 'Unknown', 'User', 'VirtualNetworkGateway',
 * 'Default'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: EffectiveRouteSource =
 * <EffectiveRouteSource>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var EffectiveRouteSource;
(function (EffectiveRouteSource) {
    EffectiveRouteSource["Unknown"] = "Unknown";
    EffectiveRouteSource["User"] = "User";
    EffectiveRouteSource["VirtualNetworkGateway"] = "VirtualNetworkGateway";
    EffectiveRouteSource["Default"] = "Default";
})(EffectiveRouteSource || (EffectiveRouteSource = {}));
/**
 * Defines values for EffectiveRouteState.
 * Possible values include: 'Active', 'Invalid'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: EffectiveRouteState =
 * <EffectiveRouteState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var EffectiveRouteState;
(function (EffectiveRouteState) {
    EffectiveRouteState["Active"] = "Active";
    EffectiveRouteState["Invalid"] = "Invalid";
})(EffectiveRouteState || (EffectiveRouteState = {}));
/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ProvisioningState =
 * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ProvisioningState;
(function (ProvisioningState) {
    ProvisioningState["Succeeded"] = "Succeeded";
    ProvisioningState["Updating"] = "Updating";
    ProvisioningState["Deleting"] = "Deleting";
    ProvisioningState["Failed"] = "Failed";
})(ProvisioningState || (ProvisioningState = {}));
/**
 * Defines values for AssociationType.
 * Possible values include: 'Associated', 'Contains'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: AssociationType =
 * <AssociationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var AssociationType;
(function (AssociationType) {
    AssociationType["Associated"] = "Associated";
    AssociationType["Contains"] = "Contains";
})(AssociationType || (AssociationType = {}));
/**
 * Defines values for Direction.
 * Possible values include: 'Inbound', 'Outbound'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Direction = <Direction>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Direction;
(function (Direction) {
    Direction["Inbound"] = "Inbound";
    Direction["Outbound"] = "Outbound";
})(Direction || (Direction = {}));
/**
 * Defines values for Protocol.
 * Possible values include: 'TCP', 'UDP'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Protocol = <Protocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Protocol;
(function (Protocol) {
    Protocol["TCP"] = "TCP";
    Protocol["UDP"] = "UDP";
})(Protocol || (Protocol = {}));
/**
 * Defines values for NextHopType.
 * Possible values include: 'Internet', 'VirtualAppliance',
 * 'VirtualNetworkGateway', 'VnetLocal', 'HyperNetGateway', 'None'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: NextHopType =
 * <NextHopType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var NextHopType;
(function (NextHopType) {
    NextHopType["Internet"] = "Internet";
    NextHopType["VirtualAppliance"] = "VirtualAppliance";
    NextHopType["VirtualNetworkGateway"] = "VirtualNetworkGateway";
    NextHopType["VnetLocal"] = "VnetLocal";
    NextHopType["HyperNetGateway"] = "HyperNetGateway";
    NextHopType["None"] = "None";
})(NextHopType || (NextHopType = {}));
/**
 * Defines values for PcProtocol.
 * Possible values include: 'TCP', 'UDP', 'Any'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PcProtocol = <PcProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var PcProtocol;
(function (PcProtocol) {
    PcProtocol["TCP"] = "TCP";
    PcProtocol["UDP"] = "UDP";
    PcProtocol["Any"] = "Any";
})(PcProtocol || (PcProtocol = {}));
/**
 * Defines values for PcStatus.
 * Possible values include: 'NotStarted', 'Running', 'Stopped', 'Error',
 * 'Unknown'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PcStatus = <PcStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var PcStatus;
(function (PcStatus) {
    PcStatus["NotStarted"] = "NotStarted";
    PcStatus["Running"] = "Running";
    PcStatus["Stopped"] = "Stopped";
    PcStatus["Error"] = "Error";
    PcStatus["Unknown"] = "Unknown";
})(PcStatus || (PcStatus = {}));
/**
 * Defines values for PcError.
 * Possible values include: 'InternalError', 'AgentStopped', 'CaptureFailed',
 * 'LocalFileFailed', 'StorageFailed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PcError = <PcError>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var PcError;
(function (PcError) {
    PcError["InternalError"] = "InternalError";
    PcError["AgentStopped"] = "AgentStopped";
    PcError["CaptureFailed"] = "CaptureFailed";
    PcError["LocalFileFailed"] = "LocalFileFailed";
    PcError["StorageFailed"] = "StorageFailed";
})(PcError || (PcError = {}));
/**
 * Defines values for Origin.
 * Possible values include: 'Local', 'Inbound', 'Outbound'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Origin = <Origin>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Origin;
(function (Origin) {
    Origin["Local"] = "Local";
    Origin["Inbound"] = "Inbound";
    Origin["Outbound"] = "Outbound";
})(Origin || (Origin = {}));
/**
 * Defines values for Severity.
 * Possible values include: 'Error', 'Warning'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Severity = <Severity>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var Severity;
(function (Severity) {
    Severity["Error"] = "Error";
    Severity["Warning"] = "Warning";
})(Severity || (Severity = {}));
/**
 * Defines values for IssueType.
 * Possible values include: 'Unknown', 'AgentStopped', 'GuestFirewall',
 * 'DnsResolution', 'SocketBind', 'NetworkSecurityRule', 'UserDefinedRoute',
 * 'PortThrottled', 'Platform'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IssueType = <IssueType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var IssueType;
(function (IssueType) {
    IssueType["Unknown"] = "Unknown";
    IssueType["AgentStopped"] = "AgentStopped";
    IssueType["GuestFirewall"] = "GuestFirewall";
    IssueType["DnsResolution"] = "DnsResolution";
    IssueType["SocketBind"] = "SocketBind";
    IssueType["NetworkSecurityRule"] = "NetworkSecurityRule";
    IssueType["UserDefinedRoute"] = "UserDefinedRoute";
    IssueType["PortThrottled"] = "PortThrottled";
    IssueType["Platform"] = "Platform";
})(IssueType || (IssueType = {}));
/**
 * Defines values for ConnectionStatus.
 * Possible values include: 'Unknown', 'Connected', 'Disconnected', 'Degraded'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ConnectionStatus =
 * <ConnectionStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ConnectionStatus;
(function (ConnectionStatus) {
    ConnectionStatus["Unknown"] = "Unknown";
    ConnectionStatus["Connected"] = "Connected";
    ConnectionStatus["Disconnected"] = "Disconnected";
    ConnectionStatus["Degraded"] = "Degraded";
})(ConnectionStatus || (ConnectionStatus = {}));
/**
 * Defines values for VirtualNetworkPeeringState.
 * Possible values include: 'Initiated', 'Connected', 'Disconnected'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VirtualNetworkPeeringState =
 * <VirtualNetworkPeeringState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var VirtualNetworkPeeringState;
(function (VirtualNetworkPeeringState) {
    VirtualNetworkPeeringState["Initiated"] = "Initiated";
    VirtualNetworkPeeringState["Connected"] = "Connected";
    VirtualNetworkPeeringState["Disconnected"] = "Disconnected";
})(VirtualNetworkPeeringState || (VirtualNetworkPeeringState = {}));
/**
 * Defines values for VirtualNetworkGatewayType.
 * Possible values include: 'Vpn', 'ExpressRoute'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VirtualNetworkGatewayType =
 * <VirtualNetworkGatewayType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var VirtualNetworkGatewayType;
(function (VirtualNetworkGatewayType) {
    VirtualNetworkGatewayType["Vpn"] = "Vpn";
    VirtualNetworkGatewayType["ExpressRoute"] = "ExpressRoute";
})(VirtualNetworkGatewayType || (VirtualNetworkGatewayType = {}));
/**
 * Defines values for VpnType.
 * Possible values include: 'PolicyBased', 'RouteBased'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VpnType = <VpnType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var VpnType;
(function (VpnType) {
    VpnType["PolicyBased"] = "PolicyBased";
    VpnType["RouteBased"] = "RouteBased";
})(VpnType || (VpnType = {}));
/**
 * Defines values for VirtualNetworkGatewaySkuName.
 * Possible values include: 'Basic', 'HighPerformance', 'Standard',
 * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VirtualNetworkGatewaySkuName =
 * <VirtualNetworkGatewaySkuName>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var VirtualNetworkGatewaySkuName;
(function (VirtualNetworkGatewaySkuName) {
    VirtualNetworkGatewaySkuName["Basic"] = "Basic";
    VirtualNetworkGatewaySkuName["HighPerformance"] = "HighPerformance";
    VirtualNetworkGatewaySkuName["Standard"] = "Standard";
    VirtualNetworkGatewaySkuName["UltraPerformance"] = "UltraPerformance";
    VirtualNetworkGatewaySkuName["VpnGw1"] = "VpnGw1";
    VirtualNetworkGatewaySkuName["VpnGw2"] = "VpnGw2";
    VirtualNetworkGatewaySkuName["VpnGw3"] = "VpnGw3";
})(VirtualNetworkGatewaySkuName || (VirtualNetworkGatewaySkuName = {}));
/**
 * Defines values for VirtualNetworkGatewaySkuTier.
 * Possible values include: 'Basic', 'HighPerformance', 'Standard',
 * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VirtualNetworkGatewaySkuTier =
 * <VirtualNetworkGatewaySkuTier>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var VirtualNetworkGatewaySkuTier;
(function (VirtualNetworkGatewaySkuTier) {
    VirtualNetworkGatewaySkuTier["Basic"] = "Basic";
    VirtualNetworkGatewaySkuTier["HighPerformance"] = "HighPerformance";
    VirtualNetworkGatewaySkuTier["Standard"] = "Standard";
    VirtualNetworkGatewaySkuTier["UltraPerformance"] = "UltraPerformance";
    VirtualNetworkGatewaySkuTier["VpnGw1"] = "VpnGw1";
    VirtualNetworkGatewaySkuTier["VpnGw2"] = "VpnGw2";
    VirtualNetworkGatewaySkuTier["VpnGw3"] = "VpnGw3";
})(VirtualNetworkGatewaySkuTier || (VirtualNetworkGatewaySkuTier = {}));
/**
 * Defines values for VpnClientProtocol.
 * Possible values include: 'IkeV2', 'SSTP'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VpnClientProtocol =
 * <VpnClientProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var VpnClientProtocol;
(function (VpnClientProtocol) {
    VpnClientProtocol["IkeV2"] = "IkeV2";
    VpnClientProtocol["SSTP"] = "SSTP";
})(VpnClientProtocol || (VpnClientProtocol = {}));
/**
 * Defines values for BgpPeerState.
 * Possible values include: 'Unknown', 'Stopped', 'Idle', 'Connecting',
 * 'Connected'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: BgpPeerState =
 * <BgpPeerState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var BgpPeerState;
(function (BgpPeerState) {
    BgpPeerState["Unknown"] = "Unknown";
    BgpPeerState["Stopped"] = "Stopped";
    BgpPeerState["Idle"] = "Idle";
    BgpPeerState["Connecting"] = "Connecting";
    BgpPeerState["Connected"] = "Connected";
})(BgpPeerState || (BgpPeerState = {}));
/**
 * Defines values for ProcessorArchitecture.
 * Possible values include: 'Amd64', 'X86'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ProcessorArchitecture =
 * <ProcessorArchitecture>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var ProcessorArchitecture;
(function (ProcessorArchitecture) {
    ProcessorArchitecture["Amd64"] = "Amd64";
    ProcessorArchitecture["X86"] = "X86";
})(ProcessorArchitecture || (ProcessorArchitecture = {}));
/**
 * Defines values for AuthenticationMethod.
 * Possible values include: 'EAPTLS', 'EAPMSCHAPv2'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: AuthenticationMethod =
 * <AuthenticationMethod>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var AuthenticationMethod;
(function (AuthenticationMethod) {
    AuthenticationMethod["EAPTLS"] = "EAPTLS";
    AuthenticationMethod["EAPMSCHAPv2"] = "EAPMSCHAPv2";
})(AuthenticationMethod || (AuthenticationMethod = {}));
/**
 * Defines values for VirtualNetworkGatewayConnectionStatus.
 * Possible values include: 'Unknown', 'Connecting', 'Connected',
 * 'NotConnected'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VirtualNetworkGatewayConnectionStatus =
 * <VirtualNetworkGatewayConnectionStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var VirtualNetworkGatewayConnectionStatus;
(function (VirtualNetworkGatewayConnectionStatus) {
    VirtualNetworkGatewayConnectionStatus["Unknown"] = "Unknown";
    VirtualNetworkGatewayConnectionStatus["Connecting"] = "Connecting";
    VirtualNetworkGatewayConnectionStatus["Connected"] = "Connected";
    VirtualNetworkGatewayConnectionStatus["NotConnected"] = "NotConnected";
})(VirtualNetworkGatewayConnectionStatus || (VirtualNetworkGatewayConnectionStatus = {}));
/**
 * Defines values for VirtualNetworkGatewayConnectionType.
 * Possible values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VirtualNetworkGatewayConnectionType =
 * <VirtualNetworkGatewayConnectionType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var VirtualNetworkGatewayConnectionType;
(function (VirtualNetworkGatewayConnectionType) {
    VirtualNetworkGatewayConnectionType["IPsec"] = "IPsec";
    VirtualNetworkGatewayConnectionType["Vnet2Vnet"] = "Vnet2Vnet";
    VirtualNetworkGatewayConnectionType["ExpressRoute"] = "ExpressRoute";
    VirtualNetworkGatewayConnectionType["VPNClient"] = "VPNClient";
})(VirtualNetworkGatewayConnectionType || (VirtualNetworkGatewayConnectionType = {}));
/**
 * Defines values for IpsecEncryption.
 * Possible values include: 'None', 'DES', 'DES3', 'AES128', 'AES192',
 * 'AES256', 'GCMAES128', 'GCMAES192', 'GCMAES256'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IpsecEncryption =
 * <IpsecEncryption>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var IpsecEncryption;
(function (IpsecEncryption) {
    IpsecEncryption["None"] = "None";
    IpsecEncryption["DES"] = "DES";
    IpsecEncryption["DES3"] = "DES3";
    IpsecEncryption["AES128"] = "AES128";
    IpsecEncryption["AES192"] = "AES192";
    IpsecEncryption["AES256"] = "AES256";
    IpsecEncryption["GCMAES128"] = "GCMAES128";
    IpsecEncryption["GCMAES192"] = "GCMAES192";
    IpsecEncryption["GCMAES256"] = "GCMAES256";
})(IpsecEncryption || (IpsecEncryption = {}));
/**
 * Defines values for IpsecIntegrity.
 * Possible values include: 'MD5', 'SHA1', 'SHA256', 'GCMAES128', 'GCMAES192',
 * 'GCMAES256'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IpsecIntegrity =
 * <IpsecIntegrity>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var IpsecIntegrity;
(function (IpsecIntegrity) {
    IpsecIntegrity["MD5"] = "MD5";
    IpsecIntegrity["SHA1"] = "SHA1";
    IpsecIntegrity["SHA256"] = "SHA256";
    IpsecIntegrity["GCMAES128"] = "GCMAES128";
    IpsecIntegrity["GCMAES192"] = "GCMAES192";
    IpsecIntegrity["GCMAES256"] = "GCMAES256";
})(IpsecIntegrity || (IpsecIntegrity = {}));
/**
 * Defines values for IkeEncryption.
 * Possible values include: 'DES', 'DES3', 'AES128', 'AES192', 'AES256'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IkeEncryption =
 * <IkeEncryption>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var IkeEncryption;
(function (IkeEncryption) {
    IkeEncryption["DES"] = "DES";
    IkeEncryption["DES3"] = "DES3";
    IkeEncryption["AES128"] = "AES128";
    IkeEncryption["AES192"] = "AES192";
    IkeEncryption["AES256"] = "AES256";
})(IkeEncryption || (IkeEncryption = {}));
/**
 * Defines values for IkeIntegrity.
 * Possible values include: 'MD5', 'SHA1', 'SHA256', 'SHA384'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IkeIntegrity =
 * <IkeIntegrity>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var IkeIntegrity;
(function (IkeIntegrity) {
    IkeIntegrity["MD5"] = "MD5";
    IkeIntegrity["SHA1"] = "SHA1";
    IkeIntegrity["SHA256"] = "SHA256";
    IkeIntegrity["SHA384"] = "SHA384";
})(IkeIntegrity || (IkeIntegrity = {}));
/**
 * Defines values for DhGroup.
 * Possible values include: 'None', 'DHGroup1', 'DHGroup2', 'DHGroup14',
 * 'DHGroup2048', 'ECP256', 'ECP384', 'DHGroup24'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DhGroup = <DhGroup>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var DhGroup;
(function (DhGroup) {
    DhGroup["None"] = "None";
    DhGroup["DHGroup1"] = "DHGroup1";
    DhGroup["DHGroup2"] = "DHGroup2";
    DhGroup["DHGroup14"] = "DHGroup14";
    DhGroup["DHGroup2048"] = "DHGroup2048";
    DhGroup["ECP256"] = "ECP256";
    DhGroup["ECP384"] = "ECP384";
    DhGroup["DHGroup24"] = "DHGroup24";
})(DhGroup || (DhGroup = {}));
/**
 * Defines values for PfsGroup.
 * Possible values include: 'None', 'PFS1', 'PFS2', 'PFS2048', 'ECP256',
 * 'ECP384', 'PFS24'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PfsGroup = <PfsGroup>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
var PfsGroup;
(function (PfsGroup) {
    PfsGroup["None"] = "None";
    PfsGroup["PFS1"] = "PFS1";
    PfsGroup["PFS2"] = "PFS2";
    PfsGroup["PFS2048"] = "PFS2048";
    PfsGroup["ECP256"] = "ECP256";
    PfsGroup["ECP384"] = "ECP384";
    PfsGroup["PFS24"] = "PFS24";
})(PfsGroup || (PfsGroup = {}));


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__applicationGateways__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__applicationSecurityGroups__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__availableEndpointServices__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__expressRouteCircuitAuthorizations__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__expressRouteCircuitPeerings__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__expressRouteCircuits__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__expressRouteServiceProviders__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__loadBalancers__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__loadBalancerBackendAddressPools__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__loadBalancerFrontendIPConfigurations__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__inboundNatRules__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__loadBalancerLoadBalancingRules__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__loadBalancerNetworkInterfaces__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__loadBalancerProbes__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__networkInterfaces__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__networkInterfaceIPConfigurations__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__networkInterfaceLoadBalancers__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__networkSecurityGroups__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__securityRules__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__defaultSecurityRules__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__networkWatchers__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__packetCaptures__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__publicIPAddresses__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__routeFilters__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__routeFilterRules__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__routeTables__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__routes__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__bgpServiceCommunities__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__usages__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__virtualNetworks__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__subnets__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__virtualNetworkPeerings__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__virtualNetworkGateways__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__virtualNetworkGatewayConnections__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__localNetworkGateways__ = __webpack_require__(40);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__applicationGateways__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__applicationSecurityGroups__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_2__availableEndpointServices__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_3__expressRouteCircuitAuthorizations__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_4__expressRouteCircuitPeerings__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_5__expressRouteCircuits__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_6__expressRouteServiceProviders__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return __WEBPACK_IMPORTED_MODULE_7__loadBalancers__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return __WEBPACK_IMPORTED_MODULE_8__loadBalancerBackendAddressPools__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return __WEBPACK_IMPORTED_MODULE_9__loadBalancerFrontendIPConfigurations__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return __WEBPACK_IMPORTED_MODULE_10__inboundNatRules__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return __WEBPACK_IMPORTED_MODULE_11__loadBalancerLoadBalancingRules__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return __WEBPACK_IMPORTED_MODULE_12__loadBalancerNetworkInterfaces__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return __WEBPACK_IMPORTED_MODULE_13__loadBalancerProbes__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return __WEBPACK_IMPORTED_MODULE_14__networkInterfaces__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return __WEBPACK_IMPORTED_MODULE_15__networkInterfaceIPConfigurations__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return __WEBPACK_IMPORTED_MODULE_16__networkInterfaceLoadBalancers__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return __WEBPACK_IMPORTED_MODULE_17__networkSecurityGroups__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return __WEBPACK_IMPORTED_MODULE_18__securityRules__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_19__defaultSecurityRules__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return __WEBPACK_IMPORTED_MODULE_20__networkWatchers__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return __WEBPACK_IMPORTED_MODULE_21__packetCaptures__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return __WEBPACK_IMPORTED_MODULE_22__publicIPAddresses__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return __WEBPACK_IMPORTED_MODULE_23__routeFilters__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return __WEBPACK_IMPORTED_MODULE_24__routeFilterRules__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return __WEBPACK_IMPORTED_MODULE_25__routeTables__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return __WEBPACK_IMPORTED_MODULE_26__routes__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_27__bgpServiceCommunities__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "E", function() { return __WEBPACK_IMPORTED_MODULE_28__usages__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "I", function() { return __WEBPACK_IMPORTED_MODULE_29__virtualNetworks__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return __WEBPACK_IMPORTED_MODULE_30__subnets__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "H", function() { return __WEBPACK_IMPORTED_MODULE_31__virtualNetworkPeerings__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "G", function() { return __WEBPACK_IMPORTED_MODULE_32__virtualNetworkGateways__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "F", function() { return __WEBPACK_IMPORTED_MODULE_33__virtualNetworkGatewayConnections__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return __WEBPACK_IMPORTED_MODULE_34__localNetworkGateways__["a"]; });
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */






































/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ApplicationGateways; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a ApplicationGateways. */
var ApplicationGateways = /** @class */ (function () {
    /**
     * Create a ApplicationGateways.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function ApplicationGateways(client) {
        this.client = client;
    }
    /**
     * Deletes the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, applicationGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.getWithHttpOperationResponse = function (resourceGroupName, applicationGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (applicationGatewayName === null || applicationGatewayName === undefined || typeof applicationGatewayName.valueOf() !== 'string') {
                                throw new Error('applicationGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{applicationGatewayName}', encodeURIComponent(applicationGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGateway"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {ApplicationGateway} parameters Parameters supplied to the create or
     * update application gateway operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, applicationGatewayName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, applicationGatewayName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGateway"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Lists all application gateways in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGatewayListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the application gateways in a subscription.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.listAllWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGatewayListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Starts the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.startWithHttpOperationResponse = function (resourceGroupName, applicationGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_8, operationRes, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginStartWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Stops the specified application gateway in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.stopWithHttpOperationResponse = function (resourceGroupName, applicationGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_10, operationRes, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginStopWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the backend health of the specified application gateway in a resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {ApplicationGatewaysBackendHealthOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.backendHealthWithHttpOperationResponse = function (resourceGroupName, applicationGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_12, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginBackendHealthWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGatewayBackendHealth"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_13 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_13)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Lists all available web application firewall rule sets.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.listAvailableWafRuleSetsWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableWafRuleSets';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGatewayAvailableWafRuleSetsResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_14 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_14)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Lists available Ssl options for configuring Ssl policy.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.listAvailableSslOptionsWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_15;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGatewayAvailableSslOptions"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_15 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_15)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Lists all SSL predefined policies for configuring Ssl policy.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.listAvailableSslPredefinedPoliciesWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_16;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGatewayAvailableSslPredefinedPolicies"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_16 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_16)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets Ssl predefined policy with the specified policy name.
     *
     * @param {string} predefinedPolicyName Name of Ssl predefined policy.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.getSslPredefinedPolicyWithHttpOperationResponse = function (predefinedPolicyName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_17;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (predefinedPolicyName === null || predefinedPolicyName === undefined || typeof predefinedPolicyName.valueOf() !== 'string') {
                                throw new Error('predefinedPolicyName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies/{predefinedPolicyName}';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        requestUrl = requestUrl.replace('{predefinedPolicyName}', encodeURIComponent(predefinedPolicyName));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGatewaySslPredefinedPolicy"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_17 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_17)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, applicationGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_18;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (applicationGatewayName === null || applicationGatewayName === undefined || typeof applicationGatewayName.valueOf() !== 'string') {
                                throw new Error('applicationGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{applicationGatewayName}', encodeURIComponent(applicationGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 202 && statusCode !== 204 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_18 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_18)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {ApplicationGateway} parameters Parameters supplied to the create or
     * update application gateway operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, applicationGatewayName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_19;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (applicationGatewayName === null || applicationGatewayName === undefined || typeof applicationGatewayName.valueOf() !== 'string') {
                                throw new Error('applicationGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{applicationGatewayName}', encodeURIComponent(applicationGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGateway"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 201 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGateway"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGateway"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_19 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_19)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Starts the specified application gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.beginStartWithHttpOperationResponse = function (resourceGroupName, applicationGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_20;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (applicationGatewayName === null || applicationGatewayName === undefined || typeof applicationGatewayName.valueOf() !== 'string') {
                                throw new Error('applicationGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/start';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{applicationGatewayName}', encodeURIComponent(applicationGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_20 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_20)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Stops the specified application gateway in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.beginStopWithHttpOperationResponse = function (resourceGroupName, applicationGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_21;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (applicationGatewayName === null || applicationGatewayName === undefined || typeof applicationGatewayName.valueOf() !== 'string') {
                                throw new Error('applicationGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/stop';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{applicationGatewayName}', encodeURIComponent(applicationGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_21 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_21)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the backend health of the specified application gateway in a resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationGatewayName The name of the application gateway.
     *
     * @param {ApplicationGatewaysBeginBackendHealthOptionalParams} [options]
     * Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.beginBackendHealthWithHttpOperationResponse = function (resourceGroupName, applicationGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, expand, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_22;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (applicationGatewayName === null || applicationGatewayName === undefined || typeof applicationGatewayName.valueOf() !== 'string') {
                                throw new Error('applicationGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                                throw new Error('expand must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/backendhealth';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{applicationGatewayName}', encodeURIComponent(applicationGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (expand !== null && expand !== undefined) {
                            queryParamsArray.push('$expand=' + encodeURIComponent(expand));
                        }
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGatewayBackendHealth"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_22 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_22)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Lists all application gateways in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_23;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGatewayListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_23 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_23)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the application gateways in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.listAllNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_24;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGatewayListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_24 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_24)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Lists all SSL predefined policies for configuring Ssl policy.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationGateways.prototype.listAvailableSslPredefinedPoliciesNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_25;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationGatewayAvailableSslPredefinedPolicies"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_25 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_25)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    ApplicationGateways.prototype.deleteMethod = function (resourceGroupName, applicationGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.get = function (resourceGroupName, applicationGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.createOrUpdate = function (resourceGroupName, applicationGatewayName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, applicationGatewayName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, applicationGatewayName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.listAll = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.start = function (resourceGroupName, applicationGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.startWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.startWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.stop = function (resourceGroupName, applicationGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.stopWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.stopWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.backendHealth = function (resourceGroupName, applicationGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.backendHealthWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.backendHealthWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.listAvailableWafRuleSets = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAvailableWafRuleSetsWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAvailableWafRuleSetsWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.listAvailableSslOptions = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAvailableSslOptionsWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAvailableSslOptionsWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.listAvailableSslPredefinedPolicies = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAvailableSslPredefinedPoliciesWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAvailableSslPredefinedPoliciesWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.getSslPredefinedPolicy = function (predefinedPolicyName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getSslPredefinedPolicyWithHttpOperationResponse(predefinedPolicyName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getSslPredefinedPolicyWithHttpOperationResponse(predefinedPolicyName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.beginDeleteMethod = function (resourceGroupName, applicationGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.beginCreateOrUpdate = function (resourceGroupName, applicationGatewayName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, applicationGatewayName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, applicationGatewayName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.beginStart = function (resourceGroupName, applicationGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginStartWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginStartWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.beginStop = function (resourceGroupName, applicationGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginStopWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginStopWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.beginBackendHealth = function (resourceGroupName, applicationGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginBackendHealthWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginBackendHealthWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.listAllNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationGateways.prototype.listAvailableSslPredefinedPoliciesNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAvailableSslPredefinedPoliciesNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAvailableSslPredefinedPoliciesNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return ApplicationGateways;
}());



/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ApplicationSecurityGroups; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a ApplicationSecurityGroups. */
var ApplicationSecurityGroups = /** @class */ (function () {
    /**
     * Create a ApplicationSecurityGroups.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function ApplicationSecurityGroups(client) {
        this.client = client;
    }
    /**
     * Deletes the specified application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationSecurityGroups.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, applicationSecurityGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, applicationSecurityGroupName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets information about the specified application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationSecurityGroups.prototype.getWithHttpOperationResponse = function (resourceGroupName, applicationSecurityGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (applicationSecurityGroupName === null || applicationSecurityGroupName === undefined || typeof applicationSecurityGroupName.valueOf() !== 'string') {
                                throw new Error('applicationSecurityGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationSecurityGroups/{applicationSecurityGroupName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{applicationSecurityGroupName}', encodeURIComponent(applicationSecurityGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationSecurityGroup"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates an application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {ApplicationSecurityGroup} parameters Parameters supplied to the
     * create or update ApplicationSecurityGroup operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationSecurityGroups.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, applicationSecurityGroupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, applicationSecurityGroupName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationSecurityGroup"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all application security groups in a subscription.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationSecurityGroups.prototype.listAllWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationSecurityGroups';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationSecurityGroupListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the application security groups in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationSecurityGroups.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationSecurityGroups';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationSecurityGroupListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationSecurityGroups.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, applicationSecurityGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (applicationSecurityGroupName === null || applicationSecurityGroupName === undefined || typeof applicationSecurityGroupName.valueOf() !== 'string') {
                                throw new Error('applicationSecurityGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationSecurityGroups/{applicationSecurityGroupName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{applicationSecurityGroupName}', encodeURIComponent(applicationSecurityGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204 && statusCode !== 202 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates an application security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} applicationSecurityGroupName The name of the application
     * security group.
     *
     * @param {ApplicationSecurityGroup} parameters Parameters supplied to the
     * create or update ApplicationSecurityGroup operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationSecurityGroups.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, applicationSecurityGroupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (applicationSecurityGroupName === null || applicationSecurityGroupName === undefined || typeof applicationSecurityGroupName.valueOf() !== 'string') {
                                throw new Error('applicationSecurityGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationSecurityGroups/{applicationSecurityGroupName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{applicationSecurityGroupName}', encodeURIComponent(applicationSecurityGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationSecurityGroup"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 201 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationSecurityGroup"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationSecurityGroup"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all application security groups in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationSecurityGroups.prototype.listAllNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationSecurityGroupListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the application security groups in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ApplicationSecurityGroups.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ApplicationSecurityGroupListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    ApplicationSecurityGroups.prototype.deleteMethod = function (resourceGroupName, applicationSecurityGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, applicationSecurityGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, applicationSecurityGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationSecurityGroups.prototype.get = function (resourceGroupName, applicationSecurityGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, applicationSecurityGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, applicationSecurityGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationSecurityGroups.prototype.createOrUpdate = function (resourceGroupName, applicationSecurityGroupName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, applicationSecurityGroupName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, applicationSecurityGroupName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationSecurityGroups.prototype.listAll = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationSecurityGroups.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationSecurityGroups.prototype.beginDeleteMethod = function (resourceGroupName, applicationSecurityGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, applicationSecurityGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, applicationSecurityGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationSecurityGroups.prototype.beginCreateOrUpdate = function (resourceGroupName, applicationSecurityGroupName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, applicationSecurityGroupName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, applicationSecurityGroupName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationSecurityGroups.prototype.listAllNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ApplicationSecurityGroups.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return ApplicationSecurityGroups;
}());



/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AvailableEndpointServices; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a AvailableEndpointServices. */
var AvailableEndpointServices = /** @class */ (function () {
    /**
     * Create a AvailableEndpointServices.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function AvailableEndpointServices(client) {
        this.client = client;
    }
    /**
     * List what values of endpoint services are available for use.
     *
     * @param {string} location The location to check available endpoint services.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    AvailableEndpointServices.prototype.listWithHttpOperationResponse = function (location, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (location === null || location === undefined || typeof location.valueOf() !== 'string') {
                                throw new Error('location cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/virtualNetworkAvailableEndpointServices';
                        requestUrl = requestUrl.replace('{location}', encodeURIComponent(location));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["EndpointServicesListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * List what values of endpoint services are available for use.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    AvailableEndpointServices.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["EndpointServicesListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    AvailableEndpointServices.prototype.list = function (location, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(location, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(location, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    AvailableEndpointServices.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return AvailableEndpointServices;
}());



/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ExpressRouteCircuitAuthorizations; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a ExpressRouteCircuitAuthorizations. */
var ExpressRouteCircuitAuthorizations = /** @class */ (function () {
    /**
     * Create a ExpressRouteCircuitAuthorizations.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function ExpressRouteCircuitAuthorizations(client) {
        this.client = client;
    }
    /**
     * Deletes the specified authorization from the specified express route
     * circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitAuthorizations.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, circuitName, authorizationName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, authorizationName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified authorization from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitAuthorizations.prototype.getWithHttpOperationResponse = function (resourceGroupName, circuitName, authorizationName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (authorizationName === null || authorizationName === undefined || typeof authorizationName.valueOf() !== 'string') {
                                throw new Error('authorizationName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{authorizationName}', encodeURIComponent(authorizationName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitAuthorization"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates an authorization in the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {ExpressRouteCircuitAuthorization} authorizationParameters Parameters
     * supplied to the create or update express route circuit authorization
     * operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitAuthorizations.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, circuitName, authorizationName, authorizationParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, authorizationName, authorizationParameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitAuthorization"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all authorizations in an express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitAuthorizations.prototype.listWithHttpOperationResponse = function (resourceGroupName, circuitName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["AuthorizationListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified authorization from the specified express route
     * circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitAuthorizations.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, circuitName, authorizationName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (authorizationName === null || authorizationName === undefined || typeof authorizationName.valueOf() !== 'string') {
                                throw new Error('authorizationName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{authorizationName}', encodeURIComponent(authorizationName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 202 && statusCode !== 200 && statusCode !== 204) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates an authorization in the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} authorizationName The name of the authorization.
     *
     * @param {ExpressRouteCircuitAuthorization} authorizationParameters Parameters
     * supplied to the create or update express route circuit authorization
     * operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitAuthorizations.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, circuitName, authorizationName, authorizationParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (authorizationName === null || authorizationName === undefined || typeof authorizationName.valueOf() !== 'string') {
                                throw new Error('authorizationName cannot be null or undefined and it must be of type string.');
                            }
                            if (authorizationParameters === null || authorizationParameters === undefined) {
                                throw new Error('authorizationParameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{authorizationName}', encodeURIComponent(authorizationName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (authorizationParameters !== null && authorizationParameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitAuthorization"];
                                requestModel = client.serializer.serialize(requestModelMapper, authorizationParameters, 'authorizationParameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(authorizationParameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 201 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitAuthorization"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitAuthorization"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all authorizations in an express route circuit.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitAuthorizations.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["AuthorizationListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    ExpressRouteCircuitAuthorizations.prototype.deleteMethod = function (resourceGroupName, circuitName, authorizationName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, authorizationName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, authorizationName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuitAuthorizations.prototype.get = function (resourceGroupName, circuitName, authorizationName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, circuitName, authorizationName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, circuitName, authorizationName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuitAuthorizations.prototype.createOrUpdate = function (resourceGroupName, circuitName, authorizationName, authorizationParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, authorizationName, authorizationParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, authorizationName, authorizationParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuitAuthorizations.prototype.list = function (resourceGroupName, circuitName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, circuitName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, circuitName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuitAuthorizations.prototype.beginDeleteMethod = function (resourceGroupName, circuitName, authorizationName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, authorizationName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, authorizationName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuitAuthorizations.prototype.beginCreateOrUpdate = function (resourceGroupName, circuitName, authorizationName, authorizationParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, authorizationName, authorizationParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, authorizationName, authorizationParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuitAuthorizations.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return ExpressRouteCircuitAuthorizations;
}());



/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ExpressRouteCircuitPeerings; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a ExpressRouteCircuitPeerings. */
var ExpressRouteCircuitPeerings = /** @class */ (function () {
    /**
     * Create a ExpressRouteCircuitPeerings.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function ExpressRouteCircuitPeerings(client) {
        this.client = client;
    }
    /**
     * Deletes the specified peering from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitPeerings.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, circuitName, peeringName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified authorization from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitPeerings.prototype.getWithHttpOperationResponse = function (resourceGroupName, circuitName, peeringName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (peeringName === null || peeringName === undefined || typeof peeringName.valueOf() !== 'string') {
                                throw new Error('peeringName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{peeringName}', encodeURIComponent(peeringName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitPeering"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a peering in the specified express route circuits.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {ExpressRouteCircuitPeering} peeringParameters Parameters supplied to
     * the create or update express route circuit peering operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitPeerings.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, circuitName, peeringName, peeringParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, peeringParameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitPeering"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all peerings in a specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitPeerings.prototype.listWithHttpOperationResponse = function (resourceGroupName, circuitName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitPeeringListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified peering from the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitPeerings.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, circuitName, peeringName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (peeringName === null || peeringName === undefined || typeof peeringName.valueOf() !== 'string') {
                                throw new Error('peeringName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{peeringName}', encodeURIComponent(peeringName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a peering in the specified express route circuits.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {ExpressRouteCircuitPeering} peeringParameters Parameters supplied to
     * the create or update express route circuit peering operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitPeerings.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, circuitName, peeringName, peeringParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (peeringName === null || peeringName === undefined || typeof peeringName.valueOf() !== 'string') {
                                throw new Error('peeringName cannot be null or undefined and it must be of type string.');
                            }
                            if (peeringParameters === null || peeringParameters === undefined) {
                                throw new Error('peeringParameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{peeringName}', encodeURIComponent(peeringName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (peeringParameters !== null && peeringParameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitPeering"];
                                requestModel = client.serializer.serialize(requestModelMapper, peeringParameters, 'peeringParameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(peeringParameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitPeering"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitPeering"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all peerings in a specified express route circuit.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuitPeerings.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitPeeringListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    ExpressRouteCircuitPeerings.prototype.deleteMethod = function (resourceGroupName, circuitName, peeringName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuitPeerings.prototype.get = function (resourceGroupName, circuitName, peeringName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuitPeerings.prototype.createOrUpdate = function (resourceGroupName, circuitName, peeringName, peeringParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, peeringParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, peeringParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuitPeerings.prototype.list = function (resourceGroupName, circuitName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, circuitName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, circuitName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuitPeerings.prototype.beginDeleteMethod = function (resourceGroupName, circuitName, peeringName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuitPeerings.prototype.beginCreateOrUpdate = function (resourceGroupName, circuitName, peeringName, peeringParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, peeringParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, peeringParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuitPeerings.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return ExpressRouteCircuitPeerings;
}());



/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ExpressRouteCircuits; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a ExpressRouteCircuits. */
var ExpressRouteCircuits = /** @class */ (function () {
    /**
     * Create a ExpressRouteCircuits.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function ExpressRouteCircuits(client) {
        this.client = client;
    }
    /**
     * Deletes the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, circuitName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets information about the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of express route circuit.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.getWithHttpOperationResponse = function (resourceGroupName, circuitName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuit"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates an express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {ExpressRouteCircuit} parameters Parameters supplied to the create or
     * update express route circuit operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, circuitName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuit"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the currently advertised ARP table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.listArpTableWithHttpOperationResponse = function (resourceGroupName, circuitName, peeringName, devicePath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_6, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginListArpTableWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitsArpTableListResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the currently advertised routes table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.listRoutesTableWithHttpOperationResponse = function (resourceGroupName, circuitName, peeringName, devicePath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_8, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginListRoutesTableWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitsRoutesTableListResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the currently advertised routes table summary associated with the
     * express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.listRoutesTableSummaryWithHttpOperationResponse = function (resourceGroupName, circuitName, peeringName, devicePath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_10, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginListRoutesTableSummaryWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitsRoutesTableSummaryListResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the stats from an express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.getStatsWithHttpOperationResponse = function (resourceGroupName, circuitName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/stats';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitStats"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all stats from an express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.getPeeringStatsWithHttpOperationResponse = function (resourceGroupName, circuitName, peeringName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (peeringName === null || peeringName === undefined || typeof peeringName.valueOf() !== 'string') {
                                throw new Error('peeringName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/stats';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{peeringName}', encodeURIComponent(peeringName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitStats"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_13 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_13)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the express route circuits in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_14 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_14)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the express route circuits in a subscription.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.listAllWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_15;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCircuits';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_15 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_15)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, circuitName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_16;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204 && statusCode !== 202 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_16 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_16)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates an express route circuit.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the circuit.
     *
     * @param {ExpressRouteCircuit} parameters Parameters supplied to the create or
     * update express route circuit operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, circuitName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_17;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuit"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 201 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuit"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuit"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_17 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_17)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the currently advertised ARP table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.beginListArpTableWithHttpOperationResponse = function (resourceGroupName, circuitName, peeringName, devicePath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_18;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (peeringName === null || peeringName === undefined || typeof peeringName.valueOf() !== 'string') {
                                throw new Error('peeringName cannot be null or undefined and it must be of type string.');
                            }
                            if (devicePath === null || devicePath === undefined || typeof devicePath.valueOf() !== 'string') {
                                throw new Error('devicePath cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/arpTables/{devicePath}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{peeringName}', encodeURIComponent(peeringName));
                        requestUrl = requestUrl.replace('{devicePath}', encodeURIComponent(devicePath));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitsArpTableListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_18 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_18)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the currently advertised routes table associated with the express route
     * circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.beginListRoutesTableWithHttpOperationResponse = function (resourceGroupName, circuitName, peeringName, devicePath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_19;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (peeringName === null || peeringName === undefined || typeof peeringName.valueOf() !== 'string') {
                                throw new Error('peeringName cannot be null or undefined and it must be of type string.');
                            }
                            if (devicePath === null || devicePath === undefined || typeof devicePath.valueOf() !== 'string') {
                                throw new Error('devicePath cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/routeTables/{devicePath}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{peeringName}', encodeURIComponent(peeringName));
                        requestUrl = requestUrl.replace('{devicePath}', encodeURIComponent(devicePath));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitsRoutesTableListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_19 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_19)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the currently advertised routes table summary associated with the
     * express route circuit in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} circuitName The name of the express route circuit.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {string} devicePath The path of the device.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.beginListRoutesTableSummaryWithHttpOperationResponse = function (resourceGroupName, circuitName, peeringName, devicePath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_20;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (circuitName === null || circuitName === undefined || typeof circuitName.valueOf() !== 'string') {
                                throw new Error('circuitName cannot be null or undefined and it must be of type string.');
                            }
                            if (peeringName === null || peeringName === undefined || typeof peeringName.valueOf() !== 'string') {
                                throw new Error('peeringName cannot be null or undefined and it must be of type string.');
                            }
                            if (devicePath === null || devicePath === undefined || typeof devicePath.valueOf() !== 'string') {
                                throw new Error('devicePath cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/routeTablesSummary/{devicePath}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{circuitName}', encodeURIComponent(circuitName));
                        requestUrl = requestUrl.replace('{peeringName}', encodeURIComponent(peeringName));
                        requestUrl = requestUrl.replace('{devicePath}', encodeURIComponent(devicePath));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitsRoutesTableSummaryListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_20 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_20)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the express route circuits in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_21;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_21 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_21)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the express route circuits in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteCircuits.prototype.listAllNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_22;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteCircuitListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_22 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_22)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    ExpressRouteCircuits.prototype.deleteMethod = function (resourceGroupName, circuitName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.get = function (resourceGroupName, circuitName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, circuitName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, circuitName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.createOrUpdate = function (resourceGroupName, circuitName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.listArpTable = function (resourceGroupName, circuitName, peeringName, devicePath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listArpTableWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listArpTableWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.listRoutesTable = function (resourceGroupName, circuitName, peeringName, devicePath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listRoutesTableWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listRoutesTableWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.listRoutesTableSummary = function (resourceGroupName, circuitName, peeringName, devicePath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listRoutesTableSummaryWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listRoutesTableSummaryWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.getStats = function (resourceGroupName, circuitName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getStatsWithHttpOperationResponse(resourceGroupName, circuitName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getStatsWithHttpOperationResponse(resourceGroupName, circuitName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.getPeeringStats = function (resourceGroupName, circuitName, peeringName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getPeeringStatsWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getPeeringStatsWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.listAll = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.beginDeleteMethod = function (resourceGroupName, circuitName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, circuitName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.beginCreateOrUpdate = function (resourceGroupName, circuitName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, circuitName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.beginListArpTable = function (resourceGroupName, circuitName, peeringName, devicePath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginListArpTableWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginListArpTableWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.beginListRoutesTable = function (resourceGroupName, circuitName, peeringName, devicePath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginListRoutesTableWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginListRoutesTableWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.beginListRoutesTableSummary = function (resourceGroupName, circuitName, peeringName, devicePath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginListRoutesTableSummaryWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginListRoutesTableSummaryWithHttpOperationResponse(resourceGroupName, circuitName, peeringName, devicePath, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteCircuits.prototype.listAllNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return ExpressRouteCircuits;
}());



/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ExpressRouteServiceProviders; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a ExpressRouteServiceProviders. */
var ExpressRouteServiceProviders = /** @class */ (function () {
    /**
     * Create a ExpressRouteServiceProviders.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function ExpressRouteServiceProviders(client) {
        this.client = client;
    }
    /**
     * Gets all the available express route service providers.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteServiceProviders.prototype.listWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteServiceProviders';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteServiceProviderListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the available express route service providers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    ExpressRouteServiceProviders.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ExpressRouteServiceProviderListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    ExpressRouteServiceProviders.prototype.list = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    ExpressRouteServiceProviders.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return ExpressRouteServiceProviders;
}());



/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoadBalancers; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a LoadBalancers. */
var LoadBalancers = /** @class */ (function () {
    /**
     * Create a LoadBalancers.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function LoadBalancers(client) {
        this.client = client;
    }
    /**
     * Deletes the specified load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancers.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, loadBalancerName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {LoadBalancersGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancers.prototype.getWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, expand, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                                throw new Error('expand must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (expand !== null && expand !== undefined) {
                            queryParamsArray.push('$expand=' + encodeURIComponent(expand));
                        }
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancer"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {LoadBalancer} parameters Parameters supplied to the create or update
     * load balancer operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancers.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, loadBalancerName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancer"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the load balancers in a subscription.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancers.prototype.listAllWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/loadBalancers';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancerListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the load balancers in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancers.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancerListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancers.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204 && statusCode !== 202 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {LoadBalancer} parameters Parameters supplied to the create or update
     * load balancer operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancers.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancer"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 201 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancer"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancer"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the load balancers in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancers.prototype.listAllNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancerListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the load balancers in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancers.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancerListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    LoadBalancers.prototype.deleteMethod = function (resourceGroupName, loadBalancerName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, loadBalancerName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, loadBalancerName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancers.prototype.get = function (resourceGroupName, loadBalancerName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, loadBalancerName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, loadBalancerName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancers.prototype.createOrUpdate = function (resourceGroupName, loadBalancerName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, loadBalancerName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, loadBalancerName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancers.prototype.listAll = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancers.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancers.prototype.beginDeleteMethod = function (resourceGroupName, loadBalancerName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, loadBalancerName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, loadBalancerName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancers.prototype.beginCreateOrUpdate = function (resourceGroupName, loadBalancerName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, loadBalancerName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, loadBalancerName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancers.prototype.listAllNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancers.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return LoadBalancers;
}());



/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoadBalancerBackendAddressPools; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a LoadBalancerBackendAddressPools. */
var LoadBalancerBackendAddressPools = /** @class */ (function () {
    /**
     * Create a LoadBalancerBackendAddressPools.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function LoadBalancerBackendAddressPools(client) {
        this.client = client;
    }
    /**
     * Gets all the load balancer backed address pools.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerBackendAddressPools.prototype.listWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancerBackendAddressPoolListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets load balancer backend address pool.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} backendAddressPoolName The name of the backend address pool.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerBackendAddressPools.prototype.getWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, backendAddressPoolName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (backendAddressPoolName === null || backendAddressPoolName === undefined || typeof backendAddressPoolName.valueOf() !== 'string') {
                                throw new Error('backendAddressPoolName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{backendAddressPoolName}', encodeURIComponent(backendAddressPoolName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["BackendAddressPool"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the load balancer backed address pools.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerBackendAddressPools.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancerBackendAddressPoolListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    LoadBalancerBackendAddressPools.prototype.list = function (resourceGroupName, loadBalancerName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, loadBalancerName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, loadBalancerName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancerBackendAddressPools.prototype.get = function (resourceGroupName, loadBalancerName, backendAddressPoolName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, loadBalancerName, backendAddressPoolName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, loadBalancerName, backendAddressPoolName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancerBackendAddressPools.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return LoadBalancerBackendAddressPools;
}());



/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoadBalancerFrontendIPConfigurations; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a LoadBalancerFrontendIPConfigurations. */
var LoadBalancerFrontendIPConfigurations = /** @class */ (function () {
    /**
     * Create a LoadBalancerFrontendIPConfigurations.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function LoadBalancerFrontendIPConfigurations(client) {
        this.client = client;
    }
    /**
     * Gets all the load balancer frontend IP configurations.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerFrontendIPConfigurations.prototype.listWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/frontendIPConfigurations';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancerFrontendIPConfigurationListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets load balancer frontend IP configuration.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} frontendIPConfigurationName The name of the frontend IP
     * configuration.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerFrontendIPConfigurations.prototype.getWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, frontendIPConfigurationName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (frontendIPConfigurationName === null || frontendIPConfigurationName === undefined || typeof frontendIPConfigurationName.valueOf() !== 'string') {
                                throw new Error('frontendIPConfigurationName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/frontendIPConfigurations/{frontendIPConfigurationName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{frontendIPConfigurationName}', encodeURIComponent(frontendIPConfigurationName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["FrontendIPConfiguration"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the load balancer frontend IP configurations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerFrontendIPConfigurations.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancerFrontendIPConfigurationListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    LoadBalancerFrontendIPConfigurations.prototype.list = function (resourceGroupName, loadBalancerName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, loadBalancerName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, loadBalancerName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancerFrontendIPConfigurations.prototype.get = function (resourceGroupName, loadBalancerName, frontendIPConfigurationName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, loadBalancerName, frontendIPConfigurationName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, loadBalancerName, frontendIPConfigurationName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancerFrontendIPConfigurations.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return LoadBalancerFrontendIPConfigurations;
}());



/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InboundNatRules; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a InboundNatRules. */
var InboundNatRules = /** @class */ (function () {
    /**
     * Create a InboundNatRules.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function InboundNatRules(client) {
        this.client = client;
    }
    /**
     * Gets all the inbound nat rules in a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    InboundNatRules.prototype.listWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatRules';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["InboundNatRuleListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    InboundNatRules.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, inboundNatRuleName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_2, operationRes, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {InboundNatRulesGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    InboundNatRules.prototype.getWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, inboundNatRuleName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, expand, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (inboundNatRuleName === null || inboundNatRuleName === undefined || typeof inboundNatRuleName.valueOf() !== 'string') {
                                throw new Error('inboundNatRuleName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                                throw new Error('expand must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatRules/{inboundNatRuleName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{inboundNatRuleName}', encodeURIComponent(inboundNatRuleName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (expand !== null && expand !== undefined) {
                            queryParamsArray.push('$expand=' + encodeURIComponent(expand));
                        }
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["InboundNatRule"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {InboundNatRule} inboundNatRuleParameters Parameters supplied to the
     * create or update inbound nat rule operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    InboundNatRules.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, inboundNatRuleName, inboundNatRuleParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_5, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, inboundNatRuleParameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["InboundNatRule"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    InboundNatRules.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, inboundNatRuleName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (inboundNatRuleName === null || inboundNatRuleName === undefined || typeof inboundNatRuleName.valueOf() !== 'string') {
                                throw new Error('inboundNatRuleName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatRules/{inboundNatRuleName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{inboundNatRuleName}', encodeURIComponent(inboundNatRuleName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204 && statusCode !== 202 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a load balancer inbound nat rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} inboundNatRuleName The name of the inbound nat rule.
     *
     * @param {InboundNatRule} inboundNatRuleParameters Parameters supplied to the
     * create or update inbound nat rule operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    InboundNatRules.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, inboundNatRuleName, inboundNatRuleParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (inboundNatRuleName === null || inboundNatRuleName === undefined || typeof inboundNatRuleName.valueOf() !== 'string') {
                                throw new Error('inboundNatRuleName cannot be null or undefined and it must be of type string.');
                            }
                            if (inboundNatRuleParameters === null || inboundNatRuleParameters === undefined) {
                                throw new Error('inboundNatRuleParameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatRules/{inboundNatRuleName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{inboundNatRuleName}', encodeURIComponent(inboundNatRuleName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (inboundNatRuleParameters !== null && inboundNatRuleParameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["InboundNatRule"];
                                requestModel = client.serializer.serialize(requestModelMapper, inboundNatRuleParameters, 'inboundNatRuleParameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(inboundNatRuleParameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 201 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["InboundNatRule"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["InboundNatRule"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the inbound nat rules in a load balancer.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    InboundNatRules.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["InboundNatRuleListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    InboundNatRules.prototype.list = function (resourceGroupName, loadBalancerName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, loadBalancerName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, loadBalancerName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    InboundNatRules.prototype.deleteMethod = function (resourceGroupName, loadBalancerName, inboundNatRuleName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    InboundNatRules.prototype.get = function (resourceGroupName, loadBalancerName, inboundNatRuleName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    InboundNatRules.prototype.createOrUpdate = function (resourceGroupName, loadBalancerName, inboundNatRuleName, inboundNatRuleParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, inboundNatRuleParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, inboundNatRuleParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    InboundNatRules.prototype.beginDeleteMethod = function (resourceGroupName, loadBalancerName, inboundNatRuleName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    InboundNatRules.prototype.beginCreateOrUpdate = function (resourceGroupName, loadBalancerName, inboundNatRuleName, inboundNatRuleParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, inboundNatRuleParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, inboundNatRuleParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    InboundNatRules.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return InboundNatRules;
}());



/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoadBalancerLoadBalancingRules; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a LoadBalancerLoadBalancingRules. */
var LoadBalancerLoadBalancingRules = /** @class */ (function () {
    /**
     * Create a LoadBalancerLoadBalancingRules.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function LoadBalancerLoadBalancingRules(client) {
        this.client = client;
    }
    /**
     * Gets all the load balancing rules in a load balancer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerLoadBalancingRules.prototype.listWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/loadBalancingRules';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancerLoadBalancingRuleListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified load balancer load balancing rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} loadBalancingRuleName The name of the load balancing rule.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerLoadBalancingRules.prototype.getWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, loadBalancingRuleName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancingRuleName === null || loadBalancingRuleName === undefined || typeof loadBalancingRuleName.valueOf() !== 'string') {
                                throw new Error('loadBalancingRuleName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/loadBalancingRules/{loadBalancingRuleName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{loadBalancingRuleName}', encodeURIComponent(loadBalancingRuleName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancingRule"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the load balancing rules in a load balancer.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerLoadBalancingRules.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancerLoadBalancingRuleListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    LoadBalancerLoadBalancingRules.prototype.list = function (resourceGroupName, loadBalancerName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, loadBalancerName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, loadBalancerName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancerLoadBalancingRules.prototype.get = function (resourceGroupName, loadBalancerName, loadBalancingRuleName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, loadBalancerName, loadBalancingRuleName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, loadBalancerName, loadBalancingRuleName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancerLoadBalancingRules.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return LoadBalancerLoadBalancingRules;
}());



/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoadBalancerNetworkInterfaces; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a LoadBalancerNetworkInterfaces. */
var LoadBalancerNetworkInterfaces = /** @class */ (function () {
    /**
     * Create a LoadBalancerNetworkInterfaces.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function LoadBalancerNetworkInterfaces(client) {
        this.client = client;
    }
    /**
     * Gets associated load balancer network interfaces.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerNetworkInterfaces.prototype.listWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/networkInterfaces';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets associated load balancer network interfaces.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerNetworkInterfaces.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    LoadBalancerNetworkInterfaces.prototype.list = function (resourceGroupName, loadBalancerName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, loadBalancerName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, loadBalancerName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancerNetworkInterfaces.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return LoadBalancerNetworkInterfaces;
}());



/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoadBalancerProbes; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a LoadBalancerProbes. */
var LoadBalancerProbes = /** @class */ (function () {
    /**
     * Create a LoadBalancerProbes.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function LoadBalancerProbes(client) {
        this.client = client;
    }
    /**
     * Gets all the load balancer probes.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerProbes.prototype.listWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancerProbeListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets load balancer probe.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} loadBalancerName The name of the load balancer.
     *
     * @param {string} probeName The name of the probe.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerProbes.prototype.getWithHttpOperationResponse = function (resourceGroupName, loadBalancerName, probeName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (loadBalancerName === null || loadBalancerName === undefined || typeof loadBalancerName.valueOf() !== 'string') {
                                throw new Error('loadBalancerName cannot be null or undefined and it must be of type string.');
                            }
                            if (probeName === null || probeName === undefined || typeof probeName.valueOf() !== 'string') {
                                throw new Error('probeName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{loadBalancerName}', encodeURIComponent(loadBalancerName));
                        requestUrl = requestUrl.replace('{probeName}', encodeURIComponent(probeName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["Probe"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the load balancer probes.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LoadBalancerProbes.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LoadBalancerProbeListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    LoadBalancerProbes.prototype.list = function (resourceGroupName, loadBalancerName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, loadBalancerName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, loadBalancerName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancerProbes.prototype.get = function (resourceGroupName, loadBalancerName, probeName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, loadBalancerName, probeName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, loadBalancerName, probeName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LoadBalancerProbes.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return LoadBalancerProbes;
}());



/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NetworkInterfaces; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a NetworkInterfaces. */
var NetworkInterfaces = /** @class */ (function () {
    /**
     * Create a NetworkInterfaces.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function NetworkInterfaces(client) {
        this.client = client;
    }
    /**
     * Deletes the specified network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, networkInterfaceName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets information about the specified network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {NetworkInterfacesGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.getWithHttpOperationResponse = function (resourceGroupName, networkInterfaceName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, expand, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkInterfaceName === null || networkInterfaceName === undefined || typeof networkInterfaceName.valueOf() !== 'string') {
                                throw new Error('networkInterfaceName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                                throw new Error('expand must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkInterfaceName}', encodeURIComponent(networkInterfaceName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (expand !== null && expand !== undefined) {
                            queryParamsArray.push('$expand=' + encodeURIComponent(expand));
                        }
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterface"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {NetworkInterface} parameters Parameters supplied to the create or
     * update network interface operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, networkInterfaceName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterface"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network interfaces in a subscription.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.listAllWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/networkInterfaces';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network interfaces in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all route tables applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.getEffectiveRouteTableWithHttpOperationResponse = function (resourceGroupName, networkInterfaceName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_8, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGetEffectiveRouteTableWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["EffectiveRouteListResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network security groups applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.listEffectiveNetworkSecurityGroupsWithHttpOperationResponse = function (resourceGroupName, networkInterfaceName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_10, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginListEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["EffectiveNetworkSecurityGroupListResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets information about all network interfaces in a virtual machine in a
     * virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.listVirtualMachineScaleSetVMNetworkInterfacesWithHttpOperationResponse = function (resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-03-30';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualMachineScaleSetName === null || virtualMachineScaleSetName === undefined || typeof virtualMachineScaleSetName.valueOf() !== 'string') {
                                throw new Error('virtualMachineScaleSetName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualmachineIndex === null || virtualmachineIndex === undefined || typeof virtualmachineIndex.valueOf() !== 'string') {
                                throw new Error('virtualmachineIndex cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualMachineScaleSetName}', encodeURIComponent(virtualMachineScaleSetName));
                        requestUrl = requestUrl.replace('{virtualmachineIndex}', encodeURIComponent(virtualmachineIndex));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network interfaces in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.listVirtualMachineScaleSetNetworkInterfacesWithHttpOperationResponse = function (resourceGroupName, virtualMachineScaleSetName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-03-30';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualMachineScaleSetName === null || virtualMachineScaleSetName === undefined || typeof virtualMachineScaleSetName.valueOf() !== 'string') {
                                throw new Error('virtualMachineScaleSetName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/networkInterfaces';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualMachineScaleSetName}', encodeURIComponent(virtualMachineScaleSetName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_13 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_13)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Get the specified network interface in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param
     * {NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams}
     * [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.getVirtualMachineScaleSetNetworkInterfaceWithHttpOperationResponse = function (resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, expand, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-03-30';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualMachineScaleSetName === null || virtualMachineScaleSetName === undefined || typeof virtualMachineScaleSetName.valueOf() !== 'string') {
                                throw new Error('virtualMachineScaleSetName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualmachineIndex === null || virtualmachineIndex === undefined || typeof virtualmachineIndex.valueOf() !== 'string') {
                                throw new Error('virtualmachineIndex cannot be null or undefined and it must be of type string.');
                            }
                            if (networkInterfaceName === null || networkInterfaceName === undefined || typeof networkInterfaceName.valueOf() !== 'string') {
                                throw new Error('networkInterfaceName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                                throw new Error('expand must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualMachineScaleSetName}', encodeURIComponent(virtualMachineScaleSetName));
                        requestUrl = requestUrl.replace('{virtualmachineIndex}', encodeURIComponent(virtualmachineIndex));
                        requestUrl = requestUrl.replace('{networkInterfaceName}', encodeURIComponent(networkInterfaceName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (expand !== null && expand !== undefined) {
                            queryParamsArray.push('$expand=' + encodeURIComponent(expand));
                        }
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterface"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_14 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_14)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, networkInterfaceName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_15;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkInterfaceName === null || networkInterfaceName === undefined || typeof networkInterfaceName.valueOf() !== 'string') {
                                throw new Error('networkInterfaceName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkInterfaceName}', encodeURIComponent(networkInterfaceName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204 && statusCode !== 202 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_15 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_15)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {NetworkInterface} parameters Parameters supplied to the create or
     * update network interface operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, networkInterfaceName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_16;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkInterfaceName === null || networkInterfaceName === undefined || typeof networkInterfaceName.valueOf() !== 'string') {
                                throw new Error('networkInterfaceName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkInterfaceName}', encodeURIComponent(networkInterfaceName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterface"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 201 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterface"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterface"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_16 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_16)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all route tables applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.beginGetEffectiveRouteTableWithHttpOperationResponse = function (resourceGroupName, networkInterfaceName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_17;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkInterfaceName === null || networkInterfaceName === undefined || typeof networkInterfaceName.valueOf() !== 'string') {
                                throw new Error('networkInterfaceName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/effectiveRouteTable';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkInterfaceName}', encodeURIComponent(networkInterfaceName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["EffectiveRouteListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_17 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_17)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network security groups applied to a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.beginListEffectiveNetworkSecurityGroupsWithHttpOperationResponse = function (resourceGroupName, networkInterfaceName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_18;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkInterfaceName === null || networkInterfaceName === undefined || typeof networkInterfaceName.valueOf() !== 'string') {
                                throw new Error('networkInterfaceName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/effectiveNetworkSecurityGroups';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkInterfaceName}', encodeURIComponent(networkInterfaceName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["EffectiveNetworkSecurityGroupListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_18 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_18)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network interfaces in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.listAllNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_19;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_19 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_19)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network interfaces in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_20;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_20 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_20)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets information about all network interfaces in a virtual machine in a
     * virtual machine scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.listVirtualMachineScaleSetVMNetworkInterfacesNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_21;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_21 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_21)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network interfaces in a virtual machine scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaces.prototype.listVirtualMachineScaleSetNetworkInterfacesNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_22;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_22 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_22)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    NetworkInterfaces.prototype.deleteMethod = function (resourceGroupName, networkInterfaceName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.get = function (resourceGroupName, networkInterfaceName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.createOrUpdate = function (resourceGroupName, networkInterfaceName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.listAll = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.getEffectiveRouteTable = function (resourceGroupName, networkInterfaceName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getEffectiveRouteTableWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getEffectiveRouteTableWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.listEffectiveNetworkSecurityGroups = function (resourceGroupName, networkInterfaceName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.listVirtualMachineScaleSetVMNetworkInterfaces = function (resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listVirtualMachineScaleSetVMNetworkInterfacesWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listVirtualMachineScaleSetVMNetworkInterfacesWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.listVirtualMachineScaleSetNetworkInterfaces = function (resourceGroupName, virtualMachineScaleSetName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listVirtualMachineScaleSetNetworkInterfacesWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listVirtualMachineScaleSetNetworkInterfacesWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.getVirtualMachineScaleSetNetworkInterface = function (resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getVirtualMachineScaleSetNetworkInterfaceWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getVirtualMachineScaleSetNetworkInterfaceWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.beginDeleteMethod = function (resourceGroupName, networkInterfaceName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.beginCreateOrUpdate = function (resourceGroupName, networkInterfaceName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.beginGetEffectiveRouteTable = function (resourceGroupName, networkInterfaceName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGetEffectiveRouteTableWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGetEffectiveRouteTableWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.beginListEffectiveNetworkSecurityGroups = function (resourceGroupName, networkInterfaceName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginListEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginListEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.listAllNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.listVirtualMachineScaleSetVMNetworkInterfacesNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listVirtualMachineScaleSetVMNetworkInterfacesNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listVirtualMachineScaleSetVMNetworkInterfacesNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaces.prototype.listVirtualMachineScaleSetNetworkInterfacesNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listVirtualMachineScaleSetNetworkInterfacesNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listVirtualMachineScaleSetNetworkInterfacesNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return NetworkInterfaces;
}());



/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NetworkInterfaceIPConfigurations; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a NetworkInterfaceIPConfigurations. */
var NetworkInterfaceIPConfigurations = /** @class */ (function () {
    /**
     * Create a NetworkInterfaceIPConfigurations.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function NetworkInterfaceIPConfigurations(client) {
        this.client = client;
    }
    /**
     * Get all ip configurations in a network interface
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaceIPConfigurations.prototype.listWithHttpOperationResponse = function (resourceGroupName, networkInterfaceName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkInterfaceName === null || networkInterfaceName === undefined || typeof networkInterfaceName.valueOf() !== 'string') {
                                throw new Error('networkInterfaceName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/ipConfigurations';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkInterfaceName}', encodeURIComponent(networkInterfaceName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceIPConfigurationListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified network interface ip configuration.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {string} ipConfigurationName The name of the ip configuration name.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaceIPConfigurations.prototype.getWithHttpOperationResponse = function (resourceGroupName, networkInterfaceName, ipConfigurationName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkInterfaceName === null || networkInterfaceName === undefined || typeof networkInterfaceName.valueOf() !== 'string') {
                                throw new Error('networkInterfaceName cannot be null or undefined and it must be of type string.');
                            }
                            if (ipConfigurationName === null || ipConfigurationName === undefined || typeof ipConfigurationName.valueOf() !== 'string') {
                                throw new Error('ipConfigurationName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/ipConfigurations/{ipConfigurationName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkInterfaceName}', encodeURIComponent(networkInterfaceName));
                        requestUrl = requestUrl.replace('{ipConfigurationName}', encodeURIComponent(ipConfigurationName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceIPConfiguration"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Get all ip configurations in a network interface
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaceIPConfigurations.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceIPConfigurationListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    NetworkInterfaceIPConfigurations.prototype.list = function (resourceGroupName, networkInterfaceName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaceIPConfigurations.prototype.get = function (resourceGroupName, networkInterfaceName, ipConfigurationName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, networkInterfaceName, ipConfigurationName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, networkInterfaceName, ipConfigurationName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaceIPConfigurations.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return NetworkInterfaceIPConfigurations;
}());



/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NetworkInterfaceLoadBalancers; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a NetworkInterfaceLoadBalancers. */
var NetworkInterfaceLoadBalancers = /** @class */ (function () {
    /**
     * Create a NetworkInterfaceLoadBalancers.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function NetworkInterfaceLoadBalancers(client) {
        this.client = client;
    }
    /**
     * List all load balancers in a network interface.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaceLoadBalancers.prototype.listWithHttpOperationResponse = function (resourceGroupName, networkInterfaceName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkInterfaceName === null || networkInterfaceName === undefined || typeof networkInterfaceName.valueOf() !== 'string') {
                                throw new Error('networkInterfaceName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/loadBalancers';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkInterfaceName}', encodeURIComponent(networkInterfaceName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceLoadBalancerListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * List all load balancers in a network interface.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkInterfaceLoadBalancers.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkInterfaceLoadBalancerListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    NetworkInterfaceLoadBalancers.prototype.list = function (resourceGroupName, networkInterfaceName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkInterfaceLoadBalancers.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return NetworkInterfaceLoadBalancers;
}());



/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NetworkSecurityGroups; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a NetworkSecurityGroups. */
var NetworkSecurityGroups = /** @class */ (function () {
    /**
     * Create a NetworkSecurityGroups.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function NetworkSecurityGroups(client) {
        this.client = client;
    }
    /**
     * Deletes the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkSecurityGroups.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {NetworkSecurityGroupsGetOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkSecurityGroups.prototype.getWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, expand, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
                                throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                                throw new Error('expand must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (expand !== null && expand !== undefined) {
                            queryParamsArray.push('$expand=' + encodeURIComponent(expand));
                        }
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkSecurityGroup"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a network security group in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {NetworkSecurityGroup} parameters Parameters supplied to the create
     * or update network security group operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkSecurityGroups.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkSecurityGroup"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network security groups in a subscription.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkSecurityGroups.prototype.listAllWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/networkSecurityGroups';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkSecurityGroupListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network security groups in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkSecurityGroups.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkSecurityGroupListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkSecurityGroups.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
                                throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 202 && statusCode !== 200 && statusCode !== 204) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a network security group in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {NetworkSecurityGroup} parameters Parameters supplied to the create
     * or update network security group operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkSecurityGroups.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
                                throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkSecurityGroup"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 201 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkSecurityGroup"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkSecurityGroup"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network security groups in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkSecurityGroups.prototype.listAllNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkSecurityGroupListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network security groups in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkSecurityGroups.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkSecurityGroupListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    NetworkSecurityGroups.prototype.deleteMethod = function (resourceGroupName, networkSecurityGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkSecurityGroups.prototype.get = function (resourceGroupName, networkSecurityGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkSecurityGroups.prototype.createOrUpdate = function (resourceGroupName, networkSecurityGroupName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkSecurityGroups.prototype.listAll = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkSecurityGroups.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkSecurityGroups.prototype.beginDeleteMethod = function (resourceGroupName, networkSecurityGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkSecurityGroups.prototype.beginCreateOrUpdate = function (resourceGroupName, networkSecurityGroupName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkSecurityGroups.prototype.listAllNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkSecurityGroups.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return NetworkSecurityGroups;
}());



/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SecurityRules; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a SecurityRules. */
var SecurityRules = /** @class */ (function () {
    /**
     * Create a SecurityRules.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function SecurityRules(client) {
        this.client = client;
    }
    /**
     * Deletes the specified network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    SecurityRules.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, securityRuleName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Get the specified network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    SecurityRules.prototype.getWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, securityRuleName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
                                throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (securityRuleName === null || securityRuleName === undefined || typeof securityRuleName.valueOf() !== 'string') {
                                throw new Error('securityRuleName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
                        requestUrl = requestUrl.replace('{securityRuleName}', encodeURIComponent(securityRuleName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityRule"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a security rule in the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {SecurityRule} securityRuleParameters Parameters supplied to the
     * create or update network security rule operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    SecurityRules.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityRule"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all security rules in a network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    SecurityRules.prototype.listWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
                                throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityRuleListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    SecurityRules.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, securityRuleName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
                                throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (securityRuleName === null || securityRuleName === undefined || typeof securityRuleName.valueOf() !== 'string') {
                                throw new Error('securityRuleName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
                        requestUrl = requestUrl.replace('{securityRuleName}', encodeURIComponent(securityRuleName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204 && statusCode !== 202 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a security rule in the specified network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} securityRuleName The name of the security rule.
     *
     * @param {SecurityRule} securityRuleParameters Parameters supplied to the
     * create or update network security rule operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    SecurityRules.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
                                throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (securityRuleName === null || securityRuleName === undefined || typeof securityRuleName.valueOf() !== 'string') {
                                throw new Error('securityRuleName cannot be null or undefined and it must be of type string.');
                            }
                            if (securityRuleParameters === null || securityRuleParameters === undefined) {
                                throw new Error('securityRuleParameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
                        requestUrl = requestUrl.replace('{securityRuleName}', encodeURIComponent(securityRuleName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (securityRuleParameters !== null && securityRuleParameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityRule"];
                                requestModel = client.serializer.serialize(requestModelMapper, securityRuleParameters, 'securityRuleParameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(securityRuleParameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityRule"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityRule"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all security rules in a network security group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    SecurityRules.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityRuleListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    SecurityRules.prototype.deleteMethod = function (resourceGroupName, networkSecurityGroupName, securityRuleName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    SecurityRules.prototype.get = function (resourceGroupName, networkSecurityGroupName, securityRuleName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    SecurityRules.prototype.createOrUpdate = function (resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    SecurityRules.prototype.list = function (resourceGroupName, networkSecurityGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    SecurityRules.prototype.beginDeleteMethod = function (resourceGroupName, networkSecurityGroupName, securityRuleName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    SecurityRules.prototype.beginCreateOrUpdate = function (resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    SecurityRules.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return SecurityRules;
}());



/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DefaultSecurityRules; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a DefaultSecurityRules. */
var DefaultSecurityRules = /** @class */ (function () {
    /**
     * Create a DefaultSecurityRules.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function DefaultSecurityRules(client) {
        this.client = client;
    }
    /**
     * Gets all default security rules in a network security group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    DefaultSecurityRules.prototype.listWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
                                throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/defaultSecurityRules';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityRuleListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Get the specified default network security rule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkSecurityGroupName The name of the network security
     * group.
     *
     * @param {string} defaultSecurityRuleName The name of the default security
     * rule.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    DefaultSecurityRules.prototype.getWithHttpOperationResponse = function (resourceGroupName, networkSecurityGroupName, defaultSecurityRuleName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkSecurityGroupName === null || networkSecurityGroupName === undefined || typeof networkSecurityGroupName.valueOf() !== 'string') {
                                throw new Error('networkSecurityGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (defaultSecurityRuleName === null || defaultSecurityRuleName === undefined || typeof defaultSecurityRuleName.valueOf() !== 'string') {
                                throw new Error('defaultSecurityRuleName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/defaultSecurityRules/{defaultSecurityRuleName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkSecurityGroupName}', encodeURIComponent(networkSecurityGroupName));
                        requestUrl = requestUrl.replace('{defaultSecurityRuleName}', encodeURIComponent(defaultSecurityRuleName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityRule"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all default security rules in a network security group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    DefaultSecurityRules.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityRuleListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    DefaultSecurityRules.prototype.list = function (resourceGroupName, networkSecurityGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    DefaultSecurityRules.prototype.get = function (resourceGroupName, networkSecurityGroupName, defaultSecurityRuleName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, defaultSecurityRuleName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, networkSecurityGroupName, defaultSecurityRuleName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    DefaultSecurityRules.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return DefaultSecurityRules;
}());



/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NetworkWatchers; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a NetworkWatchers. */
var NetworkWatchers = /** @class */ (function () {
    /**
     * Create a NetworkWatchers.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function NetworkWatchers(client) {
        this.client = client;
    }
    /**
     * Creates or updates a network watcher in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {NetworkWatcher} parameters Parameters that define the network
     * watcher resource.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkWatcher"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkWatcher"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkWatcher"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified network watcher by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.getWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkWatcher"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified network watcher resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_3, operationRes, err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkWatcherName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network watchers by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkWatcherListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all network watchers by subscription.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.listAllWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/networkWatchers';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NetworkWatcherListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the current network topology by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {TopologyParameters} parameters Parameters that define the
     * representation of topology.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.getTopologyWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/topology';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["TopologyParameters"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["Topology"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Verify IP flow from the specified VM to a location given the currently
     * configured NSG rules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {VerificationIPFlowParameters} parameters Parameters that define the
     * IP flow to be verified.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.verifyIPFlowWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_8, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginVerifyIPFlowWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VerificationIPFlowResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the next hop from the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {NextHopParameters} parameters Parameters that define the source and
     * destination endpoint.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.getNextHopWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_10, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGetNextHopWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NextHopResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {SecurityGroupViewParameters} parameters Parameters that define the
     * VM to check security groups for.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.getVMSecurityRulesWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_12, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGetVMSecurityRulesWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityGroupViewResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_13 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_13)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Initiate troubleshooting on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {TroubleshootingParameters} parameters Parameters that define the
     * resource to troubleshoot.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.getTroubleshootingWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_14, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_15;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGetTroubleshootingWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_14 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_14)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["TroubleshootingResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_15 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_15)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Get the last completed troubleshooting result on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {QueryTroubleshootingParameters} parameters Parameters that define
     * the resource to query the troubleshooting result.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.getTroubleshootingResultWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_16, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_17;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGetTroubleshootingResultWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_16 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_16)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["TroubleshootingResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_17 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_17)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Configures flow log on a specified resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {FlowLogInformation} parameters Parameters that define the
     * configuration of flow log.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.setFlowLogConfigurationWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_18, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_19;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginSetFlowLogConfigurationWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_18 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_18)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["FlowLogInformation"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_19 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_19)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Queries status of flow log on a specified resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {FlowLogStatusParameters} parameters Parameters that define a
     * resource to query flow log status.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.getFlowLogStatusWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_20, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_21;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGetFlowLogStatusWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_20 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_20)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["FlowLogInformation"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_21 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_21)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Verifies the possibility of establishing a direct TCP connection from a
     * virtual machine to a given endpoint including another VM or an arbitrary
     * remote server.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {ConnectivityParameters} parameters Parameters that determine how the
     * connectivity check will be performed.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.checkConnectivityWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_22, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_23;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCheckConnectivityWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_22 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_22)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ConnectivityInformation"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_23 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_23)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified network watcher resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_24;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 202 && statusCode !== 204) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_24 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_24)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Verify IP flow from the specified VM to a location given the currently
     * configured NSG rules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {VerificationIPFlowParameters} parameters Parameters that define the
     * IP flow to be verified.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.beginVerifyIPFlowWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_25;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VerificationIPFlowParameters"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VerificationIPFlowResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 202) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VerificationIPFlowResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_25 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_25)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the next hop from the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {NextHopParameters} parameters Parameters that define the source and
     * destination endpoint.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.beginGetNextHopWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_26;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/nextHop';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NextHopParameters"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NextHopResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 202) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["NextHopResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_26 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_26)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {SecurityGroupViewParameters} parameters Parameters that define the
     * VM to check security groups for.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.beginGetVMSecurityRulesWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_27;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/securityGroupView';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityGroupViewParameters"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityGroupViewResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 202) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SecurityGroupViewResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_27 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_27)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Initiate troubleshooting on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {TroubleshootingParameters} parameters Parameters that define the
     * resource to troubleshoot.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.beginGetTroubleshootingWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_28;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/troubleshoot';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["TroubleshootingParameters"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["TroubleshootingResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 202) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["TroubleshootingResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_28 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_28)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Get the last completed troubleshooting result on a specified resource
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {QueryTroubleshootingParameters} parameters Parameters that define
     * the resource to query the troubleshooting result.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.beginGetTroubleshootingResultWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_29;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryTroubleshootResult';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["QueryTroubleshootingParameters"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["TroubleshootingResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 202) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["TroubleshootingResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_29 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_29)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Configures flow log on a specified resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {FlowLogInformation} parameters Parameters that define the
     * configuration of flow log.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.beginSetFlowLogConfigurationWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_30;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/configureFlowLog';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["FlowLogInformation"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["FlowLogInformation"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 202) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["FlowLogInformation"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_30 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_30)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Queries status of flow log on a specified resource.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {FlowLogStatusParameters} parameters Parameters that define a
     * resource to query flow log status.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.beginGetFlowLogStatusWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_31;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryFlowLogStatus';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["FlowLogStatusParameters"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["FlowLogInformation"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 202) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["FlowLogInformation"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_31 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_31)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Verifies the possibility of establishing a direct TCP connection from a
     * virtual machine to a given endpoint including another VM or an arbitrary
     * remote server.
     *
     * @param {string} resourceGroupName The name of the network watcher resource
     * group.
     *
     * @param {string} networkWatcherName The name of the network watcher resource.
     *
     * @param {ConnectivityParameters} parameters Parameters that determine how the
     * connectivity check will be performed.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    NetworkWatchers.prototype.beginCheckConnectivityWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_32;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectivityCheck';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ConnectivityParameters"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ConnectivityInformation"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 202) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ConnectivityInformation"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_32 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_32)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    NetworkWatchers.prototype.createOrUpdate = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.get = function (resourceGroupName, networkWatcherName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, networkWatcherName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, networkWatcherName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.deleteMethod = function (resourceGroupName, networkWatcherName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, networkWatcherName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, networkWatcherName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.listAll = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.getTopology = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getTopologyWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getTopologyWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.verifyIPFlow = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.verifyIPFlowWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.verifyIPFlowWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.getNextHop = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getNextHopWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getNextHopWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.getVMSecurityRules = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getVMSecurityRulesWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getVMSecurityRulesWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.getTroubleshooting = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getTroubleshootingWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getTroubleshootingWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.getTroubleshootingResult = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getTroubleshootingResultWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getTroubleshootingResultWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.setFlowLogConfiguration = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.setFlowLogConfigurationWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.setFlowLogConfigurationWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.getFlowLogStatus = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getFlowLogStatusWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getFlowLogStatusWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.checkConnectivity = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.checkConnectivityWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.checkConnectivityWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.beginDeleteMethod = function (resourceGroupName, networkWatcherName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkWatcherName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkWatcherName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.beginVerifyIPFlow = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginVerifyIPFlowWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginVerifyIPFlowWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.beginGetNextHop = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGetNextHopWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGetNextHopWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.beginGetVMSecurityRules = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGetVMSecurityRulesWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGetVMSecurityRulesWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.beginGetTroubleshooting = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGetTroubleshootingWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGetTroubleshootingWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.beginGetTroubleshootingResult = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGetTroubleshootingResultWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGetTroubleshootingResultWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.beginSetFlowLogConfiguration = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginSetFlowLogConfigurationWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginSetFlowLogConfigurationWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.beginGetFlowLogStatus = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGetFlowLogStatusWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGetFlowLogStatusWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    NetworkWatchers.prototype.beginCheckConnectivity = function (resourceGroupName, networkWatcherName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCheckConnectivityWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCheckConnectivityWithHttpOperationResponse(resourceGroupName, networkWatcherName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return NetworkWatchers;
}());



/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PacketCaptures; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a PacketCaptures. */
var PacketCaptures = /** @class */ (function () {
    /**
     * Create a PacketCaptures.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function PacketCaptures(client) {
        this.client = client;
    }
    /**
     * Create and start a packet capture on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {PacketCapture} parameters Parameters that define the create packet
     * capture operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PacketCaptures.prototype.createWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, packetCaptureName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PacketCaptureResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets a packet capture session by name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PacketCaptures.prototype.getWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, packetCaptureName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (packetCaptureName === null || packetCaptureName === undefined || typeof packetCaptureName.valueOf() !== 'string') {
                                throw new Error('packetCaptureName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{packetCaptureName}', encodeURIComponent(packetCaptureName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PacketCaptureResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PacketCaptures.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, packetCaptureName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Stops a specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PacketCaptures.prototype.stopWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, packetCaptureName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_6, operationRes, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginStopWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Query the status of a running packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} packetCaptureName The name given to the packet capture
     * session.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PacketCaptures.prototype.getStatusWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, packetCaptureName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_8, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGetStatusWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PacketCaptureQueryStatusResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Lists all packet capture sessions within the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PacketCaptures.prototype.listWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PacketCaptureListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Create and start a packet capture on the specified VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {PacketCapture} parameters Parameters that define the create packet
     * capture operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PacketCaptures.prototype.beginCreateWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, packetCaptureName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (packetCaptureName === null || packetCaptureName === undefined || typeof packetCaptureName.valueOf() !== 'string') {
                                throw new Error('packetCaptureName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{packetCaptureName}', encodeURIComponent(packetCaptureName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PacketCapture"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PacketCaptureResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PacketCaptures.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, packetCaptureName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (packetCaptureName === null || packetCaptureName === undefined || typeof packetCaptureName.valueOf() !== 'string') {
                                throw new Error('packetCaptureName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{packetCaptureName}', encodeURIComponent(packetCaptureName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Stops a specified packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the network watcher.
     *
     * @param {string} packetCaptureName The name of the packet capture session.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PacketCaptures.prototype.beginStopWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, packetCaptureName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (packetCaptureName === null || packetCaptureName === undefined || typeof packetCaptureName.valueOf() !== 'string') {
                                throw new Error('packetCaptureName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}/stop';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{packetCaptureName}', encodeURIComponent(packetCaptureName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_13 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_13)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Query the status of a running packet capture session.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} networkWatcherName The name of the Network Watcher resource.
     *
     * @param {string} packetCaptureName The name given to the packet capture
     * session.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PacketCaptures.prototype.beginGetStatusWithHttpOperationResponse = function (resourceGroupName, networkWatcherName, packetCaptureName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (networkWatcherName === null || networkWatcherName === undefined || typeof networkWatcherName.valueOf() !== 'string') {
                                throw new Error('networkWatcherName cannot be null or undefined and it must be of type string.');
                            }
                            if (packetCaptureName === null || packetCaptureName === undefined || typeof packetCaptureName.valueOf() !== 'string') {
                                throw new Error('packetCaptureName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}/queryStatus';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{networkWatcherName}', encodeURIComponent(networkWatcherName));
                        requestUrl = requestUrl.replace('{packetCaptureName}', encodeURIComponent(packetCaptureName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PacketCaptureQueryStatusResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 202) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PacketCaptureQueryStatusResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_14 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_14)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    PacketCaptures.prototype.create = function (resourceGroupName, networkWatcherName, packetCaptureName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PacketCaptures.prototype.get = function (resourceGroupName, networkWatcherName, packetCaptureName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PacketCaptures.prototype.deleteMethod = function (resourceGroupName, networkWatcherName, packetCaptureName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PacketCaptures.prototype.stop = function (resourceGroupName, networkWatcherName, packetCaptureName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.stopWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.stopWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PacketCaptures.prototype.getStatus = function (resourceGroupName, networkWatcherName, packetCaptureName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getStatusWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getStatusWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PacketCaptures.prototype.list = function (resourceGroupName, networkWatcherName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, networkWatcherName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, networkWatcherName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PacketCaptures.prototype.beginCreate = function (resourceGroupName, networkWatcherName, packetCaptureName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PacketCaptures.prototype.beginDeleteMethod = function (resourceGroupName, networkWatcherName, packetCaptureName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PacketCaptures.prototype.beginStop = function (resourceGroupName, networkWatcherName, packetCaptureName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginStopWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginStopWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PacketCaptures.prototype.beginGetStatus = function (resourceGroupName, networkWatcherName, packetCaptureName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGetStatusWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGetStatusWithHttpOperationResponse(resourceGroupName, networkWatcherName, packetCaptureName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return PacketCaptures;
}());



/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PublicIPAddresses; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a PublicIPAddresses. */
var PublicIPAddresses = /** @class */ (function () {
    /**
     * Create a PublicIPAddresses.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function PublicIPAddresses(client) {
        this.client = client;
    }
    /**
     * Deletes the specified public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the subnet.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, publicIpAddressName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, publicIpAddressName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified public IP address in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the subnet.
     *
     * @param {PublicIPAddressesGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.getWithHttpOperationResponse = function (resourceGroupName, publicIpAddressName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, expand, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (publicIpAddressName === null || publicIpAddressName === undefined || typeof publicIpAddressName.valueOf() !== 'string') {
                                throw new Error('publicIpAddressName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                                throw new Error('expand must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{publicIpAddressName}', encodeURIComponent(publicIpAddressName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (expand !== null && expand !== undefined) {
                            queryParamsArray.push('$expand=' + encodeURIComponent(expand));
                        }
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddress"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a static or dynamic public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the public IP address.
     *
     * @param {PublicIPAddress} parameters Parameters supplied to the create or
     * update public IP address operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, publicIpAddressName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, publicIpAddressName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddress"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the public IP addresses in a subscription.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.listAllWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/publicIPAddresses';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddressListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all public IP addresses in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddressListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets information about all public IP addresses on a virtual machine scale
     * set level.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.listVirtualMachineScaleSetPublicIPAddressesWithHttpOperationResponse = function (resourceGroupName, virtualMachineScaleSetName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-03-30';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualMachineScaleSetName === null || virtualMachineScaleSetName === undefined || typeof virtualMachineScaleSetName.valueOf() !== 'string') {
                                throw new Error('virtualMachineScaleSetName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/publicipaddresses';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualMachineScaleSetName}', encodeURIComponent(virtualMachineScaleSetName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddressListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets information about all public IP addresses in a virtual machine IP
     * configuration in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The network interface name.
     *
     * @param {string} ipConfigurationName The IP configuration name.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.listVirtualMachineScaleSetVMPublicIPAddressesWithHttpOperationResponse = function (resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, ipConfigurationName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-03-30';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualMachineScaleSetName === null || virtualMachineScaleSetName === undefined || typeof virtualMachineScaleSetName.valueOf() !== 'string') {
                                throw new Error('virtualMachineScaleSetName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualmachineIndex === null || virtualmachineIndex === undefined || typeof virtualmachineIndex.valueOf() !== 'string') {
                                throw new Error('virtualmachineIndex cannot be null or undefined and it must be of type string.');
                            }
                            if (networkInterfaceName === null || networkInterfaceName === undefined || typeof networkInterfaceName.valueOf() !== 'string') {
                                throw new Error('networkInterfaceName cannot be null or undefined and it must be of type string.');
                            }
                            if (ipConfigurationName === null || ipConfigurationName === undefined || typeof ipConfigurationName.valueOf() !== 'string') {
                                throw new Error('ipConfigurationName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualMachineScaleSetName}', encodeURIComponent(virtualMachineScaleSetName));
                        requestUrl = requestUrl.replace('{virtualmachineIndex}', encodeURIComponent(virtualmachineIndex));
                        requestUrl = requestUrl.replace('{networkInterfaceName}', encodeURIComponent(networkInterfaceName));
                        requestUrl = requestUrl.replace('{ipConfigurationName}', encodeURIComponent(ipConfigurationName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddressListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Get the specified public IP address in a virtual machine scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualMachineScaleSetName The name of the virtual machine
     * scale set.
     *
     * @param {string} virtualmachineIndex The virtual machine index.
     *
     * @param {string} networkInterfaceName The name of the network interface.
     *
     * @param {string} ipConfigurationName The name of the IP configuration.
     *
     * @param {string} publicIpAddressName The name of the public IP Address.
     *
     * @param
     * {PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptionalParams}
     * [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.getVirtualMachineScaleSetPublicIPAddressWithHttpOperationResponse = function (resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, ipConfigurationName, publicIpAddressName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, expand, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-03-30';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualMachineScaleSetName === null || virtualMachineScaleSetName === undefined || typeof virtualMachineScaleSetName.valueOf() !== 'string') {
                                throw new Error('virtualMachineScaleSetName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualmachineIndex === null || virtualmachineIndex === undefined || typeof virtualmachineIndex.valueOf() !== 'string') {
                                throw new Error('virtualmachineIndex cannot be null or undefined and it must be of type string.');
                            }
                            if (networkInterfaceName === null || networkInterfaceName === undefined || typeof networkInterfaceName.valueOf() !== 'string') {
                                throw new Error('networkInterfaceName cannot be null or undefined and it must be of type string.');
                            }
                            if (ipConfigurationName === null || ipConfigurationName === undefined || typeof ipConfigurationName.valueOf() !== 'string') {
                                throw new Error('ipConfigurationName cannot be null or undefined and it must be of type string.');
                            }
                            if (publicIpAddressName === null || publicIpAddressName === undefined || typeof publicIpAddressName.valueOf() !== 'string') {
                                throw new Error('publicIpAddressName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                                throw new Error('expand must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses/{publicIpAddressName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualMachineScaleSetName}', encodeURIComponent(virtualMachineScaleSetName));
                        requestUrl = requestUrl.replace('{virtualmachineIndex}', encodeURIComponent(virtualmachineIndex));
                        requestUrl = requestUrl.replace('{networkInterfaceName}', encodeURIComponent(networkInterfaceName));
                        requestUrl = requestUrl.replace('{ipConfigurationName}', encodeURIComponent(ipConfigurationName));
                        requestUrl = requestUrl.replace('{publicIpAddressName}', encodeURIComponent(publicIpAddressName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (expand !== null && expand !== undefined) {
                            queryParamsArray.push('$expand=' + encodeURIComponent(expand));
                        }
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddress"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the subnet.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, publicIpAddressName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (publicIpAddressName === null || publicIpAddressName === undefined || typeof publicIpAddressName.valueOf() !== 'string') {
                                throw new Error('publicIpAddressName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{publicIpAddressName}', encodeURIComponent(publicIpAddressName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204 && statusCode !== 202 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a static or dynamic public IP address.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} publicIpAddressName The name of the public IP address.
     *
     * @param {PublicIPAddress} parameters Parameters supplied to the create or
     * update public IP address operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, publicIpAddressName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (publicIpAddressName === null || publicIpAddressName === undefined || typeof publicIpAddressName.valueOf() !== 'string') {
                                throw new Error('publicIpAddressName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{publicIpAddressName}', encodeURIComponent(publicIpAddressName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddress"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 201 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddress"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddress"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the public IP addresses in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.listAllNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddressListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_13 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_13)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all public IP addresses in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddressListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_14 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_14)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets information about all public IP addresses on a virtual machine scale
     * set level.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.listVirtualMachineScaleSetPublicIPAddressesNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_15;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddressListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_15 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_15)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets information about all public IP addresses in a virtual machine IP
     * configuration in a virtual machine scale set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    PublicIPAddresses.prototype.listVirtualMachineScaleSetVMPublicIPAddressesNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_16;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PublicIPAddressListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_16 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_16)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    PublicIPAddresses.prototype.deleteMethod = function (resourceGroupName, publicIpAddressName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, publicIpAddressName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, publicIpAddressName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.get = function (resourceGroupName, publicIpAddressName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, publicIpAddressName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, publicIpAddressName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.createOrUpdate = function (resourceGroupName, publicIpAddressName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, publicIpAddressName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, publicIpAddressName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.listAll = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.listVirtualMachineScaleSetPublicIPAddresses = function (resourceGroupName, virtualMachineScaleSetName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listVirtualMachineScaleSetPublicIPAddressesWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listVirtualMachineScaleSetPublicIPAddressesWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.listVirtualMachineScaleSetVMPublicIPAddresses = function (resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, ipConfigurationName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listVirtualMachineScaleSetVMPublicIPAddressesWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, ipConfigurationName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listVirtualMachineScaleSetVMPublicIPAddressesWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, ipConfigurationName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.getVirtualMachineScaleSetPublicIPAddress = function (resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, ipConfigurationName, publicIpAddressName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getVirtualMachineScaleSetPublicIPAddressWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, ipConfigurationName, publicIpAddressName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getVirtualMachineScaleSetPublicIPAddressWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, ipConfigurationName, publicIpAddressName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.beginDeleteMethod = function (resourceGroupName, publicIpAddressName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, publicIpAddressName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, publicIpAddressName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.beginCreateOrUpdate = function (resourceGroupName, publicIpAddressName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, publicIpAddressName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, publicIpAddressName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.listAllNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.listVirtualMachineScaleSetPublicIPAddressesNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listVirtualMachineScaleSetPublicIPAddressesNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listVirtualMachineScaleSetPublicIPAddressesNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    PublicIPAddresses.prototype.listVirtualMachineScaleSetVMPublicIPAddressesNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listVirtualMachineScaleSetVMPublicIPAddressesNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listVirtualMachineScaleSetVMPublicIPAddressesNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return PublicIPAddresses;
}());



/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RouteFilters; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a RouteFilters. */
var RouteFilters = /** @class */ (function () {
    /**
     * Create a RouteFilters.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function RouteFilters(client) {
        this.client = client;
    }
    /**
     * Deletes the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilters.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, routeFilterName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, routeFilterName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {RouteFiltersGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilters.prototype.getWithHttpOperationResponse = function (resourceGroupName, routeFilterName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, expand, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterName === null || routeFilterName === undefined || typeof routeFilterName.valueOf() !== 'string') {
                                throw new Error('routeFilterName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                                throw new Error('expand must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeFilterName}', encodeURIComponent(routeFilterName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (expand !== null && expand !== undefined) {
                            queryParamsArray.push('$expand=' + encodeURIComponent(expand));
                        }
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilter"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {RouteFilter} routeFilterParameters Parameters supplied to the create
     * or update route filter operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilters.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, routeFilterName, routeFilterParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, routeFilterParameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilter"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {PatchRouteFilter} routeFilterParameters Parameters supplied to the
     * update route filter operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilters.prototype.updateWithHttpOperationResponse = function (resourceGroupName, routeFilterName, routeFilterParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_6, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, routeFilterParameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilter"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all route filters in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilters.prototype.listByResourceGroupWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all route filters in a subscription.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilters.prototype.listWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/routeFilters';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilters.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, routeFilterName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterName === null || routeFilterName === undefined || typeof routeFilterName.valueOf() !== 'string') {
                                throw new Error('routeFilterName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeFilterName}', encodeURIComponent(routeFilterName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 202 && statusCode !== 200 && statusCode !== 204) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {RouteFilter} routeFilterParameters Parameters supplied to the create
     * or update route filter operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilters.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, routeFilterName, routeFilterParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterName === null || routeFilterName === undefined || typeof routeFilterName.valueOf() !== 'string') {
                                throw new Error('routeFilterName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterParameters === null || routeFilterParameters === undefined) {
                                throw new Error('routeFilterParameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeFilterName}', encodeURIComponent(routeFilterName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (routeFilterParameters !== null && routeFilterParameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilter"];
                                requestModel = client.serializer.serialize(requestModelMapper, routeFilterParameters, 'routeFilterParameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(routeFilterParameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilter"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilter"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Updates a route filter in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {PatchRouteFilter} routeFilterParameters Parameters supplied to the
     * update route filter operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilters.prototype.beginUpdateWithHttpOperationResponse = function (resourceGroupName, routeFilterName, routeFilterParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterName === null || routeFilterName === undefined || typeof routeFilterName.valueOf() !== 'string') {
                                throw new Error('routeFilterName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterParameters === null || routeFilterParameters === undefined) {
                                throw new Error('routeFilterParameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeFilterName}', encodeURIComponent(routeFilterName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PATCH';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (routeFilterParameters !== null && routeFilterParameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PatchRouteFilter"];
                                requestModel = client.serializer.serialize(requestModelMapper, routeFilterParameters, 'routeFilterParameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(routeFilterParameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilter"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all route filters in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilters.prototype.listByResourceGroupNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_13 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_13)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all route filters in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilters.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_14 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_14)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    RouteFilters.prototype.deleteMethod = function (resourceGroupName, routeFilterName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, routeFilterName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, routeFilterName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilters.prototype.get = function (resourceGroupName, routeFilterName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, routeFilterName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, routeFilterName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilters.prototype.createOrUpdate = function (resourceGroupName, routeFilterName, routeFilterParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, routeFilterParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, routeFilterParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilters.prototype.update = function (resourceGroupName, routeFilterName, routeFilterParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.updateWithHttpOperationResponse(resourceGroupName, routeFilterName, routeFilterParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.updateWithHttpOperationResponse(resourceGroupName, routeFilterName, routeFilterParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilters.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listByResourceGroupWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listByResourceGroupWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilters.prototype.list = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilters.prototype.beginDeleteMethod = function (resourceGroupName, routeFilterName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, routeFilterName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, routeFilterName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilters.prototype.beginCreateOrUpdate = function (resourceGroupName, routeFilterName, routeFilterParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, routeFilterParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, routeFilterParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilters.prototype.beginUpdate = function (resourceGroupName, routeFilterName, routeFilterParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, routeFilterParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, routeFilterParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilters.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilters.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return RouteFilters;
}());



/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RouteFilterRules; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a RouteFilterRules. */
var RouteFilterRules = /** @class */ (function () {
    /**
     * Create a RouteFilterRules.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function RouteFilterRules(client) {
        this.client = client;
    }
    /**
     * Deletes the specified rule from a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilterRules.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, routeFilterName, ruleName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified rule from a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilterRules.prototype.getWithHttpOperationResponse = function (resourceGroupName, routeFilterName, ruleName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterName === null || routeFilterName === undefined || typeof routeFilterName.valueOf() !== 'string') {
                                throw new Error('routeFilterName cannot be null or undefined and it must be of type string.');
                            }
                            if (ruleName === null || ruleName === undefined || typeof ruleName.valueOf() !== 'string') {
                                throw new Error('ruleName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeFilterName}', encodeURIComponent(routeFilterName));
                        requestUrl = requestUrl.replace('{ruleName}', encodeURIComponent(ruleName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterRule"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {RouteFilterRule} routeFilterRuleParameters Parameters supplied to
     * the create or update route filter rule operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilterRules.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterRule"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {PatchRouteFilterRule} routeFilterRuleParameters Parameters supplied
     * to the update route filter rule operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilterRules.prototype.updateWithHttpOperationResponse = function (resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_6, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterRule"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all RouteFilterRules in a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilterRules.prototype.listByRouteFilterWithHttpOperationResponse = function (resourceGroupName, routeFilterName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterName === null || routeFilterName === undefined || typeof routeFilterName.valueOf() !== 'string') {
                                throw new Error('routeFilterName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeFilterName}', encodeURIComponent(routeFilterName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterRuleListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified rule from a route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the rule.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilterRules.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, routeFilterName, ruleName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterName === null || routeFilterName === undefined || typeof routeFilterName.valueOf() !== 'string') {
                                throw new Error('routeFilterName cannot be null or undefined and it must be of type string.');
                            }
                            if (ruleName === null || ruleName === undefined || typeof ruleName.valueOf() !== 'string') {
                                throw new Error('ruleName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeFilterName}', encodeURIComponent(routeFilterName));
                        requestUrl = requestUrl.replace('{ruleName}', encodeURIComponent(ruleName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 202 && statusCode !== 200 && statusCode !== 204) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {RouteFilterRule} routeFilterRuleParameters Parameters supplied to
     * the create or update route filter rule operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilterRules.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        if (routeFilterRuleParameters === null || routeFilterRuleParameters === undefined) {
                            routeFilterRuleParameters = {};
                        }
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterName === null || routeFilterName === undefined || typeof routeFilterName.valueOf() !== 'string') {
                                throw new Error('routeFilterName cannot be null or undefined and it must be of type string.');
                            }
                            if (ruleName === null || ruleName === undefined || typeof ruleName.valueOf() !== 'string') {
                                throw new Error('ruleName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterRuleParameters === null || routeFilterRuleParameters === undefined) {
                                throw new Error('routeFilterRuleParameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeFilterName}', encodeURIComponent(routeFilterName));
                        requestUrl = requestUrl.replace('{ruleName}', encodeURIComponent(ruleName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (routeFilterRuleParameters !== null && routeFilterRuleParameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterRule"];
                                requestModel = client.serializer.serialize(requestModelMapper, routeFilterRuleParameters, 'routeFilterRuleParameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(routeFilterRuleParameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterRule"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterRule"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Updates a route in the specified route filter.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeFilterName The name of the route filter.
     *
     * @param {string} ruleName The name of the route filter rule.
     *
     * @param {PatchRouteFilterRule} routeFilterRuleParameters Parameters supplied
     * to the update route filter rule operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilterRules.prototype.beginUpdateWithHttpOperationResponse = function (resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        if (routeFilterRuleParameters === null || routeFilterRuleParameters === undefined) {
                            routeFilterRuleParameters = {};
                        }
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterName === null || routeFilterName === undefined || typeof routeFilterName.valueOf() !== 'string') {
                                throw new Error('routeFilterName cannot be null or undefined and it must be of type string.');
                            }
                            if (ruleName === null || ruleName === undefined || typeof ruleName.valueOf() !== 'string') {
                                throw new Error('ruleName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeFilterRuleParameters === null || routeFilterRuleParameters === undefined) {
                                throw new Error('routeFilterRuleParameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeFilterName}', encodeURIComponent(routeFilterName));
                        requestUrl = requestUrl.replace('{ruleName}', encodeURIComponent(ruleName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PATCH';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (routeFilterRuleParameters !== null && routeFilterRuleParameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["PatchRouteFilterRule"];
                                requestModel = client.serializer.serialize(requestModelMapper, routeFilterRuleParameters, 'routeFilterRuleParameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(routeFilterRuleParameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterRule"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all RouteFilterRules in a route filter.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteFilterRules.prototype.listByRouteFilterNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteFilterRuleListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    RouteFilterRules.prototype.deleteMethod = function (resourceGroupName, routeFilterName, ruleName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilterRules.prototype.get = function (resourceGroupName, routeFilterName, ruleName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilterRules.prototype.createOrUpdate = function (resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilterRules.prototype.update = function (resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.updateWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.updateWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilterRules.prototype.listByRouteFilter = function (resourceGroupName, routeFilterName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listByRouteFilterWithHttpOperationResponse(resourceGroupName, routeFilterName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listByRouteFilterWithHttpOperationResponse(resourceGroupName, routeFilterName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilterRules.prototype.beginDeleteMethod = function (resourceGroupName, routeFilterName, ruleName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilterRules.prototype.beginCreateOrUpdate = function (resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilterRules.prototype.beginUpdate = function (resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginUpdateWithHttpOperationResponse(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteFilterRules.prototype.listByRouteFilterNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listByRouteFilterNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listByRouteFilterNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return RouteFilterRules;
}());



/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RouteTables; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a RouteTables. */
var RouteTables = /** @class */ (function () {
    /**
     * Create a RouteTables.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function RouteTables(client) {
        this.client = client;
    }
    /**
     * Deletes the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteTables.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, routeTableName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, routeTableName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {RouteTablesGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteTables.prototype.getWithHttpOperationResponse = function (resourceGroupName, routeTableName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, expand, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeTableName === null || routeTableName === undefined || typeof routeTableName.valueOf() !== 'string') {
                                throw new Error('routeTableName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                                throw new Error('expand must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeTableName}', encodeURIComponent(routeTableName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (expand !== null && expand !== undefined) {
                            queryParamsArray.push('$expand=' + encodeURIComponent(expand));
                        }
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteTable"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Create or updates a route table in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {RouteTable} parameters Parameters supplied to the create or update
     * route table operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteTables.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, routeTableName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, routeTableName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteTable"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all route tables in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteTables.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteTableListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all route tables in a subscription.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteTables.prototype.listAllWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/routeTables';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteTableListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteTables.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, routeTableName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeTableName === null || routeTableName === undefined || typeof routeTableName.valueOf() !== 'string') {
                                throw new Error('routeTableName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeTableName}', encodeURIComponent(routeTableName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204 && statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Create or updates a route table in a specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {RouteTable} parameters Parameters supplied to the create or update
     * route table operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteTables.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, routeTableName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeTableName === null || routeTableName === undefined || typeof routeTableName.valueOf() !== 'string') {
                                throw new Error('routeTableName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeTableName}', encodeURIComponent(routeTableName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteTable"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteTable"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteTable"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all route tables in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteTables.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteTableListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all route tables in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    RouteTables.prototype.listAllNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteTableListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    RouteTables.prototype.deleteMethod = function (resourceGroupName, routeTableName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, routeTableName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, routeTableName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteTables.prototype.get = function (resourceGroupName, routeTableName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, routeTableName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, routeTableName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteTables.prototype.createOrUpdate = function (resourceGroupName, routeTableName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, routeTableName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, routeTableName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteTables.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteTables.prototype.listAll = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteTables.prototype.beginDeleteMethod = function (resourceGroupName, routeTableName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, routeTableName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, routeTableName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteTables.prototype.beginCreateOrUpdate = function (resourceGroupName, routeTableName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, routeTableName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, routeTableName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteTables.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    RouteTables.prototype.listAllNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return RouteTables;
}());



/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Routes; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a Routes. */
var Routes = /** @class */ (function () {
    /**
     * Create a Routes.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function Routes(client) {
        this.client = client;
    }
    /**
     * Deletes the specified route from a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Routes.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, routeTableName, routeName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, routeTableName, routeName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified route from a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Routes.prototype.getWithHttpOperationResponse = function (resourceGroupName, routeTableName, routeName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeTableName === null || routeTableName === undefined || typeof routeTableName.valueOf() !== 'string') {
                                throw new Error('routeTableName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeName === null || routeName === undefined || typeof routeName.valueOf() !== 'string') {
                                throw new Error('routeName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeTableName}', encodeURIComponent(routeTableName));
                        requestUrl = requestUrl.replace('{routeName}', encodeURIComponent(routeName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["Route"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a route in the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {Route} routeParameters Parameters supplied to the create or update
     * route operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Routes.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, routeTableName, routeName, routeParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, routeTableName, routeName, routeParameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["Route"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all routes in a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Routes.prototype.listWithHttpOperationResponse = function (resourceGroupName, routeTableName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeTableName === null || routeTableName === undefined || typeof routeTableName.valueOf() !== 'string') {
                                throw new Error('routeTableName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeTableName}', encodeURIComponent(routeTableName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified route from a route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Routes.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, routeTableName, routeName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeTableName === null || routeTableName === undefined || typeof routeTableName.valueOf() !== 'string') {
                                throw new Error('routeTableName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeName === null || routeName === undefined || typeof routeName.valueOf() !== 'string') {
                                throw new Error('routeName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeTableName}', encodeURIComponent(routeTableName));
                        requestUrl = requestUrl.replace('{routeName}', encodeURIComponent(routeName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 202 && statusCode !== 200 && statusCode !== 204) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a route in the specified route table.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} routeTableName The name of the route table.
     *
     * @param {string} routeName The name of the route.
     *
     * @param {Route} routeParameters Parameters supplied to the create or update
     * route operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Routes.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, routeTableName, routeName, routeParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeTableName === null || routeTableName === undefined || typeof routeTableName.valueOf() !== 'string') {
                                throw new Error('routeTableName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeName === null || routeName === undefined || typeof routeName.valueOf() !== 'string') {
                                throw new Error('routeName cannot be null or undefined and it must be of type string.');
                            }
                            if (routeParameters === null || routeParameters === undefined) {
                                throw new Error('routeParameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{routeTableName}', encodeURIComponent(routeTableName));
                        requestUrl = requestUrl.replace('{routeName}', encodeURIComponent(routeName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (routeParameters !== null && routeParameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["Route"];
                                requestModel = client.serializer.serialize(requestModelMapper, routeParameters, 'routeParameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(routeParameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["Route"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["Route"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all routes in a route table.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Routes.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["RouteListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    Routes.prototype.deleteMethod = function (resourceGroupName, routeTableName, routeName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, routeTableName, routeName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, routeTableName, routeName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Routes.prototype.get = function (resourceGroupName, routeTableName, routeName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, routeTableName, routeName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, routeTableName, routeName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Routes.prototype.createOrUpdate = function (resourceGroupName, routeTableName, routeName, routeParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, routeTableName, routeName, routeParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, routeTableName, routeName, routeParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Routes.prototype.list = function (resourceGroupName, routeTableName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, routeTableName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, routeTableName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Routes.prototype.beginDeleteMethod = function (resourceGroupName, routeTableName, routeName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, routeTableName, routeName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, routeTableName, routeName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Routes.prototype.beginCreateOrUpdate = function (resourceGroupName, routeTableName, routeName, routeParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, routeTableName, routeName, routeParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, routeTableName, routeName, routeParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Routes.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return Routes;
}());



/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BgpServiceCommunities; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a BgpServiceCommunities. */
var BgpServiceCommunities = /** @class */ (function () {
    /**
     * Create a BgpServiceCommunities.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function BgpServiceCommunities(client) {
        this.client = client;
    }
    /**
     * Gets all the available bgp service communities.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    BgpServiceCommunities.prototype.listWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/bgpServiceCommunities';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["BgpServiceCommunityListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the available bgp service communities.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    BgpServiceCommunities.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["BgpServiceCommunityListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    BgpServiceCommunities.prototype.list = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    BgpServiceCommunities.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return BgpServiceCommunities;
}());



/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Usages; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a Usages. */
var Usages = /** @class */ (function () {
    /**
     * Create a Usages.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function Usages(client) {
        this.client = client;
    }
    /**
     * List network usages for a subscription.
     *
     * @param {string} location The location where resource usage is queried.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Usages.prototype.listWithHttpOperationResponse = function (location, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (location === null || location === undefined || typeof location.valueOf() !== 'string') {
                                throw new Error('location cannot be null or undefined and it must be of type string.');
                            }
                            if (location !== null && location !== undefined) {
                                if (location.match(/^[-\w\._]+$/) === null) {
                                    throw new Error('"location" should satisfy the constraint - "Pattern": /^[-\w\._]+$/');
                                }
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/usages';
                        requestUrl = requestUrl.replace('{location}', encodeURIComponent(location));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["UsagesListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * List network usages for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Usages.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["UsagesListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    Usages.prototype.list = function (location, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(location, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(location, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Usages.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return Usages;
}());



/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VirtualNetworks; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a VirtualNetworks. */
var VirtualNetworks = /** @class */ (function () {
    /**
     * Create a VirtualNetworks.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function VirtualNetworks(client) {
        this.client = client;
    }
    /**
     * Deletes the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworks.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified virtual network by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {VirtualNetworksGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworks.prototype.getWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, expand, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                                throw new Error('expand must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (expand !== null && expand !== undefined) {
                            queryParamsArray.push('$expand=' + encodeURIComponent(expand));
                        }
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetwork"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a virtual network in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {VirtualNetwork} parameters Parameters supplied to the create or
     * update virtual network operation
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworks.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetwork"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all virtual networks in a subscription.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworks.prototype.listAllWithHttpOperationResponse = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualNetworks';
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all virtual networks in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworks.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Checks whether a private IP address is available for use.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {VirtualNetworksCheckIPAddressAvailabilityOptionalParams} [options]
     * Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworks.prototype.checkIPAddressAvailabilityWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, ipAddress, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        ipAddress = (options && options.ipAddress !== undefined) ? options.ipAddress : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (ipAddress !== null && ipAddress !== undefined && typeof ipAddress.valueOf() !== 'string') {
                                throw new Error('ipAddress must be of type string.');
                            }
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/CheckIPAddressAvailability';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        if (ipAddress !== null && ipAddress !== undefined) {
                            queryParamsArray.push('ipAddress=' + encodeURIComponent(ipAddress));
                        }
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["IPAddressAvailabilityResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Lists usage stats.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworks.prototype.listUsageWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/usages';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkListUsageResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworks.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 202 && statusCode !== 204 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a virtual network in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {VirtualNetwork} parameters Parameters supplied to the create or
     * update virtual network operation
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworks.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetwork"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetwork"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetwork"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all virtual networks in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworks.prototype.listAllNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all virtual networks in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworks.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_13 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_13)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Lists usage stats.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworks.prototype.listUsageNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkListUsageResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_14 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_14)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    VirtualNetworks.prototype.deleteMethod = function (resourceGroupName, virtualNetworkName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworks.prototype.get = function (resourceGroupName, virtualNetworkName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworks.prototype.createOrUpdate = function (resourceGroupName, virtualNetworkName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworks.prototype.listAll = function (options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllWithHttpOperationResponse(options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllWithHttpOperationResponse(options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworks.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworks.prototype.checkIPAddressAvailability = function (resourceGroupName, virtualNetworkName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.checkIPAddressAvailabilityWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.checkIPAddressAvailabilityWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworks.prototype.listUsage = function (resourceGroupName, virtualNetworkName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listUsageWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listUsageWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworks.prototype.beginDeleteMethod = function (resourceGroupName, virtualNetworkName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworks.prototype.beginCreateOrUpdate = function (resourceGroupName, virtualNetworkName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworks.prototype.listAllNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listAllNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listAllNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworks.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworks.prototype.listUsageNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listUsageNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listUsageNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return VirtualNetworks;
}());



/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Subnets; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a Subnets. */
var Subnets = /** @class */ (function () {
    /**
     * Create a Subnets.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function Subnets(client) {
        this.client = client;
    }
    /**
     * Deletes the specified subnet.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Subnets.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, subnetName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, subnetName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified subnet by virtual network and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {SubnetsGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Subnets.prototype.getWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, subnetName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, expand, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        expand = (options && options.expand !== undefined) ? options.expand : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (subnetName === null || subnetName === undefined || typeof subnetName.valueOf() !== 'string') {
                                throw new Error('subnetName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                                throw new Error('expand must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{subnetName}', encodeURIComponent(subnetName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (expand !== null && expand !== undefined) {
                            queryParamsArray.push('$expand=' + encodeURIComponent(expand));
                        }
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["Subnet"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {Subnet} subnetParameters Parameters supplied to the create or update
     * subnet operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Subnets.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, subnetName, subnetParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, subnetName, subnetParameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["Subnet"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all subnets in a virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Subnets.prototype.listWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SubnetListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified subnet.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Subnets.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, subnetName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (subnetName === null || subnetName === undefined || typeof subnetName.valueOf() !== 'string') {
                                throw new Error('subnetName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{subnetName}', encodeURIComponent(subnetName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 204 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a subnet in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} subnetName The name of the subnet.
     *
     * @param {Subnet} subnetParameters Parameters supplied to the create or update
     * subnet operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Subnets.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, subnetName, subnetParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (subnetName === null || subnetName === undefined || typeof subnetName.valueOf() !== 'string') {
                                throw new Error('subnetName cannot be null or undefined and it must be of type string.');
                            }
                            if (subnetParameters === null || subnetParameters === undefined) {
                                throw new Error('subnetParameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{subnetName}', encodeURIComponent(subnetName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (subnetParameters !== null && subnetParameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["Subnet"];
                                requestModel = client.serializer.serialize(requestModelMapper, subnetParameters, 'subnetParameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(subnetParameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["Subnet"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["Subnet"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all subnets in a virtual network.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Subnets.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["SubnetListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    Subnets.prototype.deleteMethod = function (resourceGroupName, virtualNetworkName, subnetName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, subnetName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, subnetName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Subnets.prototype.get = function (resourceGroupName, virtualNetworkName, subnetName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, virtualNetworkName, subnetName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, virtualNetworkName, subnetName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Subnets.prototype.createOrUpdate = function (resourceGroupName, virtualNetworkName, subnetName, subnetParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, subnetName, subnetParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, subnetName, subnetParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Subnets.prototype.list = function (resourceGroupName, virtualNetworkName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Subnets.prototype.beginDeleteMethod = function (resourceGroupName, virtualNetworkName, subnetName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, subnetName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, subnetName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Subnets.prototype.beginCreateOrUpdate = function (resourceGroupName, virtualNetworkName, subnetName, subnetParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, subnetName, subnetParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, subnetName, subnetParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Subnets.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return Subnets;
}());



/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VirtualNetworkPeerings; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a VirtualNetworkPeerings. */
var VirtualNetworkPeerings = /** @class */ (function () {
    /**
     * Create a VirtualNetworkPeerings.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function VirtualNetworkPeerings(client) {
        this.client = client;
    }
    /**
     * Deletes the specified virtual network peering.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the virtual network
     * peering.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkPeerings.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified virtual network peering.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the virtual network
     * peering.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkPeerings.prototype.getWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkPeeringName === null || virtualNetworkPeeringName === undefined || typeof virtualNetworkPeeringName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkPeeringName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings/{virtualNetworkPeeringName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{virtualNetworkPeeringName}', encodeURIComponent(virtualNetworkPeeringName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkPeering"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a peering in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the peering.
     *
     * @param {VirtualNetworkPeering} virtualNetworkPeeringParameters Parameters
     * supplied to the create or update virtual network peering operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkPeerings.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkPeering"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all virtual network peerings in a virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkPeerings.prototype.listWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkPeeringListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified virtual network peering.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the virtual network
     * peering.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkPeerings.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkPeeringName === null || virtualNetworkPeeringName === undefined || typeof virtualNetworkPeeringName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkPeeringName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings/{virtualNetworkPeeringName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{virtualNetworkPeeringName}', encodeURIComponent(virtualNetworkPeeringName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 204 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a peering in the specified virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkName The name of the virtual network.
     *
     * @param {string} virtualNetworkPeeringName The name of the peering.
     *
     * @param {VirtualNetworkPeering} virtualNetworkPeeringParameters Parameters
     * supplied to the create or update virtual network peering operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkPeerings.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkName === null || virtualNetworkName === undefined || typeof virtualNetworkName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkPeeringName === null || virtualNetworkPeeringName === undefined || typeof virtualNetworkPeeringName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkPeeringName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkPeeringParameters === null || virtualNetworkPeeringParameters === undefined) {
                                throw new Error('virtualNetworkPeeringParameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings/{virtualNetworkPeeringName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkName}', encodeURIComponent(virtualNetworkName));
                        requestUrl = requestUrl.replace('{virtualNetworkPeeringName}', encodeURIComponent(virtualNetworkPeeringName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (virtualNetworkPeeringParameters !== null && virtualNetworkPeeringParameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkPeering"];
                                requestModel = client.serializer.serialize(requestModelMapper, virtualNetworkPeeringParameters, 'virtualNetworkPeeringParameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(virtualNetworkPeeringParameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkPeering"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkPeering"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all virtual network peerings in a virtual network.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkPeerings.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkPeeringListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    VirtualNetworkPeerings.prototype.deleteMethod = function (resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkPeerings.prototype.get = function (resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkPeerings.prototype.createOrUpdate = function (resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkPeerings.prototype.list = function (resourceGroupName, virtualNetworkName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, virtualNetworkName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkPeerings.prototype.beginDeleteMethod = function (resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkPeerings.prototype.beginCreateOrUpdate = function (resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkPeerings.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return VirtualNetworkPeerings;
}());



/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VirtualNetworkGateways; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a VirtualNetworkGateways. */
var VirtualNetworkGateways = /** @class */ (function () {
    /**
     * Create a VirtualNetworkGateways.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function VirtualNetworkGateways(client) {
        this.client = client;
    }
    /**
     * Creates or updates a virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {VirtualNetworkGateway} parameters Parameters supplied to create or
     * update virtual network gateway operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGateway"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified virtual network gateway by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.getWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined || typeof virtualNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayName}', encodeURIComponent(virtualNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGateway"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified virtual network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all virtual network gateways by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGatewayListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the connections in a virtual network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.listConnectionsWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined || typeof virtualNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/connections';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayName}', encodeURIComponent(virtualNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGatewayListConnectionsResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Resets the primary of the virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {VirtualNetworkGatewaysResetOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.resetWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_8, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginResetWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGateway"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Generates VPN client package for P2S client of the virtual network gateway
     * in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {VpnClientParameters} parameters Parameters supplied to the generate
     * virtual network gateway VPN client package operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.generatevpnclientpackageWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_10, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGeneratevpnclientpackageWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = {
                                    required: false,
                                    serializedName: 'parsedResponse',
                                    type: {
                                        name: 'String'
                                    }
                                };
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Generates VPN profile for P2S client of the virtual network gateway in the
     * specified resource group. Used for IKEV2 and radius based authentication.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {VpnClientParameters} parameters Parameters supplied to the generate
     * virtual network gateway VPN client package operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.generateVpnProfileWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_12, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGenerateVpnProfileWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = {
                                    required: false,
                                    serializedName: 'parsedResponse',
                                    type: {
                                        name: 'String'
                                    }
                                };
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_13 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_13)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets pre-generated VPN profile for P2S client of the virtual network gateway
     * in the specified resource group. The profile needs to be generated first
     * using generateVpnProfile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.getVpnProfilePackageUrlWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_14, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_15;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGetVpnProfilePackageUrlWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_14 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_14)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = {
                                    required: false,
                                    serializedName: 'parsedResponse',
                                    type: {
                                        name: 'String'
                                    }
                                };
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_15 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_15)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams} [options]
     * Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.getBgpPeerStatusWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_16, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_17;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGetBgpPeerStatusWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_16 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_16)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["BgpPeerStatusListResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_17 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_17)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * This operation retrieves a list of routes the virtual network gateway has
     * learned, including routes learned from BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.getLearnedRoutesWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_18, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_19;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGetLearnedRoutesWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_18 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_18)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["GatewayRouteListResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_19 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_19)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * This operation retrieves a list of routes the virtual network gateway is
     * advertising to the specified peer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {string} peer The IP address of the peer
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.getAdvertisedRoutesWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, peer, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_20, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_21;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginGetAdvertisedRoutesWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, peer, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_20 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_20)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["GatewayRouteListResult"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_21 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_21)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {VirtualNetworkGateway} parameters Parameters supplied to create or
     * update virtual network gateway operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_22;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined || typeof virtualNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayName}', encodeURIComponent(virtualNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGateway"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGateway"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGateway"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_22 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_22)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified virtual network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_23;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined || typeof virtualNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayName}', encodeURIComponent(virtualNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204 && statusCode !== 202 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_23 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_23)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Resets the primary of the virtual network gateway in the specified resource
     * group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {VirtualNetworkGatewaysBeginResetOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.beginResetWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, gatewayVip, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_24;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        gatewayVip = (options && options.gatewayVip !== undefined) ? options.gatewayVip : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined || typeof virtualNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (gatewayVip !== null && gatewayVip !== undefined && typeof gatewayVip.valueOf() !== 'string') {
                                throw new Error('gatewayVip must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/reset';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayName}', encodeURIComponent(virtualNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        if (gatewayVip !== null && gatewayVip !== undefined) {
                            queryParamsArray.push('gatewayVip=' + encodeURIComponent(gatewayVip));
                        }
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 202 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGateway"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_24 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_24)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Generates VPN client package for P2S client of the virtual network gateway
     * in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {VpnClientParameters} parameters Parameters supplied to the generate
     * virtual network gateway VPN client package operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.beginGeneratevpnclientpackageWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_25;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined || typeof virtualNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnclientpackage';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayName}', encodeURIComponent(virtualNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VpnClientParameters"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = {
                                        required: false,
                                        serializedName: 'parsedResponse',
                                        type: {
                                            name: 'String'
                                        }
                                    };
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_25 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_25)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Generates VPN profile for P2S client of the virtual network gateway in the
     * specified resource group. Used for IKEV2 and radius based authentication.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {VpnClientParameters} parameters Parameters supplied to the generate
     * virtual network gateway VPN client package operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.beginGenerateVpnProfileWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_26;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined || typeof virtualNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnprofile';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayName}', encodeURIComponent(virtualNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VpnClientParameters"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = {
                                        required: false,
                                        serializedName: 'parsedResponse',
                                        type: {
                                            name: 'String'
                                        }
                                    };
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_26 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_26)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets pre-generated VPN profile for P2S client of the virtual network gateway
     * in the specified resource group. The profile needs to be generated first
     * using generateVpnProfile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.beginGetVpnProfilePackageUrlWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_27;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined || typeof virtualNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getvpnprofilepackageurl';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayName}', encodeURIComponent(virtualNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = {
                                        required: false,
                                        serializedName: 'parsedResponse',
                                        type: {
                                            name: 'String'
                                        }
                                    };
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_27 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_27)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {VirtualNetworkGatewaysBeginGetBgpPeerStatusOptionalParams} [options]
     * Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.beginGetBgpPeerStatusWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, peer, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_28;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        peer = (options && options.peer !== undefined) ? options.peer : undefined;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined || typeof virtualNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (peer !== null && peer !== undefined && typeof peer.valueOf() !== 'string') {
                                throw new Error('peer must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getBgpPeerStatus';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayName}', encodeURIComponent(virtualNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        if (peer !== null && peer !== undefined) {
                            queryParamsArray.push('peer=' + encodeURIComponent(peer));
                        }
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["BgpPeerStatusListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_28 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_28)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * This operation retrieves a list of routes the virtual network gateway has
     * learned, including routes learned from BGP peers.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.beginGetLearnedRoutesWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_29;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined || typeof virtualNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getLearnedRoutes';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayName}', encodeURIComponent(virtualNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["GatewayRouteListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_29 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_29)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * This operation retrieves a list of routes the virtual network gateway is
     * advertising to the specified peer.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayName The name of the virtual network
     * gateway.
     *
     * @param {string} peer The IP address of the peer
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.beginGetAdvertisedRoutesWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayName, peer, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_30;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayName === null || virtualNetworkGatewayName === undefined || typeof virtualNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (peer === null || peer === undefined || typeof peer.valueOf() !== 'string') {
                                throw new Error('peer cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getAdvertisedRoutes';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayName}', encodeURIComponent(virtualNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('peer=' + encodeURIComponent(peer));
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["GatewayRouteListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_30 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_30)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all virtual network gateways by resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_31;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGatewayListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_31 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_31)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the connections in a virtual network gateway.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGateways.prototype.listConnectionsNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_32;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGatewayListConnectionsResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_32 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_32)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    VirtualNetworkGateways.prototype.createOrUpdate = function (resourceGroupName, virtualNetworkGatewayName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.get = function (resourceGroupName, virtualNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.deleteMethod = function (resourceGroupName, virtualNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.listConnections = function (resourceGroupName, virtualNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listConnectionsWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listConnectionsWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.reset = function (resourceGroupName, virtualNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.resetWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.resetWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.generatevpnclientpackage = function (resourceGroupName, virtualNetworkGatewayName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.generatevpnclientpackageWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.generatevpnclientpackageWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.generateVpnProfile = function (resourceGroupName, virtualNetworkGatewayName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.generateVpnProfileWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.generateVpnProfileWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.getVpnProfilePackageUrl = function (resourceGroupName, virtualNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getVpnProfilePackageUrlWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getVpnProfilePackageUrlWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.getBgpPeerStatus = function (resourceGroupName, virtualNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getBgpPeerStatusWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getBgpPeerStatusWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.getLearnedRoutes = function (resourceGroupName, virtualNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getLearnedRoutesWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getLearnedRoutesWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.getAdvertisedRoutes = function (resourceGroupName, virtualNetworkGatewayName, peer, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getAdvertisedRoutesWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, peer, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getAdvertisedRoutesWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, peer, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.beginCreateOrUpdate = function (resourceGroupName, virtualNetworkGatewayName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.beginDeleteMethod = function (resourceGroupName, virtualNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.beginReset = function (resourceGroupName, virtualNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginResetWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginResetWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.beginGeneratevpnclientpackage = function (resourceGroupName, virtualNetworkGatewayName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGeneratevpnclientpackageWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGeneratevpnclientpackageWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.beginGenerateVpnProfile = function (resourceGroupName, virtualNetworkGatewayName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGenerateVpnProfileWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGenerateVpnProfileWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.beginGetVpnProfilePackageUrl = function (resourceGroupName, virtualNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGetVpnProfilePackageUrlWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGetVpnProfilePackageUrlWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.beginGetBgpPeerStatus = function (resourceGroupName, virtualNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGetBgpPeerStatusWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGetBgpPeerStatusWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.beginGetLearnedRoutes = function (resourceGroupName, virtualNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGetLearnedRoutesWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGetLearnedRoutesWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.beginGetAdvertisedRoutes = function (resourceGroupName, virtualNetworkGatewayName, peer, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginGetAdvertisedRoutesWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, peer, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginGetAdvertisedRoutesWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayName, peer, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGateways.prototype.listConnectionsNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listConnectionsNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listConnectionsNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return VirtualNetworkGateways;
}());



/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VirtualNetworkGatewayConnections; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a VirtualNetworkGatewayConnections. */
var VirtualNetworkGatewayConnections = /** @class */ (function () {
    /**
     * Create a VirtualNetworkGatewayConnections.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function VirtualNetworkGatewayConnections(client) {
        this.client = client;
    }
    /**
     * Creates or updates a virtual network gateway connection in the specified
     * resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {VirtualNetworkGatewayConnection} parameters Parameters supplied to
     * the create or update virtual network gateway connection operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGatewayConnections.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGatewayConnection"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified virtual network gateway connection by resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGatewayConnections.prototype.getWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayConnectionName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayConnectionName === null || virtualNetworkGatewayConnectionName === undefined || typeof virtualNetworkGatewayConnectionName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayConnectionName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayConnectionName}', encodeURIComponent(virtualNetworkGatewayConnectionName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGatewayConnection"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified virtual network Gateway connection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGatewayConnections.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayConnectionName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual
     * network gateway connection shared key for passed virtual network gateway
     * connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection name.
     *
     * @param {ConnectionSharedKey} parameters Parameters supplied to the Begin Set
     * Virtual Network Gateway connection Shared key operation throughNetwork
     * resource provider.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGatewayConnections.prototype.setSharedKeyWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_6, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginSetSharedKeyWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ConnectionSharedKey"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * The Get VirtualNetworkGatewayConnectionSharedKey operation retrieves
     * information about the specified virtual network gateway connection shared
     * key through Network resource provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection shared key name.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGatewayConnections.prototype.getSharedKeyWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayConnectionName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayConnectionName === null || virtualNetworkGatewayConnectionName === undefined || typeof virtualNetworkGatewayConnectionName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayConnectionName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayConnectionName}', encodeURIComponent(virtualNetworkGatewayConnectionName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ConnectionSharedKey"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * The List VirtualNetworkGatewayConnections operation retrieves all the
     * virtual network gateways connections created.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGatewayConnections.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGatewayConnectionListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the
     * virtual network gateway connection shared key for passed virtual network
     * gateway connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection reset shared key Name.
     *
     * @param {ConnectionResetSharedKey} parameters Parameters supplied to the
     * begin reset virtual network gateway connection shared key operation through
     * network resource provider.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGatewayConnections.prototype.resetSharedKeyWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_10, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginResetSharedKeyWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ConnectionResetSharedKey"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a virtual network gateway connection in the specified
     * resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {VirtualNetworkGatewayConnection} parameters Parameters supplied to
     * the create or update virtual network gateway connection operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGatewayConnections.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayConnectionName === null || virtualNetworkGatewayConnectionName === undefined || typeof virtualNetworkGatewayConnectionName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayConnectionName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayConnectionName}', encodeURIComponent(virtualNetworkGatewayConnectionName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGatewayConnection"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGatewayConnection"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGatewayConnection"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified virtual network Gateway connection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGatewayConnections.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayConnectionName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayConnectionName === null || virtualNetworkGatewayConnectionName === undefined || typeof virtualNetworkGatewayConnectionName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayConnectionName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayConnectionName}', encodeURIComponent(virtualNetworkGatewayConnectionName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_13 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_13)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual
     * network gateway connection shared key for passed virtual network gateway
     * connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection name.
     *
     * @param {ConnectionSharedKey} parameters Parameters supplied to the Begin Set
     * Virtual Network Gateway connection Shared key operation throughNetwork
     * resource provider.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGatewayConnections.prototype.beginSetSharedKeyWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayConnectionName === null || virtualNetworkGatewayConnectionName === undefined || typeof virtualNetworkGatewayConnectionName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayConnectionName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayConnectionName}', encodeURIComponent(virtualNetworkGatewayConnectionName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ConnectionSharedKey"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 201 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ConnectionSharedKey"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ConnectionSharedKey"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_14 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_14)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the
     * virtual network gateway connection shared key for passed virtual network
     * gateway connection in the specified resource group through Network resource
     * provider.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} virtualNetworkGatewayConnectionName The virtual network
     * gateway connection reset shared key Name.
     *
     * @param {ConnectionResetSharedKey} parameters Parameters supplied to the
     * begin reset virtual network gateway connection shared key operation through
     * network resource provider.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGatewayConnections.prototype.beginResetSharedKeyWithHttpOperationResponse = function (resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_15;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (virtualNetworkGatewayConnectionName === null || virtualNetworkGatewayConnectionName === undefined || typeof virtualNetworkGatewayConnectionName.valueOf() !== 'string') {
                                throw new Error('virtualNetworkGatewayConnectionName cannot be null or undefined and it must be of type string.');
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey/reset';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{virtualNetworkGatewayConnectionName}', encodeURIComponent(virtualNetworkGatewayConnectionName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ConnectionResetSharedKey"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["ConnectionResetSharedKey"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_15 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_15)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * The List VirtualNetworkGatewayConnections operation retrieves all the
     * virtual network gateways connections created.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    VirtualNetworkGatewayConnections.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_16;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["VirtualNetworkGatewayConnectionListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_16 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_16)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    VirtualNetworkGatewayConnections.prototype.createOrUpdate = function (resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGatewayConnections.prototype.get = function (resourceGroupName, virtualNetworkGatewayConnectionName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGatewayConnections.prototype.deleteMethod = function (resourceGroupName, virtualNetworkGatewayConnectionName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGatewayConnections.prototype.setSharedKey = function (resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.setSharedKeyWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.setSharedKeyWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGatewayConnections.prototype.getSharedKey = function (resourceGroupName, virtualNetworkGatewayConnectionName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getSharedKeyWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getSharedKeyWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGatewayConnections.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGatewayConnections.prototype.resetSharedKey = function (resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.resetSharedKeyWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.resetSharedKeyWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGatewayConnections.prototype.beginCreateOrUpdate = function (resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGatewayConnections.prototype.beginDeleteMethod = function (resourceGroupName, virtualNetworkGatewayConnectionName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGatewayConnections.prototype.beginSetSharedKey = function (resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginSetSharedKeyWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginSetSharedKeyWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGatewayConnections.prototype.beginResetSharedKey = function (resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginResetSharedKeyWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginResetSharedKeyWithHttpOperationResponse(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    VirtualNetworkGatewayConnections.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return VirtualNetworkGatewayConnections;
}());



/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LocalNetworkGateways; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ms_rest_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ms_rest_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_mappers__ = __webpack_require__(0);
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var WebResource = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["WebResource"];
/** Class representing a LocalNetworkGateways. */
var LocalNetworkGateways = /** @class */ (function () {
    /**
     * Create a LocalNetworkGateways.
     * @param {NetworkManagementClient} client Reference to the service client.
     */
    function LocalNetworkGateways(client) {
        this.client = client;
    }
    /**
     * Creates or updates a local network gateway in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {LocalNetworkGateway} parameters Parameters supplied to the create or
     * update local network gateway operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LocalNetworkGateways.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, localNetworkGatewayName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, localNetworkGatewayName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LocalNetworkGateway"];
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets the specified local network gateway in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LocalNetworkGateways.prototype.getWithHttpOperationResponse = function (resourceGroupName, localNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (localNetworkGatewayName === null || localNetworkGatewayName === undefined || typeof localNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('localNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (localNetworkGatewayName !== null && localNetworkGatewayName !== undefined) {
                                if (localNetworkGatewayName.length < 1) {
                                    throw new Error('"localNetworkGatewayName" should satisfy the constraint - "MinLength": 1');
                                }
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{localNetworkGatewayName}', encodeURIComponent(localNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LocalNetworkGateway"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified local network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LocalNetworkGateways.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, localNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, localNetworkGatewayName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the local network gateways in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LocalNetworkGateways.prototype.listWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LocalNetworkGatewayListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Creates or updates a local network gateway in the specified resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {LocalNetworkGateway} parameters Parameters supplied to the create or
     * update local network gateway operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LocalNetworkGateways.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, localNetworkGatewayName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (localNetworkGatewayName === null || localNetworkGatewayName === undefined || typeof localNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('localNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (localNetworkGatewayName !== null && localNetworkGatewayName !== undefined) {
                                if (localNetworkGatewayName.length < 1) {
                                    throw new Error('"localNetworkGatewayName" should satisfy the constraint - "MinLength": 1');
                                }
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{localNetworkGatewayName}', encodeURIComponent(localNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LocalNetworkGateway"];
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 201 && statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LocalNetworkGateway"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LocalNetworkGateway"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError1.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Deletes the specified local network gateway.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} localNetworkGatewayName The name of the local network
     * gateway.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LocalNetworkGateways.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, localNetworkGatewayName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, apiVersion, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        apiVersion = '2017-09-01';
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (localNetworkGatewayName === null || localNetworkGatewayName === undefined || typeof localNetworkGatewayName.valueOf() !== 'string') {
                                throw new Error('localNetworkGatewayName cannot be null or undefined and it must be of type string.');
                            }
                            if (localNetworkGatewayName !== null && localNetworkGatewayName !== undefined) {
                                if (localNetworkGatewayName.length < 1) {
                                    throw new Error('"localNetworkGatewayName" should satisfy the constraint - "MinLength": 1');
                                }
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{localNetworkGatewayName}', encodeURIComponent(localNetworkGatewayName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204 && statusCode !== 200 && statusCode !== 202) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets all the local network gateways in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    LocalNetworkGateways.prototype.listNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["generateUuid"]();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"](operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                            error.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["CloudError"];
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = __WEBPACK_IMPORTED_MODULE_1__models_mappers__["LocalNetworkGatewayListResult"];
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripRequest"](httpRequest);
                                deserializationError.response = __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["stripResponse"](response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    LocalNetworkGateways.prototype.createOrUpdate = function (resourceGroupName, localNetworkGatewayName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, localNetworkGatewayName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.createOrUpdateWithHttpOperationResponse(resourceGroupName, localNetworkGatewayName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LocalNetworkGateways.prototype.get = function (resourceGroupName, localNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, localNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.getWithHttpOperationResponse(resourceGroupName, localNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LocalNetworkGateways.prototype.deleteMethod = function (resourceGroupName, localNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, localNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.deleteMethodWithHttpOperationResponse(resourceGroupName, localNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LocalNetworkGateways.prototype.list = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LocalNetworkGateways.prototype.beginCreateOrUpdate = function (resourceGroupName, localNetworkGatewayName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, localNetworkGatewayName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, localNetworkGatewayName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LocalNetworkGateways.prototype.beginDeleteMethod = function (resourceGroupName, localNetworkGatewayName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, localNetworkGatewayName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, localNetworkGatewayName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    LocalNetworkGateways.prototype.listNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_ms_rest_js__["promiseToCallback"](this.listNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return LocalNetworkGateways;
}());



/***/ })
/******/ ]);
//# sourceMappingURL=networkManagementClientBundle.js.map